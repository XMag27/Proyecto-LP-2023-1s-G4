
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW AS BITAND BITOR BITXOR BOOL BREAK CHAR COMMA CONST CONTINUE DIVIDE DOUBLE_POINT ELSE ENUM EQUAL EQUAL_EQUAL EXCLAMATION FALSE FLOAT32 FLOAT64 FN FOR GREATER_EQUAL IF IMPL INT16 INT32 INT64 INT8 LBRACKET LDIAMOND LESS_EQUAL LET LOOP LPAREN L_BRACKET MAIN MATCH MINUS MOD MUT NOT_EQUAL NUMBER OR PERCENTAGE PLUS POINT PRINT PUB RBRACKET RDIAMOND REF RETURN RPAREN R_BRACKET SEMICOLON STATIC STR STRING STRUCT TIMES TRAIT TRUE TYPE UINT16 UINT32 UINT64 UINT8 USE VARIABLE VEC WHILEprograma : programa item\n                | itemitem : declaracion\n            | importacion\n            | funcion\n            | errordeclaracion : declaracion_variable\n                     | declaracion_estructuradeclaracion_variable : LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON\n                            | LET VARIABLE DOUBLE_POINT tipo SEMICOLON\n                            | LET VARIABLE EQUAL expresion SEMICOLON\n                            | LET VARIABLE SEMICOLONdeclaracion_estructura : STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON\n                              | STRUCT VARIABLE LBRACKET RBRACKET SEMICOLONcampos : campos COMMA campo\n              | campocampo : VARIABLE DOUBLE_POINT tipotipo : tipo_simple tipo_simple : INT8\n                    | INT16\n                    | INT32\n                    | INT64\n                    | UINT8\n                    | UINT16\n                    | UINT32\n                    | UINT64\n                    | FLOAT32\n                    | FLOAT64\n                    | BOOL\n                    | CHAR\n                    | STRimportacion : USE VARIABLE SEMICOLONfuncion : funcion_genericafuncion_generica : FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloqueparametros : parametros COMMA parametro\n                  | parametro\n                  | emptyempty :parametro : VARIABLE DOUBLE_POINT tipobloque : LBRACKET sentencias RBRACKETsentencias : sentencias sentencia\n                  | sentenciasentencia : expresion SEMICOLON\n                 | declaracion\n                 | asignacionasignacion : VARIABLE EQUAL expresion SEMICOLONexpresion : expresion_literal\n                    | expresion_variable\n                    | expresion_funcion\n                    | expresion_estructuraexpresion_literal : literalliteral : NUMBER\n                | STRING\n                | TRUE\n                | FALSEexpresion_variable : VARIABLEexpresion_funcion : VARIABLE LPAREN argumentos RPAREN SEMICOLONexpresion_estructura : hashmaphashmap : LDIAMOND hashmap_types RDIAMONDhashmap_types : hashmap_types COMMA hashmap_type\n                     | hashmap_typehashmap_type : tipoargumentos : argumentos COMMA argumento\n                  | argumento\n                  | emptyargumento : expresion'
    
_lr_action_items = {'error':([0,1,2,3,4,5,6,7,8,10,14,19,22,62,64,71,83,88,95,103,],[6,6,-2,-3,-4,-5,-6,-7,-8,-33,-1,-32,-12,-10,-11,-14,-13,-9,-34,-40,]),'USE':([0,1,2,3,4,5,6,7,8,10,14,19,22,62,64,71,83,88,95,103,],[9,9,-2,-3,-4,-5,-6,-7,-8,-33,-1,-32,-12,-10,-11,-14,-13,-9,-34,-40,]),'LET':([0,1,2,3,4,5,6,7,8,10,14,19,22,62,64,71,83,88,95,96,97,98,100,101,103,104,105,108,],[11,11,-2,-3,-4,-5,-6,-7,-8,-33,-1,-32,-12,-10,-11,-14,-13,-9,-34,11,11,-42,-44,-45,-40,-41,-43,-46,]),'STRUCT':([0,1,2,3,4,5,6,7,8,10,14,19,22,62,64,71,83,88,95,96,97,98,100,101,103,104,105,108,],[12,12,-2,-3,-4,-5,-6,-7,-8,-33,-1,-32,-12,-10,-11,-14,-13,-9,-34,12,12,-42,-44,-45,-40,-41,-43,-46,]),'FN':([0,1,2,3,4,5,6,7,8,10,14,19,22,62,64,71,83,88,95,103,],[13,13,-2,-3,-4,-5,-6,-7,-8,-33,-1,-32,-12,-10,-11,-14,-13,-9,-34,-40,]),'$end':([1,2,3,4,5,6,7,8,10,14,19,22,62,64,71,83,88,95,103,],[0,-2,-3,-4,-5,-6,-7,-8,-33,-1,-32,-12,-10,-11,-14,-13,-9,-34,-40,]),'RBRACKET':([7,8,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,54,56,62,64,71,82,83,84,88,97,98,100,101,104,105,108,],[-7,-8,-12,55,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,69,-16,-10,-11,-14,-17,-13,-15,-9,103,-42,-44,-45,-41,-43,-46,]),'VARIABLE':([7,8,9,11,12,13,21,22,23,24,61,62,63,64,70,71,74,83,88,90,96,97,98,100,101,104,105,106,108,],[-7,-8,15,16,17,18,40,-12,53,57,40,-10,40,-11,53,-14,57,-13,-9,40,102,102,-42,-44,-45,-41,-43,40,-46,]),'NUMBER':([7,8,21,22,61,62,63,64,71,83,88,90,96,97,98,100,101,104,105,106,108,],[-7,-8,48,-12,48,-10,48,-11,-14,-13,-9,48,48,48,-42,-44,-45,-41,-43,48,-46,]),'STRING':([7,8,21,22,61,62,63,64,71,83,88,90,96,97,98,100,101,104,105,106,108,],[-7,-8,49,-12,49,-10,49,-11,-14,-13,-9,49,49,49,-42,-44,-45,-41,-43,49,-46,]),'TRUE':([7,8,21,22,61,62,63,64,71,83,88,90,96,97,98,100,101,104,105,106,108,],[-7,-8,50,-12,50,-10,50,-11,-14,-13,-9,50,50,50,-42,-44,-45,-41,-43,50,-46,]),'FALSE':([7,8,21,22,61,62,63,64,71,83,88,90,96,97,98,100,101,104,105,106,108,],[-7,-8,51,-12,51,-10,51,-11,-14,-13,-9,51,51,51,-42,-44,-45,-41,-43,51,-46,]),'LDIAMOND':([7,8,21,22,61,62,63,64,71,83,88,90,96,97,98,100,101,104,105,106,108,],[-7,-8,52,-12,52,-10,52,-11,-14,-13,-9,52,52,52,-42,-44,-45,-41,-43,52,-46,]),'SEMICOLON':([15,16,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,69,75,80,89,93,99,102,107,],[19,22,62,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-56,64,-47,-48,-49,-50,-51,-58,-52,-53,-54,-55,71,83,88,-59,93,-57,105,-56,108,]),'DOUBLE_POINT':([16,53,57,],[20,68,72,]),'EQUAL':([16,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,102,],[21,61,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,106,]),'LBRACKET':([17,27,28,29,30,31,32,33,34,35,36,37,38,39,92,],[23,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,96,]),'LPAREN':([18,40,102,],[24,63,63,]),'INT8':([20,52,68,72,81,86,],[27,27,27,27,27,27,]),'INT16':([20,52,68,72,81,86,],[28,28,28,28,28,28,]),'INT32':([20,52,68,72,81,86,],[29,29,29,29,29,29,]),'INT64':([20,52,68,72,81,86,],[30,30,30,30,30,30,]),'UINT8':([20,52,68,72,81,86,],[31,31,31,31,31,31,]),'UINT16':([20,52,68,72,81,86,],[32,32,32,32,32,32,]),'UINT32':([20,52,68,72,81,86,],[33,33,33,33,33,33,]),'UINT64':([20,52,68,72,81,86,],[34,34,34,34,34,34,]),'FLOAT32':([20,52,68,72,81,86,],[35,35,35,35,35,35,]),'FLOAT64':([20,52,68,72,81,86,],[36,36,36,36,36,36,]),'BOOL':([20,52,68,72,81,86,],[37,37,37,37,37,37,]),'CHAR':([20,52,68,72,81,86,],[38,38,38,38,38,38,]),'STR':([20,52,68,72,81,86,],[39,39,39,39,39,39,]),'RPAREN':([24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,58,59,60,63,76,77,78,79,80,85,87,93,94,],[-38,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-56,-47,-48,-49,-50,-51,-58,-52,-53,-54,-55,73,-36,-37,-38,89,-64,-65,-66,-59,-39,-35,-57,-63,]),'COMMA':([24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,54,56,58,59,60,63,65,66,67,76,77,78,79,80,82,84,85,87,91,93,94,],[-38,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-56,-47,-48,-49,-50,-51,-58,-52,-53,-54,-55,70,-16,74,-36,-37,-38,81,-61,-62,90,-64,-65,-66,-59,-17,-15,-39,-35,-60,-57,-63,]),'RDIAMOND':([26,27,28,29,30,31,32,33,34,35,36,37,38,39,65,66,67,91,],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,80,-61,-62,-60,]),'ARROW':([73,],[86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'item':([0,1,],[2,14,]),'declaracion':([0,1,96,97,],[3,3,100,100,]),'importacion':([0,1,],[4,4,]),'funcion':([0,1,],[5,5,]),'declaracion_variable':([0,1,96,97,],[7,7,7,7,]),'declaracion_estructura':([0,1,96,97,],[8,8,8,8,]),'funcion_generica':([0,1,],[10,10,]),'tipo':([20,52,68,72,81,],[25,67,82,85,67,]),'tipo_simple':([20,52,68,72,81,86,],[26,26,26,26,26,92,]),'expresion':([21,61,63,90,96,97,106,],[41,75,79,79,99,99,107,]),'expresion_literal':([21,61,63,90,96,97,106,],[42,42,42,42,42,42,42,]),'expresion_variable':([21,61,63,90,96,97,106,],[43,43,43,43,43,43,43,]),'expresion_funcion':([21,61,63,90,96,97,106,],[44,44,44,44,44,44,44,]),'expresion_estructura':([21,61,63,90,96,97,106,],[45,45,45,45,45,45,45,]),'literal':([21,61,63,90,96,97,106,],[46,46,46,46,46,46,46,]),'hashmap':([21,61,63,90,96,97,106,],[47,47,47,47,47,47,47,]),'campos':([23,],[54,]),'campo':([23,70,],[56,84,]),'parametros':([24,],[58,]),'parametro':([24,74,],[59,87,]),'empty':([24,63,],[60,78,]),'hashmap_types':([52,],[65,]),'hashmap_type':([52,81,],[66,91,]),'argumentos':([63,],[76,]),'argumento':([63,90,],[77,94,]),'bloque':([92,],[95,]),'sentencias':([96,],[97,]),'sentencia':([96,97,],[98,104,]),'asignacion':([96,97,],[101,101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> programa item','programa',2,'p_programa','sintactico.py',57),
  ('programa -> item','programa',1,'p_programa','sintactico.py',58),
  ('item -> declaracion','item',1,'p_item','sintactico.py',61),
  ('item -> importacion','item',1,'p_item','sintactico.py',62),
  ('item -> funcion','item',1,'p_item','sintactico.py',63),
  ('item -> error','item',1,'p_item','sintactico.py',64),
  ('declaracion -> declaracion_variable','declaracion',1,'p_declaracion','sintactico.py',67),
  ('declaracion -> declaracion_estructura','declaracion',1,'p_declaracion','sintactico.py',68),
  ('declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON','declaracion_variable',7,'p_declaracion_variable','sintactico.py',71),
  ('declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON','declaracion_variable',5,'p_declaracion_variable','sintactico.py',72),
  ('declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON','declaracion_variable',5,'p_declaracion_variable','sintactico.py',73),
  ('declaracion_variable -> LET VARIABLE SEMICOLON','declaracion_variable',3,'p_declaracion_variable','sintactico.py',74),
  ('declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON','declaracion_estructura',6,'p_declaracion_estructura','sintactico.py',78),
  ('declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON','declaracion_estructura',5,'p_declaracion_estructura','sintactico.py',79),
  ('campos -> campos COMMA campo','campos',3,'p_campos','sintactico.py',83),
  ('campos -> campo','campos',1,'p_campos','sintactico.py',84),
  ('campo -> VARIABLE DOUBLE_POINT tipo','campo',3,'p_campo','sintactico.py',87),
  ('tipo -> tipo_simple','tipo',1,'p_tipo','sintactico.py',90),
  ('tipo_simple -> INT8','tipo_simple',1,'p_tipo_simple','sintactico.py',93),
  ('tipo_simple -> INT16','tipo_simple',1,'p_tipo_simple','sintactico.py',94),
  ('tipo_simple -> INT32','tipo_simple',1,'p_tipo_simple','sintactico.py',95),
  ('tipo_simple -> INT64','tipo_simple',1,'p_tipo_simple','sintactico.py',96),
  ('tipo_simple -> UINT8','tipo_simple',1,'p_tipo_simple','sintactico.py',97),
  ('tipo_simple -> UINT16','tipo_simple',1,'p_tipo_simple','sintactico.py',98),
  ('tipo_simple -> UINT32','tipo_simple',1,'p_tipo_simple','sintactico.py',99),
  ('tipo_simple -> UINT64','tipo_simple',1,'p_tipo_simple','sintactico.py',100),
  ('tipo_simple -> FLOAT32','tipo_simple',1,'p_tipo_simple','sintactico.py',101),
  ('tipo_simple -> FLOAT64','tipo_simple',1,'p_tipo_simple','sintactico.py',102),
  ('tipo_simple -> BOOL','tipo_simple',1,'p_tipo_simple','sintactico.py',103),
  ('tipo_simple -> CHAR','tipo_simple',1,'p_tipo_simple','sintactico.py',104),
  ('tipo_simple -> STR','tipo_simple',1,'p_tipo_simple','sintactico.py',105),
  ('importacion -> USE VARIABLE SEMICOLON','importacion',3,'p_importacion','sintactico.py',108),
  ('funcion -> funcion_generica','funcion',1,'p_funcion','sintactico.py',111),
  ('funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque','funcion_generica',8,'p_funcion_generica','sintactico.py',114),
  ('parametros -> parametros COMMA parametro','parametros',3,'p_parametros','sintactico.py',118),
  ('parametros -> parametro','parametros',1,'p_parametros','sintactico.py',119),
  ('parametros -> empty','parametros',1,'p_parametros','sintactico.py',120),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',123),
  ('parametro -> VARIABLE DOUBLE_POINT tipo','parametro',3,'p_parametro','sintactico.py',127),
  ('bloque -> LBRACKET sentencias RBRACKET','bloque',3,'p_bloque','sintactico.py',130),
  ('sentencias -> sentencias sentencia','sentencias',2,'p_sentencias','sintactico.py',133),
  ('sentencias -> sentencia','sentencias',1,'p_sentencias','sintactico.py',134),
  ('sentencia -> expresion SEMICOLON','sentencia',2,'p_sentencia','sintactico.py',137),
  ('sentencia -> declaracion','sentencia',1,'p_sentencia','sintactico.py',138),
  ('sentencia -> asignacion','sentencia',1,'p_sentencia','sintactico.py',139),
  ('asignacion -> VARIABLE EQUAL expresion SEMICOLON','asignacion',4,'p_asignacion','sintactico.py',142),
  ('expresion -> expresion_literal','expresion',1,'p_expresion','sintactico.py',146),
  ('expresion -> expresion_variable','expresion',1,'p_expresion','sintactico.py',147),
  ('expresion -> expresion_funcion','expresion',1,'p_expresion','sintactico.py',148),
  ('expresion -> expresion_estructura','expresion',1,'p_expresion','sintactico.py',149),
  ('expresion_literal -> literal','expresion_literal',1,'p_expresion_literal','sintactico.py',152),
  ('literal -> NUMBER','literal',1,'p_literal','sintactico.py',155),
  ('literal -> STRING','literal',1,'p_literal','sintactico.py',156),
  ('literal -> TRUE','literal',1,'p_literal','sintactico.py',157),
  ('literal -> FALSE','literal',1,'p_literal','sintactico.py',158),
  ('expresion_variable -> VARIABLE','expresion_variable',1,'p_expresion_variable','sintactico.py',161),
  ('expresion_funcion -> VARIABLE LPAREN argumentos RPAREN SEMICOLON','expresion_funcion',5,'p_expresion_funcion','sintactico.py',164),
  ('expresion_estructura -> hashmap','expresion_estructura',1,'p_expresion_estructura','sintactico.py',167),
  ('hashmap -> LDIAMOND hashmap_types RDIAMOND','hashmap',3,'p_hashmap','sintactico.py',170),
  ('hashmap_types -> hashmap_types COMMA hashmap_type','hashmap_types',3,'p_hashmap_types','sintactico.py',173),
  ('hashmap_types -> hashmap_type','hashmap_types',1,'p_hashmap_types','sintactico.py',174),
  ('hashmap_type -> tipo','hashmap_type',1,'p_hashmap_type','sintactico.py',177),
  ('argumentos -> argumentos COMMA argumento','argumentos',3,'p_argumentos','sintactico.py',181),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','sintactico.py',182),
  ('argumentos -> empty','argumentos',1,'p_argumentos','sintactico.py',183),
  ('argumento -> expresion','argumento',1,'p_argumento','sintactico.py',186),
]
