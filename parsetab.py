
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ARROW AS BITAND BITOR BITXOR BOOL BREAK CHAR CLEAR COMMA CONST CONTAINS_KEY CONTINUE DIVIDE DOT DOUBLE_POINT ELSE ENUM EQUAL EQUAL_EQUAL EXCLAMATION FALSE FLOAT32 FLOAT64 FN FOR GET GREATER GREATER_EQUAL IF IMPL INSERT INT16 INT32 INT64 INT8 IS_EMPTY ITER LBRACKET LDIAMOND LEN LESS LESS_EQUAL LET LOOP LPAREN L_BRACKET MAIN MATCH MINUS MOD MUT NOT_EQUAL NUMBER OR PERCENTAGE PLUS POP PRINT PUB PUSH RBRACKET RDIAMOND REF REMOVE RETURN REVERSE RPAREN R_BRACKET SEMICOLON SET STATIC STR STRING STRUCT SWAP TIMES TRAIT TRUE TYPE UINT16 UINT32 UINT64 UINT8 USE VARIABLE VEC WHILEprograma : programa item\n                | itemitem : declaracion\n            | importacion\n            | funcion\n            | errordeclaracion : declaracion_variable\n                     | declaracion_estructura\n                     | declaracion_constante\n                     | declaracion_mutable\n                     | declaracion_array \n                     | declaracion_struct_control\n                     | declaracion_vectordeclaracion_variable : LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON\n                            | LET VARIABLE DOUBLE_POINT tipo SEMICOLON\n                            | LET VARIABLE EQUAL expresion SEMICOLON\n                            | LET VARIABLE SEMICOLONdeclaracion_estructura : STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON\n                              | STRUCT VARIABLE LBRACKET RBRACKET SEMICOLONcampos : campos COMMA campo\n              | campocampo : VARIABLE DOUBLE_POINT tipotipo : tipo_simple tipo_simple : INT8\n                    | INT16\n                    | INT32\n                    | INT64\n                    | UINT8\n                    | UINT16\n                    | UINT32\n                    | UINT64\n                    | FLOAT32\n                    | FLOAT64\n                    | BOOL\n                    | CHAR\n                    | STRimportacion : USE VARIABLE SEMICOLONfuncion : funcion_genericafuncion_generica : FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloqueparametros : parametros COMMA parametro\n                  | parametro\n                  | emptyempty :parametro : VARIABLE DOUBLE_POINT tipobloque : LBRACKET sentencias RBRACKETsentencias : sentencias sentencia\n                  | sentenciasentencia : expresion SEMICOLON\n                 | declaracion\n                 | asignacion\n                 | break\n                 | funciones_vector\n                 | funciones_hashmapasignacion : VARIABLE EQUAL expresion SEMICOLONexpresion : expresion_literal\n                    | expresion_variable\n                    | expresion_funcion\n                    | expresion_estructuraexpresion_literal : literalliteral : NUMBER\n                | STRING\n                | booleanboolean : TRUE\n               | FALSEexpresion_variable : VARIABLEexpresion_funcion : VARIABLE LPAREN argumentos RPAREN SEMICOLONexpresion_estructura : hashmap\n                | array \n                hashmap : LDIAMOND hashmap_types RDIAMONDhashmap_types : hashmap_types COMMA hashmap_type\n                     | hashmap_typehashmap_type : tipoargumentos : argumentos COMMA argumento\n                  | argumento\n                  | emptyargumento : expresion declaracion_array : LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON\n                | LET MUT VARIABLE DOUBLE_POINT array SEMICOLON  array : ARRAY L_BRACKET var_array R_BRACKET  var_array : tipo SEMICOLON NUMBER  array_fill : VARIABLE COMMA array_fill \n                    | VARIABLE  declaracion_struct_control : while\n                                    | if\n                                    | loop while : WHILE expresion_condicion bloque break : BREAK SEMICOLONdeclaracion_constante : CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON\n                             | CONST VARIABLE DOUBLE_POINT tipo SEMICOLON\n                             | CONST VARIABLE EQUAL expresion SEMICOLON\n                             | CONST VARIABLE SEMICOLONdeclaracion_mutable : MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON\n                           | MUT VARIABLE DOUBLE_POINT tipo SEMICOLON\n                           | MUT VARIABLE EQUAL expresion SEMICOLON\n                           | MUT VARIABLE SEMICOLONif : IF condicion bloque\n          | IF condicion bloque ELSE bloquecondicion : expresion_condicion\n                 | expresion_condicion logic_operator expresion_condicionlogic_operator : AND\n                      | ORcomparacion : EQUAL_EQUAL\n                    | NOT_EQUAL\n                    | GREATER\n                    | GREATER_EQUAL\n                    | LESS\n                    | LESS_EQUALexpresion_condicion : boolean\n                             | expresion_variable comparacion expresion_variable\n                             | expresion_variable comparacion expresion_literal\n                             | expresion_literal comparacion expresion_variable\n                             | expresion_literal comparacion expresion_literalloop : LOOP bloquedeclaracion_vector : LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON\n                          | LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON\n                          | LET  MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON\n                          | LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON funciones_vector : VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON\n                         | VARIABLE DOT POP LPAREN RPAREN SEMICOLON\n                         | VARIABLE DOT LEN LPAREN RPAREN SEMICOLON\n                         | VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON\n                         | VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON\n                         | VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON\n                         | VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON\n                         | VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON\n                         | VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON\n                         | VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON\n                         | VARIABLE DOT ITER LPAREN RPAREN SEMICOLON funciones_hashmap : insert\n                          | get\n                          | contains_key insert : VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN SEMICOLON get : VARIABLE DOT GET LPAREN expresion RPAREN SEMICOLON contains_key : VARIABLE DOT CONTAINS_KEY LPAREN expresion RPAREN SEMICOLON'
    
_lr_action_items = {'error':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,49,52,57,60,62,71,134,146,148,154,156,157,159,160,164,190,193,219,223,224,244,248,267,276,278,283,],[6,6,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-83,-84,-85,-1,-113,-37,-17,-91,-95,-86,-96,-45,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-14,-88,-92,-115,-39,-117,-114,-77,-116,]),'USE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,49,52,57,60,62,71,134,146,148,154,156,157,159,160,164,190,193,219,223,224,244,248,267,276,278,283,],[14,14,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-83,-84,-85,-1,-113,-37,-17,-91,-95,-86,-96,-45,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-14,-88,-92,-115,-39,-117,-114,-77,-116,]),'LET':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,82,89,90,91,134,135,136,140,146,148,154,156,157,159,160,164,190,193,200,219,223,224,244,248,250,251,252,257,259,260,267,268,269,270,272,275,276,278,283,284,285,286,],[16,16,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-83,-84,-85,-1,-113,16,-37,-17,-91,-95,-86,-96,16,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,-87,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-54,-14,-88,-92,-115,-39,-119,-120,-121,-125,-127,-128,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'STRUCT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,82,89,90,91,134,135,136,140,146,148,154,156,157,159,160,164,190,193,200,219,223,224,244,248,250,251,252,257,259,260,267,268,269,270,272,275,276,278,283,284,285,286,],[17,17,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-83,-84,-85,-1,-113,17,-37,-17,-91,-95,-86,-96,17,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,-87,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-54,-14,-88,-92,-115,-39,-119,-120,-121,-125,-127,-128,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'CONST':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,82,89,90,91,134,135,136,140,146,148,154,156,157,159,160,164,190,193,200,219,223,224,244,248,250,251,252,257,259,260,267,268,269,270,272,275,276,278,283,284,285,286,],[18,18,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-83,-84,-85,-1,-113,18,-37,-17,-91,-95,-86,-96,18,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,-87,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-54,-14,-88,-92,-115,-39,-119,-120,-121,-125,-127,-128,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'MUT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,82,89,90,91,134,135,136,140,146,148,154,156,157,159,160,164,190,193,200,219,223,224,244,248,250,251,252,257,259,260,267,268,269,270,272,275,276,278,283,284,285,286,],[19,19,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,30,-83,-84,-85,-1,-113,19,-37,-17,-91,-95,-86,-96,19,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,-87,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-54,-14,-88,-92,-115,-39,-119,-120,-121,-125,-127,-128,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'FN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,49,52,57,60,62,71,134,146,148,154,156,157,159,160,164,190,193,219,223,224,244,248,267,276,278,283,],[23,23,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-83,-84,-85,-1,-113,-37,-17,-91,-95,-86,-96,-45,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-14,-88,-92,-115,-39,-117,-114,-77,-116,]),'WHILE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,82,89,90,91,134,135,136,140,146,148,154,156,157,159,160,164,190,193,200,219,223,224,244,248,250,251,252,257,259,260,267,268,269,270,272,275,276,278,283,284,285,286,],[24,24,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-83,-84,-85,-1,-113,24,-37,-17,-91,-95,-86,-96,24,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,-87,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-54,-14,-88,-92,-115,-39,-119,-120,-121,-125,-127,-128,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,82,89,90,91,134,135,136,140,146,148,154,156,157,159,160,164,190,193,200,219,223,224,244,248,250,251,252,257,259,260,267,268,269,270,272,275,276,278,283,284,285,286,],[25,25,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-83,-84,-85,-1,-113,25,-37,-17,-91,-95,-86,-96,25,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,-87,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-54,-14,-88,-92,-115,-39,-119,-120,-121,-125,-127,-128,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'LOOP':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,82,89,90,91,134,135,136,140,146,148,154,156,157,159,160,164,190,193,200,219,223,224,244,248,250,251,252,257,259,260,267,268,269,270,272,275,276,278,283,284,285,286,],[26,26,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-83,-84,-85,-1,-113,26,-37,-17,-91,-95,-86,-96,26,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,-87,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-54,-14,-88,-92,-115,-39,-119,-120,-121,-125,-127,-128,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,49,52,57,60,62,71,134,146,148,154,156,157,159,160,164,190,193,219,223,224,244,248,267,276,278,283,],[0,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-83,-84,-85,-1,-113,-37,-17,-91,-95,-86,-96,-45,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-14,-88,-92,-115,-39,-117,-114,-77,-116,]),'RBRACKET':([7,8,9,10,11,12,13,20,21,22,47,52,54,57,60,62,71,75,76,78,79,80,81,82,89,90,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,119,134,135,136,140,146,148,154,156,157,159,160,164,190,192,193,194,200,219,223,224,244,250,251,252,257,259,260,267,268,269,270,272,275,276,278,283,284,285,286,],[-7,-8,-9,-10,-11,-12,-13,-83,-84,-85,-113,-17,118,-91,-95,-86,-96,134,-47,-49,-50,-51,-52,-53,-129,-130,-131,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,152,-21,-45,-46,-48,-87,-15,-16,-19,-89,-90,-93,-94,-97,-78,-22,-18,-20,-54,-14,-88,-92,-115,-119,-120,-121,-125,-127,-128,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'VARIABLE':([7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,30,47,48,51,52,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,89,90,91,134,135,136,137,139,140,145,146,148,153,154,155,156,157,158,159,160,163,164,190,193,200,201,205,207,209,212,213,215,219,221,223,224,243,244,250,251,252,255,257,258,259,260,261,264,266,267,268,269,270,272,275,276,278,283,284,285,286,],[-7,-8,-9,-10,-11,-12,-13,28,29,31,32,33,-83,-84,-85,34,41,41,53,-113,87,113,-17,116,113,-91,113,-95,124,-86,41,-102,-103,-104,-105,-106,-107,41,-96,41,-100,-101,87,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,113,113,-87,113,-15,-16,116,-19,113,-89,-90,113,-93,-94,124,-97,-78,-18,-54,113,113,113,113,113,113,113,-14,245,-88,-92,113,-115,-119,-120,-121,113,-125,113,-127,-128,113,245,113,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'BREAK':([7,8,9,10,11,12,13,20,21,22,47,48,52,57,60,62,71,75,76,78,79,80,81,82,89,90,91,134,135,136,140,146,148,154,156,157,159,160,164,190,193,200,219,223,224,244,250,251,252,257,259,260,267,268,269,270,272,275,276,278,283,284,285,286,],[-7,-8,-9,-10,-11,-12,-13,-83,-84,-85,-113,88,-17,-91,-95,-86,-96,88,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,-87,-15,-16,-19,-89,-90,-93,-94,-97,-78,-18,-54,-14,-88,-92,-115,-119,-120,-121,-125,-127,-128,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'NUMBER':([7,8,9,10,11,12,13,20,21,22,24,25,47,48,51,52,56,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,89,90,91,134,135,136,137,139,140,145,146,148,154,155,156,157,158,159,160,164,190,193,200,201,205,206,207,209,212,213,215,218,219,223,224,243,244,250,251,252,255,257,258,259,260,261,266,267,268,269,270,272,275,276,278,283,284,285,286,],[-7,-8,-9,-10,-11,-12,-13,-83,-84,-85,43,43,-113,43,43,-17,43,-91,43,-95,-86,43,-102,-103,-104,-105,-106,-107,43,-96,43,-100,-101,43,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,43,43,-87,43,-15,-16,-19,43,-89,-90,43,-93,-94,-97,-78,-18,-54,43,230,232,43,43,43,43,43,242,-14,-88,-92,43,-115,-119,-120,-121,43,-125,43,-127,-128,43,43,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'STRING':([7,8,9,10,11,12,13,20,21,22,24,25,47,48,51,52,56,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,89,90,91,134,135,136,137,139,140,145,146,148,154,155,156,157,158,159,160,164,190,193,200,201,205,207,209,212,213,215,219,223,224,243,244,250,251,252,255,257,258,259,260,261,266,267,268,269,270,272,275,276,278,283,284,285,286,],[-7,-8,-9,-10,-11,-12,-13,-83,-84,-85,44,44,-113,44,44,-17,44,-91,44,-95,-86,44,-102,-103,-104,-105,-106,-107,44,-96,44,-100,-101,44,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,44,44,-87,44,-15,-16,-19,44,-89,-90,44,-93,-94,-97,-78,-18,-54,44,44,44,44,44,44,44,-14,-88,-92,44,-115,-119,-120,-121,44,-125,44,-127,-128,44,44,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'LDIAMOND':([7,8,9,10,11,12,13,20,21,22,47,48,51,52,56,57,59,60,62,71,75,76,78,79,80,81,82,89,90,91,98,134,135,136,137,139,140,145,146,148,150,154,155,156,157,158,159,160,164,190,193,200,201,205,207,209,212,213,215,219,223,224,243,244,250,251,252,255,257,258,259,260,261,266,267,268,269,270,272,275,276,278,283,284,285,286,],[-7,-8,-9,-10,-11,-12,-13,-83,-84,-85,-113,94,94,-17,94,-91,94,-95,-86,-96,94,-47,-49,-50,-51,-52,-53,-129,-130,-131,147,-45,-46,-48,94,94,-87,94,-15,-16,191,-19,94,-89,-90,94,-93,-94,-97,-78,-18,-54,94,94,94,94,94,94,94,-14,-88,-92,94,-115,-119,-120,-121,94,-125,94,-127,-128,94,94,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'ARRAY':([7,8,9,10,11,12,13,20,21,22,47,48,51,52,56,57,59,60,62,71,75,76,78,79,80,81,82,89,90,91,115,134,135,136,137,139,140,145,146,148,154,155,156,157,158,159,160,164,190,193,200,201,205,207,209,212,213,215,219,223,224,243,244,250,251,252,255,257,258,259,260,261,266,267,268,269,270,272,275,276,278,283,284,285,286,],[-7,-8,-9,-10,-11,-12,-13,-83,-84,-85,-113,96,96,-17,96,-91,96,-95,-86,-96,96,-47,-49,-50,-51,-52,-53,-129,-130,-131,96,-45,-46,-48,96,96,-87,96,-15,-16,-19,96,-89,-90,96,-93,-94,-97,-78,-18,-54,96,96,96,96,96,96,96,-14,-88,-92,96,-115,-119,-120,-121,96,-125,96,-127,-128,96,96,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'TRUE':([7,8,9,10,11,12,13,20,21,22,24,25,47,48,51,52,56,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,89,90,91,134,135,136,137,139,140,145,146,148,154,155,156,157,158,159,160,164,190,193,200,201,205,207,209,212,213,215,219,223,224,243,244,250,251,252,255,257,258,259,260,261,266,267,268,269,270,272,275,276,278,283,284,285,286,],[-7,-8,-9,-10,-11,-12,-13,-83,-84,-85,39,39,-113,39,39,-17,39,-91,39,-95,-86,39,-102,-103,-104,-105,-106,-107,39,-96,39,-100,-101,39,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,39,39,-87,39,-15,-16,-19,39,-89,-90,39,-93,-94,-97,-78,-18,-54,39,39,39,39,39,39,39,-14,-88,-92,39,-115,-119,-120,-121,39,-125,39,-127,-128,39,39,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'FALSE':([7,8,9,10,11,12,13,20,21,22,24,25,47,48,51,52,56,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,89,90,91,134,135,136,137,139,140,145,146,148,154,155,156,157,158,159,160,164,190,193,200,201,205,207,209,212,213,215,219,223,224,243,244,250,251,252,255,257,258,259,260,261,266,267,268,269,270,272,275,276,278,283,284,285,286,],[-7,-8,-9,-10,-11,-12,-13,-83,-84,-85,40,40,-113,40,40,-17,40,-91,40,-95,-86,40,-102,-103,-104,-105,-106,-107,40,-96,40,-100,-101,40,-47,-49,-50,-51,-52,-53,-129,-130,-131,-45,-46,-48,40,40,-87,40,-15,-16,-19,40,-89,-90,40,-93,-94,-97,-78,-18,-54,40,40,40,40,40,40,40,-14,-88,-92,40,-115,-119,-120,-121,40,-125,40,-127,-128,40,40,-117,-118,-122,-133,-124,-134,-114,-77,-116,-123,-126,-132,]),'LBRACKET':([26,31,35,36,39,40,41,42,43,44,45,46,95,100,101,102,103,104,105,106,107,108,109,110,111,112,128,129,130,131,132,133,225,],[48,54,48,-108,-63,-64,-65,-59,-60,-61,48,-98,-62,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-109,-110,-112,-111,48,-99,48,]),'SEMICOLON':([28,29,32,33,39,40,42,43,44,77,83,84,85,86,87,88,92,93,95,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,118,120,121,122,123,149,152,165,183,186,187,195,196,214,217,220,227,228,229,234,236,237,240,247,249,253,254,256,262,263,265,279,280,281,282,],[49,52,57,60,-63,-64,-59,-60,-61,136,-55,-56,-57,-58,-65,140,-67,-68,-62,146,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-65,148,154,156,157,159,160,190,193,200,-69,218,219,223,224,240,-79,244,250,251,252,257,259,260,-66,267,268,269,270,272,275,276,278,283,284,285,286,]),'DOUBLE_POINT':([29,32,33,53,116,124,],[50,55,58,115,151,161,]),'EQUAL':([29,32,33,87,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,120,122,149,217,220,247,],[51,56,59,137,145,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,155,158,189,-79,243,266,]),'LPAREN':([34,87,113,166,167,168,169,170,171,172,173,174,175,176,177,178,],[61,139,139,201,202,203,204,205,206,207,208,209,210,211,212,213,]),'AND':([36,39,40,41,42,43,44,46,95,128,129,130,131,],[-108,-63,-64,-65,-59,-60,-61,73,-62,-109,-110,-112,-111,]),'OR':([36,39,40,41,42,43,44,46,95,128,129,130,131,],[-108,-63,-64,-65,-59,-60,-61,74,-62,-109,-110,-112,-111,]),'EQUAL_EQUAL':([36,37,38,39,40,41,42,43,44,],[-62,64,64,-63,-64,-65,-59,-60,-61,]),'NOT_EQUAL':([36,37,38,39,40,41,42,43,44,],[-62,65,65,-63,-64,-65,-59,-60,-61,]),'GREATER':([36,37,38,39,40,41,42,43,44,],[-62,66,66,-63,-64,-65,-59,-60,-61,]),'GREATER_EQUAL':([36,37,38,39,40,41,42,43,44,],[-62,67,67,-63,-64,-65,-59,-60,-61,]),'LESS':([36,37,38,39,40,41,42,43,44,],[-62,68,68,-63,-64,-65,-59,-60,-61,]),'LESS_EQUAL':([36,37,38,39,40,41,42,43,44,],[-62,69,69,-63,-64,-65,-59,-60,-61,]),'RPAREN':([39,40,42,43,44,61,83,84,85,86,92,93,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,125,126,127,139,179,180,181,182,183,197,199,202,203,204,208,210,211,217,226,230,231,233,239,240,241,271,273,274,],[-63,-64,-59,-60,-61,-43,-55,-56,-57,-58,-67,-68,-62,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-65,162,-41,-42,-43,214,-74,-75,-76,-69,-44,-40,227,228,229,234,236,237,-79,249,253,254,256,262,-66,-73,280,281,282,]),'COMMA':([39,40,42,43,44,61,83,84,85,86,92,93,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,125,126,127,139,141,142,143,179,180,181,182,183,192,194,197,199,216,217,232,235,238,240,241,245,],[-63,-64,-59,-60,-61,-43,-55,-56,-57,-58,-67,-68,-62,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-65,153,-21,163,-41,-42,-43,184,-71,-72,215,-74,-75,-76,-69,-22,-20,-44,-40,-70,-79,255,258,261,-66,-73,264,]),'VEC':([50,115,],[98,150,]),'INT8':([50,55,58,94,144,147,151,161,184,191,198,],[100,100,100,100,100,100,100,100,100,100,100,]),'INT16':([50,55,58,94,144,147,151,161,184,191,198,],[101,101,101,101,101,101,101,101,101,101,101,]),'INT32':([50,55,58,94,144,147,151,161,184,191,198,],[102,102,102,102,102,102,102,102,102,102,102,]),'INT64':([50,55,58,94,144,147,151,161,184,191,198,],[103,103,103,103,103,103,103,103,103,103,103,]),'UINT8':([50,55,58,94,144,147,151,161,184,191,198,],[104,104,104,104,104,104,104,104,104,104,104,]),'UINT16':([50,55,58,94,144,147,151,161,184,191,198,],[105,105,105,105,105,105,105,105,105,105,105,]),'UINT32':([50,55,58,94,144,147,151,161,184,191,198,],[106,106,106,106,106,106,106,106,106,106,106,]),'UINT64':([50,55,58,94,144,147,151,161,184,191,198,],[107,107,107,107,107,107,107,107,107,107,107,]),'FLOAT32':([50,55,58,94,144,147,151,161,184,191,198,],[108,108,108,108,108,108,108,108,108,108,108,]),'FLOAT64':([50,55,58,94,144,147,151,161,184,191,198,],[109,109,109,109,109,109,109,109,109,109,109,]),'BOOL':([50,55,58,94,144,147,151,161,184,191,198,],[110,110,110,110,110,110,110,110,110,110,110,]),'CHAR':([50,55,58,94,144,147,151,161,184,191,198,],[111,111,111,111,111,111,111,111,111,111,111,]),'STR':([50,55,58,94,144,147,151,161,184,191,198,],[112,112,112,112,112,112,112,112,112,112,112,]),'ELSE':([71,134,],[132,-45,]),'DOT':([87,],[138,]),'L_BRACKET':([96,189,],[144,221,]),'RDIAMOND':([99,100,101,102,103,104,105,106,107,108,109,110,111,112,141,142,143,188,216,222,],[-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,183,-71,-72,220,-70,247,]),'PUSH':([138,],[166,]),'POP':([138,],[167,]),'LEN':([138,],[168,]),'IS_EMPTY':([138,],[169,]),'GET':([138,],[170,]),'SET':([138,],[171,]),'REMOVE':([138,],[172,]),'CLEAR':([138,],[173,]),'SWAP':([138,],[174,]),'REVERSE':([138,],[175,]),'ITER':([138,],[176,]),'INSERT':([138,],[177,]),'CONTAINS_KEY':([138,],[178,]),'ARROW':([162,],[198,]),'R_BRACKET':([185,242,245,246,277,],[217,-80,-82,265,-81,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'item':([0,1,],[2,27,]),'declaracion':([0,1,48,75,],[3,3,78,78,]),'importacion':([0,1,],[4,4,]),'funcion':([0,1,],[5,5,]),'declaracion_variable':([0,1,48,75,],[7,7,7,7,]),'declaracion_estructura':([0,1,48,75,],[8,8,8,8,]),'declaracion_constante':([0,1,48,75,],[9,9,9,9,]),'declaracion_mutable':([0,1,48,75,],[10,10,10,10,]),'declaracion_array':([0,1,48,75,],[11,11,11,11,]),'declaracion_struct_control':([0,1,48,75,],[12,12,12,12,]),'declaracion_vector':([0,1,48,75,],[13,13,13,13,]),'funcion_generica':([0,1,],[15,15,]),'while':([0,1,48,75,],[20,20,20,20,]),'if':([0,1,48,75,],[21,21,21,21,]),'loop':([0,1,48,75,],[22,22,22,22,]),'expresion_condicion':([24,25,72,],[35,46,133,]),'boolean':([24,25,48,51,56,59,63,70,72,75,137,139,145,155,158,201,205,207,209,212,213,215,243,255,258,261,266,],[36,36,95,95,95,95,95,95,36,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'expresion_variable':([24,25,48,51,56,59,63,70,72,75,137,139,145,155,158,201,205,207,209,212,213,215,243,255,258,261,266,],[37,37,84,84,84,84,128,131,37,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'expresion_literal':([24,25,48,51,56,59,63,70,72,75,137,139,145,155,158,201,205,207,209,212,213,215,243,255,258,261,266,],[38,38,83,83,83,83,129,130,38,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'literal':([24,25,48,51,56,59,63,70,72,75,137,139,145,155,158,201,205,207,209,212,213,215,243,255,258,261,266,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'condicion':([25,],[45,]),'bloque':([26,35,45,132,225,],[47,62,71,164,248,]),'comparacion':([37,38,],[63,70,]),'logic_operator':([46,],[72,]),'sentencias':([48,],[75,]),'sentencia':([48,75,],[76,135,]),'expresion':([48,51,56,59,75,137,139,145,155,158,201,205,207,209,212,213,215,243,255,258,261,266,],[77,114,121,123,77,165,182,187,195,196,226,231,233,235,238,239,182,263,271,273,274,279,]),'asignacion':([48,75,],[79,79,]),'break':([48,75,],[80,80,]),'funciones_vector':([48,75,],[81,81,]),'funciones_hashmap':([48,75,],[82,82,]),'expresion_funcion':([48,51,56,59,75,137,139,145,155,158,201,205,207,209,212,213,215,243,255,258,261,266,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'expresion_estructura':([48,51,56,59,75,137,139,145,155,158,201,205,207,209,212,213,215,243,255,258,261,266,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'insert':([48,75,],[89,89,]),'get':([48,75,],[90,90,]),'contains_key':([48,75,],[91,91,]),'hashmap':([48,51,56,59,75,137,139,145,155,158,201,205,207,209,212,213,215,243,255,258,261,266,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'array':([48,51,56,59,75,115,137,139,145,155,158,201,205,207,209,212,213,215,243,255,258,261,266,],[93,93,93,93,93,149,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'tipo':([50,55,58,94,144,147,151,161,184,191,],[97,120,122,143,186,188,192,197,143,222,]),'tipo_simple':([50,55,58,94,144,147,151,161,184,191,198,],[99,99,99,99,99,99,99,99,99,99,225,]),'campos':([54,],[117,]),'campo':([54,153,],[119,194,]),'parametros':([61,],[125,]),'parametro':([61,163,],[126,199,]),'empty':([61,139,],[127,181,]),'hashmap_types':([94,],[141,]),'hashmap_type':([94,184,],[142,216,]),'argumentos':([139,],[179,]),'argumento':([139,215,],[180,241,]),'var_array':([144,],[185,]),'array_fill':([221,264,],[246,277,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> programa item','programa',2,'p_programa','sintactico.py',6),
  ('programa -> item','programa',1,'p_programa','sintactico.py',7),
  ('item -> declaracion','item',1,'p_item','sintactico.py',10),
  ('item -> importacion','item',1,'p_item','sintactico.py',11),
  ('item -> funcion','item',1,'p_item','sintactico.py',12),
  ('item -> error','item',1,'p_item','sintactico.py',13),
  ('declaracion -> declaracion_variable','declaracion',1,'p_declaracion','sintactico.py',16),
  ('declaracion -> declaracion_estructura','declaracion',1,'p_declaracion','sintactico.py',17),
  ('declaracion -> declaracion_constante','declaracion',1,'p_declaracion','sintactico.py',18),
  ('declaracion -> declaracion_mutable','declaracion',1,'p_declaracion','sintactico.py',19),
  ('declaracion -> declaracion_array','declaracion',1,'p_declaracion','sintactico.py',20),
  ('declaracion -> declaracion_struct_control','declaracion',1,'p_declaracion','sintactico.py',21),
  ('declaracion -> declaracion_vector','declaracion',1,'p_declaracion','sintactico.py',22),
  ('declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON','declaracion_variable',7,'p_declaracion_variable','sintactico.py',25),
  ('declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON','declaracion_variable',5,'p_declaracion_variable','sintactico.py',26),
  ('declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON','declaracion_variable',5,'p_declaracion_variable','sintactico.py',27),
  ('declaracion_variable -> LET VARIABLE SEMICOLON','declaracion_variable',3,'p_declaracion_variable','sintactico.py',28),
  ('declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON','declaracion_estructura',6,'p_declaracion_estructura','sintactico.py',32),
  ('declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON','declaracion_estructura',5,'p_declaracion_estructura','sintactico.py',33),
  ('campos -> campos COMMA campo','campos',3,'p_campos','sintactico.py',38),
  ('campos -> campo','campos',1,'p_campos','sintactico.py',39),
  ('campo -> VARIABLE DOUBLE_POINT tipo','campo',3,'p_campo','sintactico.py',42),
  ('tipo -> tipo_simple','tipo',1,'p_tipo','sintactico.py',45),
  ('tipo_simple -> INT8','tipo_simple',1,'p_tipo_simple','sintactico.py',48),
  ('tipo_simple -> INT16','tipo_simple',1,'p_tipo_simple','sintactico.py',49),
  ('tipo_simple -> INT32','tipo_simple',1,'p_tipo_simple','sintactico.py',50),
  ('tipo_simple -> INT64','tipo_simple',1,'p_tipo_simple','sintactico.py',51),
  ('tipo_simple -> UINT8','tipo_simple',1,'p_tipo_simple','sintactico.py',52),
  ('tipo_simple -> UINT16','tipo_simple',1,'p_tipo_simple','sintactico.py',53),
  ('tipo_simple -> UINT32','tipo_simple',1,'p_tipo_simple','sintactico.py',54),
  ('tipo_simple -> UINT64','tipo_simple',1,'p_tipo_simple','sintactico.py',55),
  ('tipo_simple -> FLOAT32','tipo_simple',1,'p_tipo_simple','sintactico.py',56),
  ('tipo_simple -> FLOAT64','tipo_simple',1,'p_tipo_simple','sintactico.py',57),
  ('tipo_simple -> BOOL','tipo_simple',1,'p_tipo_simple','sintactico.py',58),
  ('tipo_simple -> CHAR','tipo_simple',1,'p_tipo_simple','sintactico.py',59),
  ('tipo_simple -> STR','tipo_simple',1,'p_tipo_simple','sintactico.py',60),
  ('importacion -> USE VARIABLE SEMICOLON','importacion',3,'p_importacion','sintactico.py',63),
  ('funcion -> funcion_generica','funcion',1,'p_funcion','sintactico.py',66),
  ('funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque','funcion_generica',8,'p_funcion_generica','sintactico.py',69),
  ('parametros -> parametros COMMA parametro','parametros',3,'p_parametros','sintactico.py',73),
  ('parametros -> parametro','parametros',1,'p_parametros','sintactico.py',74),
  ('parametros -> empty','parametros',1,'p_parametros','sintactico.py',75),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',78),
  ('parametro -> VARIABLE DOUBLE_POINT tipo','parametro',3,'p_parametro','sintactico.py',82),
  ('bloque -> LBRACKET sentencias RBRACKET','bloque',3,'p_bloque','sintactico.py',85),
  ('sentencias -> sentencias sentencia','sentencias',2,'p_sentencias','sintactico.py',88),
  ('sentencias -> sentencia','sentencias',1,'p_sentencias','sintactico.py',89),
  ('sentencia -> expresion SEMICOLON','sentencia',2,'p_sentencia','sintactico.py',92),
  ('sentencia -> declaracion','sentencia',1,'p_sentencia','sintactico.py',93),
  ('sentencia -> asignacion','sentencia',1,'p_sentencia','sintactico.py',94),
  ('sentencia -> break','sentencia',1,'p_sentencia','sintactico.py',95),
  ('sentencia -> funciones_vector','sentencia',1,'p_sentencia','sintactico.py',96),
  ('sentencia -> funciones_hashmap','sentencia',1,'p_sentencia','sintactico.py',97),
  ('asignacion -> VARIABLE EQUAL expresion SEMICOLON','asignacion',4,'p_asignacion','sintactico.py',102),
  ('expresion -> expresion_literal','expresion',1,'p_expresion','sintactico.py',106),
  ('expresion -> expresion_variable','expresion',1,'p_expresion','sintactico.py',107),
  ('expresion -> expresion_funcion','expresion',1,'p_expresion','sintactico.py',108),
  ('expresion -> expresion_estructura','expresion',1,'p_expresion','sintactico.py',109),
  ('expresion_literal -> literal','expresion_literal',1,'p_expresion_literal','sintactico.py',112),
  ('literal -> NUMBER','literal',1,'p_literal','sintactico.py',115),
  ('literal -> STRING','literal',1,'p_literal','sintactico.py',116),
  ('literal -> boolean','literal',1,'p_literal','sintactico.py',117),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',120),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',121),
  ('expresion_variable -> VARIABLE','expresion_variable',1,'p_expresion_variable','sintactico.py',124),
  ('expresion_funcion -> VARIABLE LPAREN argumentos RPAREN SEMICOLON','expresion_funcion',5,'p_expresion_funcion','sintactico.py',127),
  ('expresion_estructura -> hashmap','expresion_estructura',1,'p_expresion_estructura','sintactico.py',130),
  ('expresion_estructura -> array','expresion_estructura',1,'p_expresion_estructura','sintactico.py',131),
  ('hashmap -> LDIAMOND hashmap_types RDIAMOND','hashmap',3,'p_hashmap','sintactico.py',136),
  ('hashmap_types -> hashmap_types COMMA hashmap_type','hashmap_types',3,'p_hashmap_types','sintactico.py',139),
  ('hashmap_types -> hashmap_type','hashmap_types',1,'p_hashmap_types','sintactico.py',140),
  ('hashmap_type -> tipo','hashmap_type',1,'p_hashmap_type','sintactico.py',143),
  ('argumentos -> argumentos COMMA argumento','argumentos',3,'p_argumentos','sintactico.py',147),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','sintactico.py',148),
  ('argumentos -> empty','argumentos',1,'p_argumentos','sintactico.py',149),
  ('argumento -> expresion','argumento',1,'p_argumento','sintactico.py',152),
  ('declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON','declaracion_array',10,'p_declaracion_array','sintactico.py',156),
  ('declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON','declaracion_array',6,'p_declaracion_array','sintactico.py',157),
  ('array -> ARRAY L_BRACKET var_array R_BRACKET','array',4,'p_array','sintactico.py',159),
  ('var_array -> tipo SEMICOLON NUMBER','var_array',3,'p_var_array','sintactico.py',162),
  ('array_fill -> VARIABLE COMMA array_fill','array_fill',3,'p_array_fill','sintactico.py',165),
  ('array_fill -> VARIABLE','array_fill',1,'p_array_fill','sintactico.py',166),
  ('declaracion_struct_control -> while','declaracion_struct_control',1,'p_declaracion_struct_control','sintactico.py',168),
  ('declaracion_struct_control -> if','declaracion_struct_control',1,'p_declaracion_struct_control','sintactico.py',169),
  ('declaracion_struct_control -> loop','declaracion_struct_control',1,'p_declaracion_struct_control','sintactico.py',170),
  ('while -> WHILE expresion_condicion bloque','while',3,'p_while','sintactico.py',172),
  ('break -> BREAK SEMICOLON','break',2,'p_break','sintactico.py',179),
  ('declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON','declaracion_constante',7,'p_declaracion_constante','sintactico.py',181),
  ('declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON','declaracion_constante',5,'p_declaracion_constante','sintactico.py',182),
  ('declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON','declaracion_constante',5,'p_declaracion_constante','sintactico.py',183),
  ('declaracion_constante -> CONST VARIABLE SEMICOLON','declaracion_constante',3,'p_declaracion_constante','sintactico.py',184),
  ('declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON','declaracion_mutable',7,'p_declaracion_mutable','sintactico.py',187),
  ('declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON','declaracion_mutable',5,'p_declaracion_mutable','sintactico.py',188),
  ('declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON','declaracion_mutable',5,'p_declaracion_mutable','sintactico.py',189),
  ('declaracion_mutable -> MUT VARIABLE SEMICOLON','declaracion_mutable',3,'p_declaracion_mutable','sintactico.py',190),
  ('if -> IF condicion bloque','if',3,'p_if','sintactico.py',194),
  ('if -> IF condicion bloque ELSE bloque','if',5,'p_if','sintactico.py',195),
  ('condicion -> expresion_condicion','condicion',1,'p_condicion','sintactico.py',198),
  ('condicion -> expresion_condicion logic_operator expresion_condicion','condicion',3,'p_condicion','sintactico.py',199),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','sintactico.py',202),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','sintactico.py',203),
  ('comparacion -> EQUAL_EQUAL','comparacion',1,'p_comparacion','sintactico.py',206),
  ('comparacion -> NOT_EQUAL','comparacion',1,'p_comparacion','sintactico.py',207),
  ('comparacion -> GREATER','comparacion',1,'p_comparacion','sintactico.py',208),
  ('comparacion -> GREATER_EQUAL','comparacion',1,'p_comparacion','sintactico.py',209),
  ('comparacion -> LESS','comparacion',1,'p_comparacion','sintactico.py',210),
  ('comparacion -> LESS_EQUAL','comparacion',1,'p_comparacion','sintactico.py',211),
  ('expresion_condicion -> boolean','expresion_condicion',1,'p_expresion_condicion','sintactico.py',215),
  ('expresion_condicion -> expresion_variable comparacion expresion_variable','expresion_condicion',3,'p_expresion_condicion','sintactico.py',216),
  ('expresion_condicion -> expresion_variable comparacion expresion_literal','expresion_condicion',3,'p_expresion_condicion','sintactico.py',217),
  ('expresion_condicion -> expresion_literal comparacion expresion_variable','expresion_condicion',3,'p_expresion_condicion','sintactico.py',218),
  ('expresion_condicion -> expresion_literal comparacion expresion_literal','expresion_condicion',3,'p_expresion_condicion','sintactico.py',219),
  ('loop -> LOOP bloque','loop',2,'p_loop','sintactico.py',225),
  ('declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON','declaracion_vector',10,'p_declaracion_vector','sintactico.py',229),
  ('declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON','declaracion_vector',8,'p_declaracion_vector','sintactico.py',230),
  ('declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON','declaracion_vector',11,'p_declaracion_vector','sintactico.py',231),
  ('declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON','declaracion_vector',9,'p_declaracion_vector','sintactico.py',232),
  ('funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON','funciones_vector',7,'p_funciones_vector','sintactico.py',235),
  ('funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',236),
  ('funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',237),
  ('funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',238),
  ('funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON','funciones_vector',7,'p_funciones_vector','sintactico.py',239),
  ('funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON','funciones_vector',9,'p_funciones_vector','sintactico.py',240),
  ('funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON','funciones_vector',7,'p_funciones_vector','sintactico.py',241),
  ('funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',242),
  ('funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON','funciones_vector',9,'p_funciones_vector','sintactico.py',243),
  ('funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',244),
  ('funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',245),
  ('funciones_hashmap -> insert','funciones_hashmap',1,'p_funciones_hashmap','sintactico.py',248),
  ('funciones_hashmap -> get','funciones_hashmap',1,'p_funciones_hashmap','sintactico.py',249),
  ('funciones_hashmap -> contains_key','funciones_hashmap',1,'p_funciones_hashmap','sintactico.py',250),
  ('insert -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN SEMICOLON','insert',9,'p_insert','sintactico.py',253),
  ('get -> VARIABLE DOT GET LPAREN expresion RPAREN SEMICOLON','get',7,'p_get','sintactico.py',257),
  ('contains_key -> VARIABLE DOT CONTAINS_KEY LPAREN expresion RPAREN SEMICOLON','contains_key',7,'p_contains_key','sintactico.py',260),
]
