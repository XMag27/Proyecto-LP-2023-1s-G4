
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ARROW AS BITAND BITOR BITXOR BOOL BREAK CHAR CLEAR COMMA CONST CONTINUE DIVIDE DOT DOUBLE_POINT ELSE ENUM EQUAL EQUAL_EQUAL EXCLAMATION FALSE FLOAT32 FLOAT64 FN FOR GET GREATER GREATER_EQUAL IF IMPL INT16 INT32 INT64 INT8 IS_EMPTY ITER LBRACKET LDIAMOND LEN LESS LESS_EQUAL LET LOOP LPAREN L_BRACKET MAIN MATCH MINUS MOD MUT NOT_EQUAL NUMBER OR PERCENTAGE PLUS POINT POP PRINT PUB PUSH RBRACKET RDIAMOND REF REMOVE RETURN REVERSE RPAREN R_BRACKET SEMICOLON SET STATIC STR STRING STRUCT SWAP TIMES TRAIT TRUE TYPE UINT16 UINT32 UINT64 UINT8 USE VARIABLE VEC WHILEprograma : programa item\n                | itemitem : declaracion\n            | importacion\n            | funcion\n            | errordeclaracion : declaracion_variable\n                     | declaracion_estructura\n                     | declaracion_constante\n                     | declaracion_mutable\n                     | declaracion_array \n                     | declaracion_struct_control\n                     | declaracion_vectordeclaracion_variable : LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON\n                            | LET VARIABLE DOUBLE_POINT tipo SEMICOLON\n                            | LET VARIABLE EQUAL expresion SEMICOLON\n                            | LET VARIABLE SEMICOLONdeclaracion_estructura : STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON\n                              | STRUCT VARIABLE LBRACKET RBRACKET SEMICOLONcampos : campos COMMA campo\n              | campocampo : VARIABLE DOUBLE_POINT tipotipo : tipo_simple tipo_simple : INT8\n                    | INT16\n                    | INT32\n                    | INT64\n                    | UINT8\n                    | UINT16\n                    | UINT32\n                    | UINT64\n                    | FLOAT32\n                    | FLOAT64\n                    | BOOL\n                    | CHAR\n                    | STRimportacion : USE VARIABLE SEMICOLONfuncion : funcion_genericafuncion_generica : FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloqueparametros : parametros COMMA parametro\n                  | parametro\n                  | emptyempty :parametro : VARIABLE DOUBLE_POINT tipobloque : LBRACKET sentencias RBRACKETsentencias : sentencias sentencia\n                  | sentenciasentencia : expresion SEMICOLON\n                 | declaracion\n                 | asignacion\n                 | break\n                 | funciones_vectorasignacion : VARIABLE EQUAL expresion SEMICOLONexpresion : expresion_literal\n                    | expresion_variable\n                    | expresion_funcion\n                    | expresion_estructuraexpresion_literal : literalliteral : NUMBER\n                | STRING\n                | booleanboolean : TRUE\n               | FALSEexpresion_variable : VARIABLEexpresion_funcion : VARIABLE LPAREN argumentos RPAREN SEMICOLONexpresion_estructura : hashmap\n                | array \n                hashmap : LDIAMOND hashmap_types RDIAMONDhashmap_types : hashmap_types COMMA hashmap_type\n                     | hashmap_typehashmap_type : tipoargumentos : argumentos COMMA argumento\n                  | argumento\n                  | emptyargumento : expresion declaracion_array : LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON\n                | LET MUT VARIABLE DOUBLE_POINT array SEMICOLON  array : ARRAY L_BRACKET var_array R_BRACKET  var_array : tipo SEMICOLON NUMBER  array_fill : VARIABLE COMMA array_fill \n                    | VARIABLE  declaracion_struct_control : while\n                                    | if\n                                    | loop while : WHILE expresion_condicion bloque break : BREAK SEMICOLONdeclaracion_constante : CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON\n                             | CONST VARIABLE DOUBLE_POINT tipo SEMICOLON\n                             | CONST VARIABLE EQUAL expresion SEMICOLON\n                             | CONST VARIABLE SEMICOLONdeclaracion_mutable : MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON\n                           | MUT VARIABLE DOUBLE_POINT tipo SEMICOLON\n                           | MUT VARIABLE EQUAL expresion SEMICOLON\n                           | MUT VARIABLE SEMICOLONif : IF condicion bloque\n          | IF condicion bloque ELSE bloquecondicion : expresion_condicion\n                 | expresion_condicion logic_operator expresion_condicionlogic_operator : AND\n                      | ORcomparacion : EQUAL_EQUAL\n                    | NOT_EQUAL\n                    | GREATER\n                    | GREATER_EQUAL\n                    | LESS\n                    | LESS_EQUALexpresion_condicion : boolean\n                             | expresion_variable comparacion expresion_variable\n                             | expresion_variable comparacion expresion_literal\n                             | expresion_literal comparacion expresion_variable\n                             | expresion_literal comparacion expresion_literalloop : LOOP bloquedeclaracion_vector : LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON\n                          | LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON\n                          | LET  MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON\n                          | LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON funciones_vector : VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON\n                         | VARIABLE DOT POP LPAREN RPAREN SEMICOLON\n                         | VARIABLE DOT LEN LPAREN RPAREN SEMICOLON\n                         | VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON\n                         | VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON\n                         | VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON\n                         | VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON\n                         | VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON\n                         | VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON\n                         | VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON\n                         | VARIABLE DOT ITER LPAREN RPAREN SEMICOLON'
    
_lr_action_items = {'error':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,49,52,57,60,62,71,130,142,144,150,152,153,155,156,160,184,187,211,215,216,233,237,253,259,261,265,],[6,6,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-82,-83,-84,-1,-112,-37,-17,-90,-94,-85,-95,-45,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-14,-87,-91,-114,-39,-116,-113,-76,-115,]),'USE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,49,52,57,60,62,71,130,142,144,150,152,153,155,156,160,184,187,211,215,216,233,237,253,259,261,265,],[14,14,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-82,-83,-84,-1,-112,-37,-17,-90,-94,-85,-95,-45,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-14,-87,-91,-114,-39,-116,-113,-76,-115,]),'LET':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,130,131,132,136,142,144,150,152,153,155,156,160,184,187,194,211,215,216,233,237,239,240,241,245,247,248,253,254,255,257,259,261,265,266,267,],[16,16,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-82,-83,-84,-1,-112,16,-37,-17,-90,-94,-85,-95,16,-47,-49,-50,-51,-52,-45,-46,-48,-86,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-53,-14,-87,-91,-114,-39,-118,-119,-120,-124,-126,-127,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'STRUCT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,130,131,132,136,142,144,150,152,153,155,156,160,184,187,194,211,215,216,233,237,239,240,241,245,247,248,253,254,255,257,259,261,265,266,267,],[17,17,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-82,-83,-84,-1,-112,17,-37,-17,-90,-94,-85,-95,17,-47,-49,-50,-51,-52,-45,-46,-48,-86,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-53,-14,-87,-91,-114,-39,-118,-119,-120,-124,-126,-127,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'CONST':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,130,131,132,136,142,144,150,152,153,155,156,160,184,187,194,211,215,216,233,237,239,240,241,245,247,248,253,254,255,257,259,261,265,266,267,],[18,18,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-82,-83,-84,-1,-112,18,-37,-17,-90,-94,-85,-95,18,-47,-49,-50,-51,-52,-45,-46,-48,-86,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-53,-14,-87,-91,-114,-39,-118,-119,-120,-124,-126,-127,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'MUT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,130,131,132,136,142,144,150,152,153,155,156,160,184,187,194,211,215,216,233,237,239,240,241,245,247,248,253,254,255,257,259,261,265,266,267,],[19,19,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,30,-82,-83,-84,-1,-112,19,-37,-17,-90,-94,-85,-95,19,-47,-49,-50,-51,-52,-45,-46,-48,-86,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-53,-14,-87,-91,-114,-39,-118,-119,-120,-124,-126,-127,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'FN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,49,52,57,60,62,71,130,142,144,150,152,153,155,156,160,184,187,211,215,216,233,237,253,259,261,265,],[23,23,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-82,-83,-84,-1,-112,-37,-17,-90,-94,-85,-95,-45,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-14,-87,-91,-114,-39,-116,-113,-76,-115,]),'WHILE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,130,131,132,136,142,144,150,152,153,155,156,160,184,187,194,211,215,216,233,237,239,240,241,245,247,248,253,254,255,257,259,261,265,266,267,],[24,24,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-82,-83,-84,-1,-112,24,-37,-17,-90,-94,-85,-95,24,-47,-49,-50,-51,-52,-45,-46,-48,-86,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-53,-14,-87,-91,-114,-39,-118,-119,-120,-124,-126,-127,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,130,131,132,136,142,144,150,152,153,155,156,160,184,187,194,211,215,216,233,237,239,240,241,245,247,248,253,254,255,257,259,261,265,266,267,],[25,25,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-82,-83,-84,-1,-112,25,-37,-17,-90,-94,-85,-95,25,-47,-49,-50,-51,-52,-45,-46,-48,-86,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-53,-14,-87,-91,-114,-39,-118,-119,-120,-124,-126,-127,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'LOOP':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,48,49,52,57,60,62,71,75,76,78,79,80,81,130,131,132,136,142,144,150,152,153,155,156,160,184,187,194,211,215,216,233,237,239,240,241,245,247,248,253,254,255,257,259,261,265,266,267,],[26,26,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-82,-83,-84,-1,-112,26,-37,-17,-90,-94,-85,-95,26,-47,-49,-50,-51,-52,-45,-46,-48,-86,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-53,-14,-87,-91,-114,-39,-118,-119,-120,-124,-126,-127,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,22,27,47,49,52,57,60,62,71,130,142,144,150,152,153,155,156,160,184,187,211,215,216,233,237,253,259,261,265,],[0,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-38,-82,-83,-84,-1,-112,-37,-17,-90,-94,-85,-95,-45,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-14,-87,-91,-114,-39,-116,-113,-76,-115,]),'RBRACKET':([7,8,9,10,11,12,13,20,21,22,47,52,54,57,60,62,71,75,76,78,79,80,81,95,96,97,98,99,100,101,102,103,104,105,106,107,108,113,115,130,131,132,136,142,144,150,152,153,155,156,160,184,186,187,188,194,211,215,216,233,239,240,241,245,247,248,253,254,255,257,259,261,265,266,267,],[-7,-8,-9,-10,-11,-12,-13,-82,-83,-84,-112,-17,114,-90,-94,-85,-95,130,-47,-49,-50,-51,-52,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,148,-21,-45,-46,-48,-86,-15,-16,-19,-88,-89,-92,-93,-96,-77,-22,-18,-20,-53,-14,-87,-91,-114,-118,-119,-120,-124,-126,-127,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'VARIABLE':([7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,30,47,48,51,52,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,130,131,132,133,135,136,141,142,144,149,150,151,152,153,154,155,156,159,160,184,187,194,195,201,203,207,211,213,215,216,232,233,239,240,241,243,245,246,247,248,250,252,253,254,255,257,259,261,265,266,267,],[-7,-8,-9,-10,-11,-12,-13,28,29,31,32,33,-82,-83,-84,34,41,41,53,-112,86,109,-17,112,109,-90,109,-94,120,-85,41,-101,-102,-103,-104,-105,-106,41,-95,41,-99,-100,86,-47,-49,-50,-51,-52,-45,-46,-48,109,109,-86,109,-15,-16,112,-19,109,-88,-89,109,-92,-93,120,-96,-77,-18,-53,109,109,109,109,-14,234,-87,-91,109,-114,-118,-119,-120,109,-124,109,-126,-127,234,109,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'BREAK':([7,8,9,10,11,12,13,20,21,22,47,48,52,57,60,62,71,75,76,78,79,80,81,130,131,132,136,142,144,150,152,153,155,156,160,184,187,194,211,215,216,233,239,240,241,245,247,248,253,254,255,257,259,261,265,266,267,],[-7,-8,-9,-10,-11,-12,-13,-82,-83,-84,-112,87,-17,-90,-94,-85,-95,87,-47,-49,-50,-51,-52,-45,-46,-48,-86,-15,-16,-19,-88,-89,-92,-93,-96,-77,-18,-53,-14,-87,-91,-114,-118,-119,-120,-124,-126,-127,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'NUMBER':([7,8,9,10,11,12,13,20,21,22,24,25,47,48,51,52,56,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,130,131,132,133,135,136,141,142,144,150,151,152,153,154,155,156,160,184,187,194,195,199,200,201,203,207,210,211,215,216,232,233,239,240,241,243,245,246,247,248,252,253,254,255,257,259,261,265,266,267,],[-7,-8,-9,-10,-11,-12,-13,-82,-83,-84,43,43,-112,43,43,-17,43,-90,43,-94,-85,43,-101,-102,-103,-104,-105,-106,43,-95,43,-99,-100,43,-47,-49,-50,-51,-52,-45,-46,-48,43,43,-86,43,-15,-16,-19,43,-88,-89,43,-92,-93,-96,-77,-18,-53,43,222,223,43,43,43,231,-14,-87,-91,43,-114,-118,-119,-120,43,-124,43,-126,-127,43,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'STRING':([7,8,9,10,11,12,13,20,21,22,24,25,47,48,51,52,56,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,130,131,132,133,135,136,141,142,144,150,151,152,153,154,155,156,160,184,187,194,195,201,203,207,211,215,216,232,233,239,240,241,243,245,246,247,248,252,253,254,255,257,259,261,265,266,267,],[-7,-8,-9,-10,-11,-12,-13,-82,-83,-84,44,44,-112,44,44,-17,44,-90,44,-94,-85,44,-101,-102,-103,-104,-105,-106,44,-95,44,-99,-100,44,-47,-49,-50,-51,-52,-45,-46,-48,44,44,-86,44,-15,-16,-19,44,-88,-89,44,-92,-93,-96,-77,-18,-53,44,44,44,44,-14,-87,-91,44,-114,-118,-119,-120,44,-124,44,-126,-127,44,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'LDIAMOND':([7,8,9,10,11,12,13,20,21,22,47,48,51,52,56,57,59,60,62,71,75,76,78,79,80,81,94,130,131,132,133,135,136,141,142,144,146,150,151,152,153,154,155,156,160,184,187,194,195,201,203,207,211,215,216,232,233,239,240,241,243,245,246,247,248,252,253,254,255,257,259,261,265,266,267,],[-7,-8,-9,-10,-11,-12,-13,-82,-83,-84,-112,90,90,-17,90,-90,90,-94,-85,-95,90,-47,-49,-50,-51,-52,143,-45,-46,-48,90,90,-86,90,-15,-16,185,-19,90,-88,-89,90,-92,-93,-96,-77,-18,-53,90,90,90,90,-14,-87,-91,90,-114,-118,-119,-120,90,-124,90,-126,-127,90,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'ARRAY':([7,8,9,10,11,12,13,20,21,22,47,48,51,52,56,57,59,60,62,71,75,76,78,79,80,81,111,130,131,132,133,135,136,141,142,144,150,151,152,153,154,155,156,160,184,187,194,195,201,203,207,211,215,216,232,233,239,240,241,243,245,246,247,248,252,253,254,255,257,259,261,265,266,267,],[-7,-8,-9,-10,-11,-12,-13,-82,-83,-84,-112,92,92,-17,92,-90,92,-94,-85,-95,92,-47,-49,-50,-51,-52,92,-45,-46,-48,92,92,-86,92,-15,-16,-19,92,-88,-89,92,-92,-93,-96,-77,-18,-53,92,92,92,92,-14,-87,-91,92,-114,-118,-119,-120,92,-124,92,-126,-127,92,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'TRUE':([7,8,9,10,11,12,13,20,21,22,24,25,47,48,51,52,56,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,130,131,132,133,135,136,141,142,144,150,151,152,153,154,155,156,160,184,187,194,195,201,203,207,211,215,216,232,233,239,240,241,243,245,246,247,248,252,253,254,255,257,259,261,265,266,267,],[-7,-8,-9,-10,-11,-12,-13,-82,-83,-84,39,39,-112,39,39,-17,39,-90,39,-94,-85,39,-101,-102,-103,-104,-105,-106,39,-95,39,-99,-100,39,-47,-49,-50,-51,-52,-45,-46,-48,39,39,-86,39,-15,-16,-19,39,-88,-89,39,-92,-93,-96,-77,-18,-53,39,39,39,39,-14,-87,-91,39,-114,-118,-119,-120,39,-124,39,-126,-127,39,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'FALSE':([7,8,9,10,11,12,13,20,21,22,24,25,47,48,51,52,56,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,130,131,132,133,135,136,141,142,144,150,151,152,153,154,155,156,160,184,187,194,195,201,203,207,211,215,216,232,233,239,240,241,243,245,246,247,248,252,253,254,255,257,259,261,265,266,267,],[-7,-8,-9,-10,-11,-12,-13,-82,-83,-84,40,40,-112,40,40,-17,40,-90,40,-94,-85,40,-101,-102,-103,-104,-105,-106,40,-95,40,-99,-100,40,-47,-49,-50,-51,-52,-45,-46,-48,40,40,-86,40,-15,-16,-19,40,-88,-89,40,-92,-93,-96,-77,-18,-53,40,40,40,40,-14,-87,-91,40,-114,-118,-119,-120,40,-124,40,-126,-127,40,-116,-117,-121,-123,-113,-76,-115,-122,-125,]),'LBRACKET':([26,31,35,36,39,40,41,42,43,44,45,46,91,96,97,98,99,100,101,102,103,104,105,106,107,108,124,125,126,127,128,129,217,],[48,54,48,-107,-62,-63,-64,-58,-59,-60,48,-97,-61,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-108,-109,-111,-110,48,-98,48,]),'SEMICOLON':([28,29,32,33,39,40,42,43,44,77,82,83,84,85,86,87,88,89,91,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,116,117,118,119,145,148,161,177,180,181,189,190,206,209,212,219,220,221,225,227,228,229,236,238,242,244,249,251,262,263,264,],[49,52,57,60,-62,-63,-58,-59,-60,132,-54,-55,-56,-57,-64,136,-66,-67,-61,142,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-64,144,150,152,153,155,156,184,187,194,-68,210,211,215,216,229,-78,233,239,240,241,245,247,248,-65,253,254,255,257,259,261,265,266,267,]),'DOUBLE_POINT':([29,32,33,53,112,120,],[50,55,58,111,147,157,]),'EQUAL':([29,32,33,86,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,116,118,145,209,212,236,],[51,56,59,133,141,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,151,154,183,-78,232,252,]),'LPAREN':([34,86,109,162,163,164,165,166,167,168,169,170,171,172,],[61,135,135,195,196,197,198,199,200,201,202,203,204,205,]),'AND':([36,39,40,41,42,43,44,46,91,124,125,126,127,],[-107,-62,-63,-64,-58,-59,-60,73,-61,-108,-109,-111,-110,]),'OR':([36,39,40,41,42,43,44,46,91,124,125,126,127,],[-107,-62,-63,-64,-58,-59,-60,74,-61,-108,-109,-111,-110,]),'EQUAL_EQUAL':([36,37,38,39,40,41,42,43,44,],[-61,64,64,-62,-63,-64,-58,-59,-60,]),'NOT_EQUAL':([36,37,38,39,40,41,42,43,44,],[-61,65,65,-62,-63,-64,-58,-59,-60,]),'GREATER':([36,37,38,39,40,41,42,43,44,],[-61,66,66,-62,-63,-64,-58,-59,-60,]),'GREATER_EQUAL':([36,37,38,39,40,41,42,43,44,],[-61,67,67,-62,-63,-64,-58,-59,-60,]),'LESS':([36,37,38,39,40,41,42,43,44,],[-61,68,68,-62,-63,-64,-58,-59,-60,]),'LESS_EQUAL':([36,37,38,39,40,41,42,43,44,],[-61,69,69,-62,-63,-64,-58,-59,-60,]),'RPAREN':([39,40,42,43,44,61,82,83,84,85,88,89,91,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,121,122,123,135,173,174,175,176,177,191,193,196,197,198,202,204,205,209,218,222,224,229,230,256,258,],[-62,-63,-58,-59,-60,-43,-54,-55,-56,-57,-66,-67,-61,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-64,158,-41,-42,-43,206,-73,-74,-75,-68,-44,-40,219,220,221,225,227,228,-78,238,242,244,-65,-72,263,264,]),'COMMA':([39,40,42,43,44,61,82,83,84,85,88,89,91,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,113,115,121,122,123,135,137,138,139,173,174,175,176,177,186,188,191,193,208,209,223,226,229,230,234,],[-62,-63,-58,-59,-60,-43,-54,-55,-56,-57,-66,-67,-61,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-64,149,-21,159,-41,-42,-43,178,-70,-71,207,-73,-74,-75,-68,-22,-20,-44,-40,-69,-78,243,246,-65,-72,250,]),'VEC':([50,111,],[94,146,]),'INT8':([50,55,58,90,140,143,147,157,178,185,192,],[96,96,96,96,96,96,96,96,96,96,96,]),'INT16':([50,55,58,90,140,143,147,157,178,185,192,],[97,97,97,97,97,97,97,97,97,97,97,]),'INT32':([50,55,58,90,140,143,147,157,178,185,192,],[98,98,98,98,98,98,98,98,98,98,98,]),'INT64':([50,55,58,90,140,143,147,157,178,185,192,],[99,99,99,99,99,99,99,99,99,99,99,]),'UINT8':([50,55,58,90,140,143,147,157,178,185,192,],[100,100,100,100,100,100,100,100,100,100,100,]),'UINT16':([50,55,58,90,140,143,147,157,178,185,192,],[101,101,101,101,101,101,101,101,101,101,101,]),'UINT32':([50,55,58,90,140,143,147,157,178,185,192,],[102,102,102,102,102,102,102,102,102,102,102,]),'UINT64':([50,55,58,90,140,143,147,157,178,185,192,],[103,103,103,103,103,103,103,103,103,103,103,]),'FLOAT32':([50,55,58,90,140,143,147,157,178,185,192,],[104,104,104,104,104,104,104,104,104,104,104,]),'FLOAT64':([50,55,58,90,140,143,147,157,178,185,192,],[105,105,105,105,105,105,105,105,105,105,105,]),'BOOL':([50,55,58,90,140,143,147,157,178,185,192,],[106,106,106,106,106,106,106,106,106,106,106,]),'CHAR':([50,55,58,90,140,143,147,157,178,185,192,],[107,107,107,107,107,107,107,107,107,107,107,]),'STR':([50,55,58,90,140,143,147,157,178,185,192,],[108,108,108,108,108,108,108,108,108,108,108,]),'ELSE':([71,130,],[128,-45,]),'DOT':([86,],[134,]),'L_BRACKET':([92,183,],[140,213,]),'RDIAMOND':([95,96,97,98,99,100,101,102,103,104,105,106,107,108,137,138,139,182,208,214,],[-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,177,-70,-71,212,-69,236,]),'PUSH':([134,],[162,]),'POP':([134,],[163,]),'LEN':([134,],[164,]),'IS_EMPTY':([134,],[165,]),'GET':([134,],[166,]),'SET':([134,],[167,]),'REMOVE':([134,],[168,]),'CLEAR':([134,],[169,]),'SWAP':([134,],[170,]),'REVERSE':([134,],[171,]),'ITER':([134,],[172,]),'ARROW':([158,],[192,]),'R_BRACKET':([179,231,234,235,260,],[209,-79,-81,251,-80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'item':([0,1,],[2,27,]),'declaracion':([0,1,48,75,],[3,3,78,78,]),'importacion':([0,1,],[4,4,]),'funcion':([0,1,],[5,5,]),'declaracion_variable':([0,1,48,75,],[7,7,7,7,]),'declaracion_estructura':([0,1,48,75,],[8,8,8,8,]),'declaracion_constante':([0,1,48,75,],[9,9,9,9,]),'declaracion_mutable':([0,1,48,75,],[10,10,10,10,]),'declaracion_array':([0,1,48,75,],[11,11,11,11,]),'declaracion_struct_control':([0,1,48,75,],[12,12,12,12,]),'declaracion_vector':([0,1,48,75,],[13,13,13,13,]),'funcion_generica':([0,1,],[15,15,]),'while':([0,1,48,75,],[20,20,20,20,]),'if':([0,1,48,75,],[21,21,21,21,]),'loop':([0,1,48,75,],[22,22,22,22,]),'expresion_condicion':([24,25,72,],[35,46,129,]),'boolean':([24,25,48,51,56,59,63,70,72,75,133,135,141,151,154,195,201,203,207,232,243,246,252,],[36,36,91,91,91,91,91,91,36,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'expresion_variable':([24,25,48,51,56,59,63,70,72,75,133,135,141,151,154,195,201,203,207,232,243,246,252,],[37,37,83,83,83,83,124,127,37,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'expresion_literal':([24,25,48,51,56,59,63,70,72,75,133,135,141,151,154,195,201,203,207,232,243,246,252,],[38,38,82,82,82,82,125,126,38,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'literal':([24,25,48,51,56,59,63,70,72,75,133,135,141,151,154,195,201,203,207,232,243,246,252,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'condicion':([25,],[45,]),'bloque':([26,35,45,128,217,],[47,62,71,160,237,]),'comparacion':([37,38,],[63,70,]),'logic_operator':([46,],[72,]),'sentencias':([48,],[75,]),'sentencia':([48,75,],[76,131,]),'expresion':([48,51,56,59,75,133,135,141,151,154,195,201,203,207,232,243,246,252,],[77,110,117,119,77,161,176,181,189,190,218,224,226,176,249,256,258,262,]),'asignacion':([48,75,],[79,79,]),'break':([48,75,],[80,80,]),'funciones_vector':([48,75,],[81,81,]),'expresion_funcion':([48,51,56,59,75,133,135,141,151,154,195,201,203,207,232,243,246,252,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'expresion_estructura':([48,51,56,59,75,133,135,141,151,154,195,201,203,207,232,243,246,252,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'hashmap':([48,51,56,59,75,133,135,141,151,154,195,201,203,207,232,243,246,252,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'array':([48,51,56,59,75,111,133,135,141,151,154,195,201,203,207,232,243,246,252,],[89,89,89,89,89,145,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'tipo':([50,55,58,90,140,143,147,157,178,185,],[93,116,118,139,180,182,186,191,139,214,]),'tipo_simple':([50,55,58,90,140,143,147,157,178,185,192,],[95,95,95,95,95,95,95,95,95,95,217,]),'campos':([54,],[113,]),'campo':([54,149,],[115,188,]),'parametros':([61,],[121,]),'parametro':([61,159,],[122,193,]),'empty':([61,135,],[123,175,]),'hashmap_types':([90,],[137,]),'hashmap_type':([90,178,],[138,208,]),'argumentos':([135,],[173,]),'argumento':([135,207,],[174,230,]),'var_array':([140,],[179,]),'array_fill':([213,250,],[235,260,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> programa item','programa',2,'p_programa','sintactico.py',6),
  ('programa -> item','programa',1,'p_programa','sintactico.py',7),
  ('item -> declaracion','item',1,'p_item','sintactico.py',10),
  ('item -> importacion','item',1,'p_item','sintactico.py',11),
  ('item -> funcion','item',1,'p_item','sintactico.py',12),
  ('item -> error','item',1,'p_item','sintactico.py',13),
  ('declaracion -> declaracion_variable','declaracion',1,'p_declaracion','sintactico.py',16),
  ('declaracion -> declaracion_estructura','declaracion',1,'p_declaracion','sintactico.py',17),
  ('declaracion -> declaracion_constante','declaracion',1,'p_declaracion','sintactico.py',18),
  ('declaracion -> declaracion_mutable','declaracion',1,'p_declaracion','sintactico.py',19),
  ('declaracion -> declaracion_array','declaracion',1,'p_declaracion','sintactico.py',20),
  ('declaracion -> declaracion_struct_control','declaracion',1,'p_declaracion','sintactico.py',21),
  ('declaracion -> declaracion_vector','declaracion',1,'p_declaracion','sintactico.py',22),
  ('declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON','declaracion_variable',7,'p_declaracion_variable','sintactico.py',25),
  ('declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON','declaracion_variable',5,'p_declaracion_variable','sintactico.py',26),
  ('declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON','declaracion_variable',5,'p_declaracion_variable','sintactico.py',27),
  ('declaracion_variable -> LET VARIABLE SEMICOLON','declaracion_variable',3,'p_declaracion_variable','sintactico.py',28),
  ('declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON','declaracion_estructura',6,'p_declaracion_estructura','sintactico.py',32),
  ('declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON','declaracion_estructura',5,'p_declaracion_estructura','sintactico.py',33),
  ('campos -> campos COMMA campo','campos',3,'p_campos','sintactico.py',38),
  ('campos -> campo','campos',1,'p_campos','sintactico.py',39),
  ('campo -> VARIABLE DOUBLE_POINT tipo','campo',3,'p_campo','sintactico.py',42),
  ('tipo -> tipo_simple','tipo',1,'p_tipo','sintactico.py',45),
  ('tipo_simple -> INT8','tipo_simple',1,'p_tipo_simple','sintactico.py',48),
  ('tipo_simple -> INT16','tipo_simple',1,'p_tipo_simple','sintactico.py',49),
  ('tipo_simple -> INT32','tipo_simple',1,'p_tipo_simple','sintactico.py',50),
  ('tipo_simple -> INT64','tipo_simple',1,'p_tipo_simple','sintactico.py',51),
  ('tipo_simple -> UINT8','tipo_simple',1,'p_tipo_simple','sintactico.py',52),
  ('tipo_simple -> UINT16','tipo_simple',1,'p_tipo_simple','sintactico.py',53),
  ('tipo_simple -> UINT32','tipo_simple',1,'p_tipo_simple','sintactico.py',54),
  ('tipo_simple -> UINT64','tipo_simple',1,'p_tipo_simple','sintactico.py',55),
  ('tipo_simple -> FLOAT32','tipo_simple',1,'p_tipo_simple','sintactico.py',56),
  ('tipo_simple -> FLOAT64','tipo_simple',1,'p_tipo_simple','sintactico.py',57),
  ('tipo_simple -> BOOL','tipo_simple',1,'p_tipo_simple','sintactico.py',58),
  ('tipo_simple -> CHAR','tipo_simple',1,'p_tipo_simple','sintactico.py',59),
  ('tipo_simple -> STR','tipo_simple',1,'p_tipo_simple','sintactico.py',60),
  ('importacion -> USE VARIABLE SEMICOLON','importacion',3,'p_importacion','sintactico.py',63),
  ('funcion -> funcion_generica','funcion',1,'p_funcion','sintactico.py',66),
  ('funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque','funcion_generica',8,'p_funcion_generica','sintactico.py',69),
  ('parametros -> parametros COMMA parametro','parametros',3,'p_parametros','sintactico.py',73),
  ('parametros -> parametro','parametros',1,'p_parametros','sintactico.py',74),
  ('parametros -> empty','parametros',1,'p_parametros','sintactico.py',75),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',78),
  ('parametro -> VARIABLE DOUBLE_POINT tipo','parametro',3,'p_parametro','sintactico.py',82),
  ('bloque -> LBRACKET sentencias RBRACKET','bloque',3,'p_bloque','sintactico.py',85),
  ('sentencias -> sentencias sentencia','sentencias',2,'p_sentencias','sintactico.py',88),
  ('sentencias -> sentencia','sentencias',1,'p_sentencias','sintactico.py',89),
  ('sentencia -> expresion SEMICOLON','sentencia',2,'p_sentencia','sintactico.py',92),
  ('sentencia -> declaracion','sentencia',1,'p_sentencia','sintactico.py',93),
  ('sentencia -> asignacion','sentencia',1,'p_sentencia','sintactico.py',94),
  ('sentencia -> break','sentencia',1,'p_sentencia','sintactico.py',95),
  ('sentencia -> funciones_vector','sentencia',1,'p_sentencia','sintactico.py',96),
  ('asignacion -> VARIABLE EQUAL expresion SEMICOLON','asignacion',4,'p_asignacion','sintactico.py',99),
  ('expresion -> expresion_literal','expresion',1,'p_expresion','sintactico.py',103),
  ('expresion -> expresion_variable','expresion',1,'p_expresion','sintactico.py',104),
  ('expresion -> expresion_funcion','expresion',1,'p_expresion','sintactico.py',105),
  ('expresion -> expresion_estructura','expresion',1,'p_expresion','sintactico.py',106),
  ('expresion_literal -> literal','expresion_literal',1,'p_expresion_literal','sintactico.py',109),
  ('literal -> NUMBER','literal',1,'p_literal','sintactico.py',112),
  ('literal -> STRING','literal',1,'p_literal','sintactico.py',113),
  ('literal -> boolean','literal',1,'p_literal','sintactico.py',114),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',117),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',118),
  ('expresion_variable -> VARIABLE','expresion_variable',1,'p_expresion_variable','sintactico.py',121),
  ('expresion_funcion -> VARIABLE LPAREN argumentos RPAREN SEMICOLON','expresion_funcion',5,'p_expresion_funcion','sintactico.py',124),
  ('expresion_estructura -> hashmap','expresion_estructura',1,'p_expresion_estructura','sintactico.py',127),
  ('expresion_estructura -> array','expresion_estructura',1,'p_expresion_estructura','sintactico.py',128),
  ('hashmap -> LDIAMOND hashmap_types RDIAMOND','hashmap',3,'p_hashmap','sintactico.py',133),
  ('hashmap_types -> hashmap_types COMMA hashmap_type','hashmap_types',3,'p_hashmap_types','sintactico.py',136),
  ('hashmap_types -> hashmap_type','hashmap_types',1,'p_hashmap_types','sintactico.py',137),
  ('hashmap_type -> tipo','hashmap_type',1,'p_hashmap_type','sintactico.py',140),
  ('argumentos -> argumentos COMMA argumento','argumentos',3,'p_argumentos','sintactico.py',144),
  ('argumentos -> argumento','argumentos',1,'p_argumentos','sintactico.py',145),
  ('argumentos -> empty','argumentos',1,'p_argumentos','sintactico.py',146),
  ('argumento -> expresion','argumento',1,'p_argumento','sintactico.py',149),
  ('declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON','declaracion_array',10,'p_declaracion_array','sintactico.py',153),
  ('declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON','declaracion_array',6,'p_declaracion_array','sintactico.py',154),
  ('array -> ARRAY L_BRACKET var_array R_BRACKET','array',4,'p_array','sintactico.py',156),
  ('var_array -> tipo SEMICOLON NUMBER','var_array',3,'p_var_array','sintactico.py',159),
  ('array_fill -> VARIABLE COMMA array_fill','array_fill',3,'p_array_fill','sintactico.py',162),
  ('array_fill -> VARIABLE','array_fill',1,'p_array_fill','sintactico.py',163),
  ('declaracion_struct_control -> while','declaracion_struct_control',1,'p_declaracion_struct_control','sintactico.py',165),
  ('declaracion_struct_control -> if','declaracion_struct_control',1,'p_declaracion_struct_control','sintactico.py',166),
  ('declaracion_struct_control -> loop','declaracion_struct_control',1,'p_declaracion_struct_control','sintactico.py',167),
  ('while -> WHILE expresion_condicion bloque','while',3,'p_while','sintactico.py',169),
  ('break -> BREAK SEMICOLON','break',2,'p_break','sintactico.py',176),
  ('declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON','declaracion_constante',7,'p_declaracion_constante','sintactico.py',178),
  ('declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON','declaracion_constante',5,'p_declaracion_constante','sintactico.py',179),
  ('declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON','declaracion_constante',5,'p_declaracion_constante','sintactico.py',180),
  ('declaracion_constante -> CONST VARIABLE SEMICOLON','declaracion_constante',3,'p_declaracion_constante','sintactico.py',181),
  ('declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON','declaracion_mutable',7,'p_declaracion_mutable','sintactico.py',184),
  ('declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON','declaracion_mutable',5,'p_declaracion_mutable','sintactico.py',185),
  ('declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON','declaracion_mutable',5,'p_declaracion_mutable','sintactico.py',186),
  ('declaracion_mutable -> MUT VARIABLE SEMICOLON','declaracion_mutable',3,'p_declaracion_mutable','sintactico.py',187),
  ('if -> IF condicion bloque','if',3,'p_if','sintactico.py',191),
  ('if -> IF condicion bloque ELSE bloque','if',5,'p_if','sintactico.py',192),
  ('condicion -> expresion_condicion','condicion',1,'p_condicion','sintactico.py',195),
  ('condicion -> expresion_condicion logic_operator expresion_condicion','condicion',3,'p_condicion','sintactico.py',196),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','sintactico.py',199),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','sintactico.py',200),
  ('comparacion -> EQUAL_EQUAL','comparacion',1,'p_comparacion','sintactico.py',203),
  ('comparacion -> NOT_EQUAL','comparacion',1,'p_comparacion','sintactico.py',204),
  ('comparacion -> GREATER','comparacion',1,'p_comparacion','sintactico.py',205),
  ('comparacion -> GREATER_EQUAL','comparacion',1,'p_comparacion','sintactico.py',206),
  ('comparacion -> LESS','comparacion',1,'p_comparacion','sintactico.py',207),
  ('comparacion -> LESS_EQUAL','comparacion',1,'p_comparacion','sintactico.py',208),
  ('expresion_condicion -> boolean','expresion_condicion',1,'p_expresion_condicion','sintactico.py',212),
  ('expresion_condicion -> expresion_variable comparacion expresion_variable','expresion_condicion',3,'p_expresion_condicion','sintactico.py',213),
  ('expresion_condicion -> expresion_variable comparacion expresion_literal','expresion_condicion',3,'p_expresion_condicion','sintactico.py',214),
  ('expresion_condicion -> expresion_literal comparacion expresion_variable','expresion_condicion',3,'p_expresion_condicion','sintactico.py',215),
  ('expresion_condicion -> expresion_literal comparacion expresion_literal','expresion_condicion',3,'p_expresion_condicion','sintactico.py',216),
  ('loop -> LOOP bloque','loop',2,'p_loop','sintactico.py',222),
  ('declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON','declaracion_vector',10,'p_declaracion_vector','sintactico.py',226),
  ('declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON','declaracion_vector',8,'p_declaracion_vector','sintactico.py',227),
  ('declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON','declaracion_vector',11,'p_declaracion_vector','sintactico.py',228),
  ('declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON','declaracion_vector',9,'p_declaracion_vector','sintactico.py',229),
  ('funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON','funciones_vector',7,'p_funciones_vector','sintactico.py',232),
  ('funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',233),
  ('funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',234),
  ('funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',235),
  ('funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON','funciones_vector',7,'p_funciones_vector','sintactico.py',236),
  ('funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON','funciones_vector',9,'p_funciones_vector','sintactico.py',237),
  ('funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON','funciones_vector',7,'p_funciones_vector','sintactico.py',238),
  ('funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',239),
  ('funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON','funciones_vector',9,'p_funciones_vector','sintactico.py',240),
  ('funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',241),
  ('funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON','funciones_vector',6,'p_funciones_vector','sintactico.py',242),
]
