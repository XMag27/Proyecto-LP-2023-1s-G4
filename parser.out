Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    AS
    BITOR
    BITXOR
    CONTAINS_KEY
    ENUM
    GREATER
    IMPL
    LESS
    MAIN
    MATCH
    MOD
    PERCENTAGE
    PUB
    REF
    STATIC
    TRAIT
    TYPE
    USE

Grammar

Rule 0     S' -> program
Rule 1     program -> program item
Rule 2     program -> item
Rule 3     item -> definicion
Rule 4     item -> estructuracontrol
Rule 5     item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
Rule 6     item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
Rule 7     item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
Rule 8     item -> expresion
Rule 9     item -> expresion SEMICOLON
Rule 10    item -> continue
Rule 11    item -> break
Rule 12    item -> funcionesesdata
Rule 13    item -> RETURN expresion SEMICOLON
Rule 14    estructuracontrol -> for
Rule 15    estructuracontrol -> while
Rule 16    estructuracontrol -> if
Rule 17    estructuracontrol -> loop
Rule 18    for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
Rule 19    for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
Rule 20    for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
Rule 21    for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
Rule 22    for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET
Rule 23    for -> FOR VARIABLE IN expresion LBRACKET RBRACKET
Rule 24    definicion -> definicionvariable
Rule 25    definicion -> definicionestructura
Rule 26    definicion -> definicionfuncion
Rule 27    definicion -> definicionestructuradatos
Rule 28    definicionestructuradatos -> hashmap
Rule 29    definicionestructuradatos -> array
Rule 30    definicionestructuradatos -> vector
Rule 31    definicionestructuradatos -> list
Rule 32    list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
Rule 33    numeros -> NUMBER
Rule 34    numeros -> NUMBER COMMA numeros
Rule 35    hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
Rule 36    funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
Rule 37    funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN
Rule 38    funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN
Rule 39    funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN
Rule 40    funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN
Rule 41    funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN
Rule 42    funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN
Rule 43    definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
Rule 44    definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
Rule 45    definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 46    definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON
Rule 47    definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON
Rule 48    definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 49    definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
Rule 50    definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
Rule 51    definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 52    definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 53    definicionvariable -> LET VARIABLE SEMICOLON
Rule 54    definicionvariable -> VARIABLE EQUAL expresion SEMICOLON
Rule 55    definicionvariable -> VARIABLE EQUAL STRING SEMICOLON
Rule 56    definicionvariable -> LET VARIABLE EQUAL expresion
Rule 57    definicionvariable -> declaracion_constante
Rule 58    definicionvariable -> declaracion_mutable
Rule 59    definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
Rule 60    vars -> VARIABLE
Rule 61    vars -> VARIABLE COMMA vars
Rule 62    tipo -> INT8
Rule 63    tipo -> INT16
Rule 64    tipo -> INT32
Rule 65    tipo -> INT64
Rule 66    tipo -> UINT8
Rule 67    tipo -> UINT16
Rule 68    tipo -> UINT32
Rule 69    tipo -> UINT64
Rule 70    tipo -> FLOAT32
Rule 71    tipo -> FLOAT64
Rule 72    tipo -> BOOL
Rule 73    tipo -> CHAR
Rule 74    tipo -> STR
Rule 75    tipo -> VARIABLE
Rule 76    tipo -> VEC tipo
Rule 77    expresion -> ops
Rule 78    expresion -> NUMBER
Rule 79    expresion -> FLOAT
Rule 80    expresion -> STRING
Rule 81    expresion -> TRUE
Rule 82    expresion -> FALSE
Rule 83    expresion -> VARIABLE
Rule 84    expresion -> expresion
Rule 85    expresion -> opbasicas
Rule 86    expresion -> estructuracontrol
Rule 87    expresion -> definicionvariable
Rule 88    expresion -> llamarfuncion
Rule 89    llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON
Rule 90    llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON
Rule 91    llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
Rule 92    llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON
Rule 93    llamarfuncion -> VARIABLE LPAREN operandos RPAREN
Rule 94    operaciones -> PLUS
Rule 95    operaciones -> MINUS
Rule 96    operaciones -> TIMES
Rule 97    operaciones -> DIVIDE
Rule 98    operaciones -> RDIAMOND
Rule 99    operaciones -> LDIAMOND
Rule 100   operaciones -> EQUAL_EQUAL
Rule 101   operaciones -> NOT_EQUAL
Rule 102   operaciones -> LESS_EQUAL
Rule 103   operaciones -> GREATER_EQUAL
Rule 104   operaciones -> PLUS_EQUAL
Rule 105   operandos -> NUMBER
Rule 106   operandos -> FLOAT
Rule 107   operandos -> VARIABLE
Rule 108   operandos -> STRING
Rule 109   operandos -> opbasicas
Rule 110   operandos -> TIMES VARIABLE
Rule 111   operandos -> BITAND VARIABLE
Rule 112   operandos -> operandos COMMA operandos
Rule 113   variables -> VARIABLE
Rule 114   variables -> VARIABLE COMMA variables
Rule 115   definicionfuncion -> funciongenerica
Rule 116   funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
Rule 117   array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
Rule 118   array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
Rule 119   while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
Rule 120   while -> WHILE expresion LBRACKET program RBRACKET
Rule 121   funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
Rule 122   funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
Rule 123   funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
Rule 124   funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
Rule 125   expresionlogica -> operandos AND operandos
Rule 126   expresionlogica -> operandos OR operandos
Rule 127   expresionlogica -> operandos
Rule 128   expresionlogica -> TRUE
Rule 129   expresionlogica -> FALSE
Rule 130   break -> BREAK SEMICOLON
Rule 131   break -> BREAK expresion SEMICOLON
Rule 132   continue -> CONTINUE SEMICOLON
Rule 133   declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 134   declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 135   declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON
Rule 136   declaracion_constante -> CONST VARIABLE SEMICOLON
Rule 137   declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 138   declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 139   declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON
Rule 140   declaracion_mutable -> MUT VARIABLE SEMICOLON
Rule 141   if -> IF expresion LBRACKET program RBRACKET
Rule 142   if -> IF expresion LBRACKET program RBRACKET ELSE
Rule 143   if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
Rule 144   loop -> LOOP LBRACKET program RBRACKET
Rule 145   vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
Rule 146   vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
Rule 147   vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
Rule 148   vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
Rule 149   vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
Rule 150   funcionesesdata -> funcionesvector
Rule 151   funcionesesdata -> funcioneshashmap
Rule 152   funcionesesdata -> funcionesarray
Rule 153   funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
Rule 154   funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON
Rule 155   funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
Rule 156   funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
Rule 157   funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
Rule 158   funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
Rule 159   funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
Rule 160   funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
Rule 161   funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
Rule 162   funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
Rule 163   funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
Rule 164   opbasicas -> ARRAY DOT LEN LPAREN RPAREN
Rule 165   opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
Rule 166   opbasicas -> VARIABLE DOT ITER LPAREN RPAREN
Rule 167   opbasicas -> ARRAY L_BRACKET operandos R_BRACKET
Rule 168   opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
Rule 169   opbasicas -> STRING DOT TO_STRING LPAREN RPAREN
Rule 170   opbasicas -> VARIABLE LPAREN variables RPAREN
Rule 171   opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET
Rule 172   ops -> operandos operaciones operandos
Rule 173   ops -> operandos operaciones ops

Terminals, with rules where they appear

AND                  : 125
ARRAY                : 117 164 167
ARROW                : 
AS                   : 
BITAND               : 111 165
BITOR                : 
BITXOR               : 
BOOL                 : 72
BREAK                : 130 131
CHAR                 : 73
CLEAR                : 41 123 160
COMMA                : 6 7 34 35 36 61 91 112 114 158 161
CONST                : 133 134 135 136
CONTAINS_KEY         : 
CONTINUE             : 132
DIVIDE               : 97
DOT                  : 20 20 21 21 36 37 38 39 40 41 42 121 122 123 124 153 154 155 156 157 158 159 160 161 162 163 164 165 165 166 168 168 168 169
DOUBLE_POINT         : 35 35 35 45 48 49 50 51 52 117 118 133 134 137 138 145 146 147 148 149 149 149
ELSE                 : 142 143
ENUM                 : 
EQUAL                : 20 21 32 35 45 46 47 48 49 50 54 55 56 59 117 133 135 137 139 145 147 149
EQUAL_EQUAL          : 100
EXCLAMATION          : 5 6 7 171
FALSE                : 82 129
FLOAT                : 79 106
FLOAT32              : 70
FLOAT64              : 71
FN                   : 116
FOR                  : 18 19 20 21 22 23
GET                  : 38 157
GREATER              : 
GREATER_EQUAL        : 103
HASHMAP              : 35 35
IF                   : 141 142 143
IMPL                 : 
IN                   : 18 19 20 21 22 23
INSERT               : 36
INT16                : 63
INT32                : 64
INT64                : 65
INT8                 : 62
IS_EMPTY             : 40 122 156
ITER                 : 42 124 163 166
LBRACKET             : 18 19 20 21 22 23 43 44 116 119 120 141 142 143 143 144
LDIAMOND             : 35 99 145 146 147 148 149
LEN                  : 39 121 155 164
LESS                 : 
LESS_EQUAL           : 102
LET                  : 32 35 45 46 47 48 49 50 51 52 53 56 59 117 118 145 146 147 148 149
LOOP                 : 144
LPAREN               : 5 6 7 35 36 37 38 39 40 41 42 59 89 90 91 92 93 116 119 121 122 123 124 149 153 154 155 156 157 158 159 160 161 162 163 164 166 168 168 169 170
L_BRACKET            : 32 117 117 165 167 171
MAIN                 : 
MATCH                : 
MINUS                : 95
MOD                  : 
MUT                  : 35 47 48 50 52 117 118 137 138 139 140 147 148
NEW                  : 35 149
NOT_EQUAL            : 101
NUMBER               : 20 20 21 21 33 34 78 105 117 117 117 157 158 165 165 168 168
OR                   : 126
PERCENTAGE           : 
PLUS                 : 94
PLUS_EQUAL           : 104
POP                  : 154
PRINT                : 5 6 7
PUB                  : 
PUSH                 : 153
RBRACKET             : 18 19 20 21 22 23 43 44 116 119 120 141 142 143 143 144
RDIAMOND             : 35 98 145 146 147 148 149
REF                  : 
REMOVE               : 37 159
RETURN               : 13
REV                  : 168
REVERSE              : 162
RPAREN               : 5 6 7 35 36 37 38 39 40 41 42 59 89 90 91 92 93 116 119 121 122 123 124 149 153 154 155 156 157 158 159 160 161 162 163 164 166 168 168 169 170
R_BRACKET            : 32 117 117 165 167 171
SEMICOLON            : 5 6 7 9 13 32 35 43 44 45 46 47 48 49 50 51 52 53 54 55 89 90 91 92 117 117 117 118 121 122 123 124 130 131 132 133 134 135 136 137 138 139 140 145 146 147 148 149 153 154 155 156 157 158 159 160 161 162 163
SET                  : 158
STATIC               : 
STR                  : 74
STRING               : 5 6 7 49 50 55 80 108 169
STRUCT               : 43 44
SWAP                 : 161
TIMES                : 96 110
TO_STRING            : 169
TRAIT                : 
TRUE                 : 81 128
TYPE                 : 
UINT16               : 67
UINT32               : 68
UINT64               : 69
UINT8                : 66
USE                  : 
VARIABLE             : 18 18 19 19 20 21 22 23 32 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 59 59 60 61 75 83 89 90 91 92 93 107 110 111 113 114 116 118 121 122 123 124 133 134 135 136 137 138 139 140 145 146 147 148 149 153 154 155 156 157 158 159 160 161 162 163 165 166 170
VEC                  : 76 145 146 147 148 149 149 171
WHILE                : 119 120
error                : 

Nonterminals, with rules where they appear

array                : 29 118
break                : 11
continue             : 10
declaracion_constante : 57
declaracion_mutable  : 58
definicion           : 3
definicionestructura : 25
definicionestructuradatos : 27
definicionfuncion    : 26
definicionvariable   : 24 87
estructuracontrol    : 4 86
expresion            : 6 8 9 13 22 23 36 36 37 38 45 46 47 48 54 56 84 90 91 91 119 120 131 133 135 137 139 141 142 143 145 147 153 158 159 161 161
expresionlogica      : 
for                  : 14
funcionesarray       : 152
funcionesesdata      : 12
funcioneshashmap     : 151
funcionesvector      : 150
funciongenerica      : 115
hashmap              : 28
if                   : 16
item                 : 1 2 43
list                 : 31
llamarfuncion        : 59 88
loop                 : 17
numeros              : 32 34 171
opbasicas            : 85 109
operaciones          : 172 173
operandos            : 92 93 112 112 125 125 126 126 127 167 172 172 173
ops                  : 77 173
program              : 1 18 20 22 116 119 120 141 142 143 143 144 0
tipo                 : 35 35 45 48 49 50 51 52 76 117 133 134 137 138 145 146 147 148 149
variables            : 114 170
vars                 : 7 61
vector               : 30
while                : 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    program                        shift and go to state 1
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 1

    (0) S' -> program .
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    item                           shift and go to state 55
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 2

    (2) program -> item .

    PRINT           reduce using rule 2 (program -> item .)
    RETURN          reduce using rule 2 (program -> item .)
    NUMBER          reduce using rule 2 (program -> item .)
    FLOAT           reduce using rule 2 (program -> item .)
    STRING          reduce using rule 2 (program -> item .)
    TRUE            reduce using rule 2 (program -> item .)
    FALSE           reduce using rule 2 (program -> item .)
    VARIABLE        reduce using rule 2 (program -> item .)
    CONTINUE        reduce using rule 2 (program -> item .)
    BREAK           reduce using rule 2 (program -> item .)
    LET             reduce using rule 2 (program -> item .)
    STRUCT          reduce using rule 2 (program -> item .)
    FOR             reduce using rule 2 (program -> item .)
    WHILE           reduce using rule 2 (program -> item .)
    IF              reduce using rule 2 (program -> item .)
    LOOP            reduce using rule 2 (program -> item .)
    ARRAY           reduce using rule 2 (program -> item .)
    BITAND          reduce using rule 2 (program -> item .)
    LPAREN          reduce using rule 2 (program -> item .)
    VEC             reduce using rule 2 (program -> item .)
    CONST           reduce using rule 2 (program -> item .)
    MUT             reduce using rule 2 (program -> item .)
    FN              reduce using rule 2 (program -> item .)
    TIMES           reduce using rule 2 (program -> item .)
    $end            reduce using rule 2 (program -> item .)
    RBRACKET        reduce using rule 2 (program -> item .)


state 3

    (3) item -> definicion .

    PRINT           reduce using rule 3 (item -> definicion .)
    RETURN          reduce using rule 3 (item -> definicion .)
    NUMBER          reduce using rule 3 (item -> definicion .)
    FLOAT           reduce using rule 3 (item -> definicion .)
    STRING          reduce using rule 3 (item -> definicion .)
    TRUE            reduce using rule 3 (item -> definicion .)
    FALSE           reduce using rule 3 (item -> definicion .)
    VARIABLE        reduce using rule 3 (item -> definicion .)
    CONTINUE        reduce using rule 3 (item -> definicion .)
    BREAK           reduce using rule 3 (item -> definicion .)
    LET             reduce using rule 3 (item -> definicion .)
    STRUCT          reduce using rule 3 (item -> definicion .)
    FOR             reduce using rule 3 (item -> definicion .)
    WHILE           reduce using rule 3 (item -> definicion .)
    IF              reduce using rule 3 (item -> definicion .)
    LOOP            reduce using rule 3 (item -> definicion .)
    ARRAY           reduce using rule 3 (item -> definicion .)
    BITAND          reduce using rule 3 (item -> definicion .)
    LPAREN          reduce using rule 3 (item -> definicion .)
    VEC             reduce using rule 3 (item -> definicion .)
    CONST           reduce using rule 3 (item -> definicion .)
    MUT             reduce using rule 3 (item -> definicion .)
    FN              reduce using rule 3 (item -> definicion .)
    TIMES           reduce using rule 3 (item -> definicion .)
    $end            reduce using rule 3 (item -> definicion .)
    RBRACKET        reduce using rule 3 (item -> definicion .)


state 4

    (4) item -> estructuracontrol .
    (86) expresion -> estructuracontrol .

  ! reduce/reduce conflict for PRINT resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for RETURN resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for NUMBER resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for FLOAT resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for STRING resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for TRUE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for FALSE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for BREAK resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for LET resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for STRUCT resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for FOR resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for WHILE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for IF resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for LOOP resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for ARRAY resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for BITAND resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for LPAREN resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for VEC resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for CONST resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for MUT resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for FN resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for TIMES resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for $end resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 4 (item -> estructuracontrol .)
    PRINT           reduce using rule 4 (item -> estructuracontrol .)
    RETURN          reduce using rule 4 (item -> estructuracontrol .)
    NUMBER          reduce using rule 4 (item -> estructuracontrol .)
    FLOAT           reduce using rule 4 (item -> estructuracontrol .)
    STRING          reduce using rule 4 (item -> estructuracontrol .)
    TRUE            reduce using rule 4 (item -> estructuracontrol .)
    FALSE           reduce using rule 4 (item -> estructuracontrol .)
    VARIABLE        reduce using rule 4 (item -> estructuracontrol .)
    CONTINUE        reduce using rule 4 (item -> estructuracontrol .)
    BREAK           reduce using rule 4 (item -> estructuracontrol .)
    LET             reduce using rule 4 (item -> estructuracontrol .)
    STRUCT          reduce using rule 4 (item -> estructuracontrol .)
    FOR             reduce using rule 4 (item -> estructuracontrol .)
    WHILE           reduce using rule 4 (item -> estructuracontrol .)
    IF              reduce using rule 4 (item -> estructuracontrol .)
    LOOP            reduce using rule 4 (item -> estructuracontrol .)
    ARRAY           reduce using rule 4 (item -> estructuracontrol .)
    BITAND          reduce using rule 4 (item -> estructuracontrol .)
    LPAREN          reduce using rule 4 (item -> estructuracontrol .)
    VEC             reduce using rule 4 (item -> estructuracontrol .)
    CONST           reduce using rule 4 (item -> estructuracontrol .)
    MUT             reduce using rule 4 (item -> estructuracontrol .)
    FN              reduce using rule 4 (item -> estructuracontrol .)
    TIMES           reduce using rule 4 (item -> estructuracontrol .)
    $end            reduce using rule 4 (item -> estructuracontrol .)
    RBRACKET        reduce using rule 4 (item -> estructuracontrol .)
    SEMICOLON       reduce using rule 86 (expresion -> estructuracontrol .)

  ! PRINT           [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! RETURN          [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! NUMBER          [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! FLOAT           [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! STRING          [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! TRUE            [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! FALSE           [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! VARIABLE        [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! CONTINUE        [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! BREAK           [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! LET             [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! STRUCT          [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! FOR             [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! WHILE           [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! IF              [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! LOOP            [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! ARRAY           [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! BITAND          [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! LPAREN          [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! VEC             [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! CONST           [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! MUT             [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! FN              [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! TIMES           [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! $end            [ reduce using rule 86 (expresion -> estructuracontrol .) ]
  ! RBRACKET        [ reduce using rule 86 (expresion -> estructuracontrol .) ]


state 5

    (5) item -> PRINT . EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> PRINT . EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> PRINT . EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON

    EXCLAMATION     shift and go to state 56


state 6

    (168) opbasicas -> LPAREN . NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN

    NUMBER          shift and go to state 57


state 7

    (80) expresion -> STRING .
    (169) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN
    (108) operandos -> STRING .

  ! reduce/reduce conflict for COMMA resolved using rule 80 (expresion -> STRING .)
  ! reduce/reduce conflict for TIMES resolved using rule 80 (expresion -> STRING .)
    SEMICOLON       reduce using rule 80 (expresion -> STRING .)
    PRINT           reduce using rule 80 (expresion -> STRING .)
    RETURN          reduce using rule 80 (expresion -> STRING .)
    NUMBER          reduce using rule 80 (expresion -> STRING .)
    FLOAT           reduce using rule 80 (expresion -> STRING .)
    STRING          reduce using rule 80 (expresion -> STRING .)
    TRUE            reduce using rule 80 (expresion -> STRING .)
    FALSE           reduce using rule 80 (expresion -> STRING .)
    VARIABLE        reduce using rule 80 (expresion -> STRING .)
    CONTINUE        reduce using rule 80 (expresion -> STRING .)
    BREAK           reduce using rule 80 (expresion -> STRING .)
    LET             reduce using rule 80 (expresion -> STRING .)
    STRUCT          reduce using rule 80 (expresion -> STRING .)
    FOR             reduce using rule 80 (expresion -> STRING .)
    WHILE           reduce using rule 80 (expresion -> STRING .)
    IF              reduce using rule 80 (expresion -> STRING .)
    LOOP            reduce using rule 80 (expresion -> STRING .)
    ARRAY           reduce using rule 80 (expresion -> STRING .)
    BITAND          reduce using rule 80 (expresion -> STRING .)
    LPAREN          reduce using rule 80 (expresion -> STRING .)
    VEC             reduce using rule 80 (expresion -> STRING .)
    CONST           reduce using rule 80 (expresion -> STRING .)
    MUT             reduce using rule 80 (expresion -> STRING .)
    FN              reduce using rule 80 (expresion -> STRING .)
    TIMES           reduce using rule 80 (expresion -> STRING .)
    $end            reduce using rule 80 (expresion -> STRING .)
    LBRACKET        reduce using rule 80 (expresion -> STRING .)
    RPAREN          reduce using rule 80 (expresion -> STRING .)
    RBRACKET        reduce using rule 80 (expresion -> STRING .)
    COMMA           reduce using rule 80 (expresion -> STRING .)
    DOT             shift and go to state 58
    PLUS            reduce using rule 108 (operandos -> STRING .)
    MINUS           reduce using rule 108 (operandos -> STRING .)
    DIVIDE          reduce using rule 108 (operandos -> STRING .)
    RDIAMOND        reduce using rule 108 (operandos -> STRING .)
    LDIAMOND        reduce using rule 108 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 108 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 108 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> STRING .)

  ! COMMA           [ reduce using rule 108 (operandos -> STRING .) ]
  ! TIMES           [ reduce using rule 108 (operandos -> STRING .) ]


state 8

    (8) item -> expresion .
    (9) item -> expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for RETURN resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for NUMBER resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for FLOAT resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for STRING resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for TRUE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for FALSE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for BREAK resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for LET resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for STRUCT resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for IF resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for LOOP resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for ARRAY resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for BITAND resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for LPAREN resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for VEC resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for CONST resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for MUT resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for FN resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for TIMES resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for $end resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 8 (item -> expresion .)
    PRINT           reduce using rule 8 (item -> expresion .)
    RETURN          reduce using rule 8 (item -> expresion .)
    NUMBER          reduce using rule 8 (item -> expresion .)
    FLOAT           reduce using rule 8 (item -> expresion .)
    STRING          reduce using rule 8 (item -> expresion .)
    TRUE            reduce using rule 8 (item -> expresion .)
    FALSE           reduce using rule 8 (item -> expresion .)
    VARIABLE        reduce using rule 8 (item -> expresion .)
    CONTINUE        reduce using rule 8 (item -> expresion .)
    BREAK           reduce using rule 8 (item -> expresion .)
    LET             reduce using rule 8 (item -> expresion .)
    STRUCT          reduce using rule 8 (item -> expresion .)
    FOR             reduce using rule 8 (item -> expresion .)
    WHILE           reduce using rule 8 (item -> expresion .)
    IF              reduce using rule 8 (item -> expresion .)
    LOOP            reduce using rule 8 (item -> expresion .)
    ARRAY           reduce using rule 8 (item -> expresion .)
    BITAND          reduce using rule 8 (item -> expresion .)
    LPAREN          reduce using rule 8 (item -> expresion .)
    VEC             reduce using rule 8 (item -> expresion .)
    CONST           reduce using rule 8 (item -> expresion .)
    MUT             reduce using rule 8 (item -> expresion .)
    FN              reduce using rule 8 (item -> expresion .)
    TIMES           reduce using rule 8 (item -> expresion .)
    $end            reduce using rule 8 (item -> expresion .)
    RBRACKET        reduce using rule 8 (item -> expresion .)
    SEMICOLON       shift and go to state 59

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]
  ! PRINT           [ reduce using rule 84 (expresion -> expresion .) ]
  ! RETURN          [ reduce using rule 84 (expresion -> expresion .) ]
  ! NUMBER          [ reduce using rule 84 (expresion -> expresion .) ]
  ! FLOAT           [ reduce using rule 84 (expresion -> expresion .) ]
  ! STRING          [ reduce using rule 84 (expresion -> expresion .) ]
  ! TRUE            [ reduce using rule 84 (expresion -> expresion .) ]
  ! FALSE           [ reduce using rule 84 (expresion -> expresion .) ]
  ! VARIABLE        [ reduce using rule 84 (expresion -> expresion .) ]
  ! CONTINUE        [ reduce using rule 84 (expresion -> expresion .) ]
  ! BREAK           [ reduce using rule 84 (expresion -> expresion .) ]
  ! LET             [ reduce using rule 84 (expresion -> expresion .) ]
  ! STRUCT          [ reduce using rule 84 (expresion -> expresion .) ]
  ! FOR             [ reduce using rule 84 (expresion -> expresion .) ]
  ! WHILE           [ reduce using rule 84 (expresion -> expresion .) ]
  ! IF              [ reduce using rule 84 (expresion -> expresion .) ]
  ! LOOP            [ reduce using rule 84 (expresion -> expresion .) ]
  ! ARRAY           [ reduce using rule 84 (expresion -> expresion .) ]
  ! BITAND          [ reduce using rule 84 (expresion -> expresion .) ]
  ! LPAREN          [ reduce using rule 84 (expresion -> expresion .) ]
  ! VEC             [ reduce using rule 84 (expresion -> expresion .) ]
  ! CONST           [ reduce using rule 84 (expresion -> expresion .) ]
  ! MUT             [ reduce using rule 84 (expresion -> expresion .) ]
  ! FN              [ reduce using rule 84 (expresion -> expresion .) ]
  ! TIMES           [ reduce using rule 84 (expresion -> expresion .) ]
  ! $end            [ reduce using rule 84 (expresion -> expresion .) ]
  ! RBRACKET        [ reduce using rule 84 (expresion -> expresion .) ]


state 9

    (10) item -> continue .

    PRINT           reduce using rule 10 (item -> continue .)
    RETURN          reduce using rule 10 (item -> continue .)
    NUMBER          reduce using rule 10 (item -> continue .)
    FLOAT           reduce using rule 10 (item -> continue .)
    STRING          reduce using rule 10 (item -> continue .)
    TRUE            reduce using rule 10 (item -> continue .)
    FALSE           reduce using rule 10 (item -> continue .)
    VARIABLE        reduce using rule 10 (item -> continue .)
    CONTINUE        reduce using rule 10 (item -> continue .)
    BREAK           reduce using rule 10 (item -> continue .)
    LET             reduce using rule 10 (item -> continue .)
    STRUCT          reduce using rule 10 (item -> continue .)
    FOR             reduce using rule 10 (item -> continue .)
    WHILE           reduce using rule 10 (item -> continue .)
    IF              reduce using rule 10 (item -> continue .)
    LOOP            reduce using rule 10 (item -> continue .)
    ARRAY           reduce using rule 10 (item -> continue .)
    BITAND          reduce using rule 10 (item -> continue .)
    LPAREN          reduce using rule 10 (item -> continue .)
    VEC             reduce using rule 10 (item -> continue .)
    CONST           reduce using rule 10 (item -> continue .)
    MUT             reduce using rule 10 (item -> continue .)
    FN              reduce using rule 10 (item -> continue .)
    TIMES           reduce using rule 10 (item -> continue .)
    $end            reduce using rule 10 (item -> continue .)
    RBRACKET        reduce using rule 10 (item -> continue .)


state 10

    (11) item -> break .

    PRINT           reduce using rule 11 (item -> break .)
    RETURN          reduce using rule 11 (item -> break .)
    NUMBER          reduce using rule 11 (item -> break .)
    FLOAT           reduce using rule 11 (item -> break .)
    STRING          reduce using rule 11 (item -> break .)
    TRUE            reduce using rule 11 (item -> break .)
    FALSE           reduce using rule 11 (item -> break .)
    VARIABLE        reduce using rule 11 (item -> break .)
    CONTINUE        reduce using rule 11 (item -> break .)
    BREAK           reduce using rule 11 (item -> break .)
    LET             reduce using rule 11 (item -> break .)
    STRUCT          reduce using rule 11 (item -> break .)
    FOR             reduce using rule 11 (item -> break .)
    WHILE           reduce using rule 11 (item -> break .)
    IF              reduce using rule 11 (item -> break .)
    LOOP            reduce using rule 11 (item -> break .)
    ARRAY           reduce using rule 11 (item -> break .)
    BITAND          reduce using rule 11 (item -> break .)
    LPAREN          reduce using rule 11 (item -> break .)
    VEC             reduce using rule 11 (item -> break .)
    CONST           reduce using rule 11 (item -> break .)
    MUT             reduce using rule 11 (item -> break .)
    FN              reduce using rule 11 (item -> break .)
    TIMES           reduce using rule 11 (item -> break .)
    $end            reduce using rule 11 (item -> break .)
    RBRACKET        reduce using rule 11 (item -> break .)


state 11

    (12) item -> funcionesesdata .

    PRINT           reduce using rule 12 (item -> funcionesesdata .)
    RETURN          reduce using rule 12 (item -> funcionesesdata .)
    NUMBER          reduce using rule 12 (item -> funcionesesdata .)
    FLOAT           reduce using rule 12 (item -> funcionesesdata .)
    STRING          reduce using rule 12 (item -> funcionesesdata .)
    TRUE            reduce using rule 12 (item -> funcionesesdata .)
    FALSE           reduce using rule 12 (item -> funcionesesdata .)
    VARIABLE        reduce using rule 12 (item -> funcionesesdata .)
    CONTINUE        reduce using rule 12 (item -> funcionesesdata .)
    BREAK           reduce using rule 12 (item -> funcionesesdata .)
    LET             reduce using rule 12 (item -> funcionesesdata .)
    STRUCT          reduce using rule 12 (item -> funcionesesdata .)
    FOR             reduce using rule 12 (item -> funcionesesdata .)
    WHILE           reduce using rule 12 (item -> funcionesesdata .)
    IF              reduce using rule 12 (item -> funcionesesdata .)
    LOOP            reduce using rule 12 (item -> funcionesesdata .)
    ARRAY           reduce using rule 12 (item -> funcionesesdata .)
    BITAND          reduce using rule 12 (item -> funcionesesdata .)
    LPAREN          reduce using rule 12 (item -> funcionesesdata .)
    VEC             reduce using rule 12 (item -> funcionesesdata .)
    CONST           reduce using rule 12 (item -> funcionesesdata .)
    MUT             reduce using rule 12 (item -> funcionesesdata .)
    FN              reduce using rule 12 (item -> funcionesesdata .)
    TIMES           reduce using rule 12 (item -> funcionesesdata .)
    $end            reduce using rule 12 (item -> funcionesesdata .)
    RBRACKET        reduce using rule 12 (item -> funcionesesdata .)


state 12

    (13) item -> RETURN . expresion SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 60
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 13

    (24) definicion -> definicionvariable .
    (87) expresion -> definicionvariable .

  ! reduce/reduce conflict for PRINT resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for RETURN resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for NUMBER resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for FLOAT resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for STRING resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for TRUE resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for FALSE resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for BREAK resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for LET resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for STRUCT resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for FOR resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for WHILE resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for IF resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for LOOP resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for ARRAY resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for BITAND resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for LPAREN resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for VEC resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for CONST resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for MUT resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for FN resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for TIMES resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for $end resolved using rule 24 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 24 (definicion -> definicionvariable .)
    PRINT           reduce using rule 24 (definicion -> definicionvariable .)
    RETURN          reduce using rule 24 (definicion -> definicionvariable .)
    NUMBER          reduce using rule 24 (definicion -> definicionvariable .)
    FLOAT           reduce using rule 24 (definicion -> definicionvariable .)
    STRING          reduce using rule 24 (definicion -> definicionvariable .)
    TRUE            reduce using rule 24 (definicion -> definicionvariable .)
    FALSE           reduce using rule 24 (definicion -> definicionvariable .)
    VARIABLE        reduce using rule 24 (definicion -> definicionvariable .)
    CONTINUE        reduce using rule 24 (definicion -> definicionvariable .)
    BREAK           reduce using rule 24 (definicion -> definicionvariable .)
    LET             reduce using rule 24 (definicion -> definicionvariable .)
    STRUCT          reduce using rule 24 (definicion -> definicionvariable .)
    FOR             reduce using rule 24 (definicion -> definicionvariable .)
    WHILE           reduce using rule 24 (definicion -> definicionvariable .)
    IF              reduce using rule 24 (definicion -> definicionvariable .)
    LOOP            reduce using rule 24 (definicion -> definicionvariable .)
    ARRAY           reduce using rule 24 (definicion -> definicionvariable .)
    BITAND          reduce using rule 24 (definicion -> definicionvariable .)
    LPAREN          reduce using rule 24 (definicion -> definicionvariable .)
    VEC             reduce using rule 24 (definicion -> definicionvariable .)
    CONST           reduce using rule 24 (definicion -> definicionvariable .)
    MUT             reduce using rule 24 (definicion -> definicionvariable .)
    FN              reduce using rule 24 (definicion -> definicionvariable .)
    TIMES           reduce using rule 24 (definicion -> definicionvariable .)
    $end            reduce using rule 24 (definicion -> definicionvariable .)
    RBRACKET        reduce using rule 24 (definicion -> definicionvariable .)
    SEMICOLON       reduce using rule 87 (expresion -> definicionvariable .)

  ! PRINT           [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! RETURN          [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! NUMBER          [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! FLOAT           [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! STRING          [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! TRUE            [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! FALSE           [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! VARIABLE        [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! CONTINUE        [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! BREAK           [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! LET             [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! STRUCT          [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! FOR             [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! WHILE           [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! IF              [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! LOOP            [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! ARRAY           [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! BITAND          [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! LPAREN          [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! VEC             [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! CONST           [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! MUT             [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! FN              [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! TIMES           [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! $end            [ reduce using rule 87 (expresion -> definicionvariable .) ]
  ! RBRACKET        [ reduce using rule 87 (expresion -> definicionvariable .) ]


state 14

    (25) definicion -> definicionestructura .

    PRINT           reduce using rule 25 (definicion -> definicionestructura .)
    RETURN          reduce using rule 25 (definicion -> definicionestructura .)
    NUMBER          reduce using rule 25 (definicion -> definicionestructura .)
    FLOAT           reduce using rule 25 (definicion -> definicionestructura .)
    STRING          reduce using rule 25 (definicion -> definicionestructura .)
    TRUE            reduce using rule 25 (definicion -> definicionestructura .)
    FALSE           reduce using rule 25 (definicion -> definicionestructura .)
    VARIABLE        reduce using rule 25 (definicion -> definicionestructura .)
    CONTINUE        reduce using rule 25 (definicion -> definicionestructura .)
    BREAK           reduce using rule 25 (definicion -> definicionestructura .)
    LET             reduce using rule 25 (definicion -> definicionestructura .)
    STRUCT          reduce using rule 25 (definicion -> definicionestructura .)
    FOR             reduce using rule 25 (definicion -> definicionestructura .)
    WHILE           reduce using rule 25 (definicion -> definicionestructura .)
    IF              reduce using rule 25 (definicion -> definicionestructura .)
    LOOP            reduce using rule 25 (definicion -> definicionestructura .)
    ARRAY           reduce using rule 25 (definicion -> definicionestructura .)
    BITAND          reduce using rule 25 (definicion -> definicionestructura .)
    LPAREN          reduce using rule 25 (definicion -> definicionestructura .)
    VEC             reduce using rule 25 (definicion -> definicionestructura .)
    CONST           reduce using rule 25 (definicion -> definicionestructura .)
    MUT             reduce using rule 25 (definicion -> definicionestructura .)
    FN              reduce using rule 25 (definicion -> definicionestructura .)
    TIMES           reduce using rule 25 (definicion -> definicionestructura .)
    $end            reduce using rule 25 (definicion -> definicionestructura .)
    RBRACKET        reduce using rule 25 (definicion -> definicionestructura .)


state 15

    (26) definicion -> definicionfuncion .

    PRINT           reduce using rule 26 (definicion -> definicionfuncion .)
    RETURN          reduce using rule 26 (definicion -> definicionfuncion .)
    NUMBER          reduce using rule 26 (definicion -> definicionfuncion .)
    FLOAT           reduce using rule 26 (definicion -> definicionfuncion .)
    STRING          reduce using rule 26 (definicion -> definicionfuncion .)
    TRUE            reduce using rule 26 (definicion -> definicionfuncion .)
    FALSE           reduce using rule 26 (definicion -> definicionfuncion .)
    VARIABLE        reduce using rule 26 (definicion -> definicionfuncion .)
    CONTINUE        reduce using rule 26 (definicion -> definicionfuncion .)
    BREAK           reduce using rule 26 (definicion -> definicionfuncion .)
    LET             reduce using rule 26 (definicion -> definicionfuncion .)
    STRUCT          reduce using rule 26 (definicion -> definicionfuncion .)
    FOR             reduce using rule 26 (definicion -> definicionfuncion .)
    WHILE           reduce using rule 26 (definicion -> definicionfuncion .)
    IF              reduce using rule 26 (definicion -> definicionfuncion .)
    LOOP            reduce using rule 26 (definicion -> definicionfuncion .)
    ARRAY           reduce using rule 26 (definicion -> definicionfuncion .)
    BITAND          reduce using rule 26 (definicion -> definicionfuncion .)
    LPAREN          reduce using rule 26 (definicion -> definicionfuncion .)
    VEC             reduce using rule 26 (definicion -> definicionfuncion .)
    CONST           reduce using rule 26 (definicion -> definicionfuncion .)
    MUT             reduce using rule 26 (definicion -> definicionfuncion .)
    FN              reduce using rule 26 (definicion -> definicionfuncion .)
    TIMES           reduce using rule 26 (definicion -> definicionfuncion .)
    $end            reduce using rule 26 (definicion -> definicionfuncion .)
    RBRACKET        reduce using rule 26 (definicion -> definicionfuncion .)


state 16

    (27) definicion -> definicionestructuradatos .

    PRINT           reduce using rule 27 (definicion -> definicionestructuradatos .)
    RETURN          reduce using rule 27 (definicion -> definicionestructuradatos .)
    NUMBER          reduce using rule 27 (definicion -> definicionestructuradatos .)
    FLOAT           reduce using rule 27 (definicion -> definicionestructuradatos .)
    STRING          reduce using rule 27 (definicion -> definicionestructuradatos .)
    TRUE            reduce using rule 27 (definicion -> definicionestructuradatos .)
    FALSE           reduce using rule 27 (definicion -> definicionestructuradatos .)
    VARIABLE        reduce using rule 27 (definicion -> definicionestructuradatos .)
    CONTINUE        reduce using rule 27 (definicion -> definicionestructuradatos .)
    BREAK           reduce using rule 27 (definicion -> definicionestructuradatos .)
    LET             reduce using rule 27 (definicion -> definicionestructuradatos .)
    STRUCT          reduce using rule 27 (definicion -> definicionestructuradatos .)
    FOR             reduce using rule 27 (definicion -> definicionestructuradatos .)
    WHILE           reduce using rule 27 (definicion -> definicionestructuradatos .)
    IF              reduce using rule 27 (definicion -> definicionestructuradatos .)
    LOOP            reduce using rule 27 (definicion -> definicionestructuradatos .)
    ARRAY           reduce using rule 27 (definicion -> definicionestructuradatos .)
    BITAND          reduce using rule 27 (definicion -> definicionestructuradatos .)
    LPAREN          reduce using rule 27 (definicion -> definicionestructuradatos .)
    VEC             reduce using rule 27 (definicion -> definicionestructuradatos .)
    CONST           reduce using rule 27 (definicion -> definicionestructuradatos .)
    MUT             reduce using rule 27 (definicion -> definicionestructuradatos .)
    FN              reduce using rule 27 (definicion -> definicionestructuradatos .)
    TIMES           reduce using rule 27 (definicion -> definicionestructuradatos .)
    $end            reduce using rule 27 (definicion -> definicionestructuradatos .)
    RBRACKET        reduce using rule 27 (definicion -> definicionestructuradatos .)


state 17

    (14) estructuracontrol -> for .

    PRINT           reduce using rule 14 (estructuracontrol -> for .)
    RETURN          reduce using rule 14 (estructuracontrol -> for .)
    NUMBER          reduce using rule 14 (estructuracontrol -> for .)
    FLOAT           reduce using rule 14 (estructuracontrol -> for .)
    STRING          reduce using rule 14 (estructuracontrol -> for .)
    TRUE            reduce using rule 14 (estructuracontrol -> for .)
    FALSE           reduce using rule 14 (estructuracontrol -> for .)
    VARIABLE        reduce using rule 14 (estructuracontrol -> for .)
    CONTINUE        reduce using rule 14 (estructuracontrol -> for .)
    BREAK           reduce using rule 14 (estructuracontrol -> for .)
    LET             reduce using rule 14 (estructuracontrol -> for .)
    STRUCT          reduce using rule 14 (estructuracontrol -> for .)
    FOR             reduce using rule 14 (estructuracontrol -> for .)
    WHILE           reduce using rule 14 (estructuracontrol -> for .)
    IF              reduce using rule 14 (estructuracontrol -> for .)
    LOOP            reduce using rule 14 (estructuracontrol -> for .)
    ARRAY           reduce using rule 14 (estructuracontrol -> for .)
    BITAND          reduce using rule 14 (estructuracontrol -> for .)
    LPAREN          reduce using rule 14 (estructuracontrol -> for .)
    VEC             reduce using rule 14 (estructuracontrol -> for .)
    CONST           reduce using rule 14 (estructuracontrol -> for .)
    MUT             reduce using rule 14 (estructuracontrol -> for .)
    FN              reduce using rule 14 (estructuracontrol -> for .)
    TIMES           reduce using rule 14 (estructuracontrol -> for .)
    $end            reduce using rule 14 (estructuracontrol -> for .)
    SEMICOLON       reduce using rule 14 (estructuracontrol -> for .)
    LBRACKET        reduce using rule 14 (estructuracontrol -> for .)
    RPAREN          reduce using rule 14 (estructuracontrol -> for .)
    COMMA           reduce using rule 14 (estructuracontrol -> for .)
    RBRACKET        reduce using rule 14 (estructuracontrol -> for .)


state 18

    (15) estructuracontrol -> while .

    PRINT           reduce using rule 15 (estructuracontrol -> while .)
    RETURN          reduce using rule 15 (estructuracontrol -> while .)
    NUMBER          reduce using rule 15 (estructuracontrol -> while .)
    FLOAT           reduce using rule 15 (estructuracontrol -> while .)
    STRING          reduce using rule 15 (estructuracontrol -> while .)
    TRUE            reduce using rule 15 (estructuracontrol -> while .)
    FALSE           reduce using rule 15 (estructuracontrol -> while .)
    VARIABLE        reduce using rule 15 (estructuracontrol -> while .)
    CONTINUE        reduce using rule 15 (estructuracontrol -> while .)
    BREAK           reduce using rule 15 (estructuracontrol -> while .)
    LET             reduce using rule 15 (estructuracontrol -> while .)
    STRUCT          reduce using rule 15 (estructuracontrol -> while .)
    FOR             reduce using rule 15 (estructuracontrol -> while .)
    WHILE           reduce using rule 15 (estructuracontrol -> while .)
    IF              reduce using rule 15 (estructuracontrol -> while .)
    LOOP            reduce using rule 15 (estructuracontrol -> while .)
    ARRAY           reduce using rule 15 (estructuracontrol -> while .)
    BITAND          reduce using rule 15 (estructuracontrol -> while .)
    LPAREN          reduce using rule 15 (estructuracontrol -> while .)
    VEC             reduce using rule 15 (estructuracontrol -> while .)
    CONST           reduce using rule 15 (estructuracontrol -> while .)
    MUT             reduce using rule 15 (estructuracontrol -> while .)
    FN              reduce using rule 15 (estructuracontrol -> while .)
    TIMES           reduce using rule 15 (estructuracontrol -> while .)
    $end            reduce using rule 15 (estructuracontrol -> while .)
    SEMICOLON       reduce using rule 15 (estructuracontrol -> while .)
    LBRACKET        reduce using rule 15 (estructuracontrol -> while .)
    RPAREN          reduce using rule 15 (estructuracontrol -> while .)
    COMMA           reduce using rule 15 (estructuracontrol -> while .)
    RBRACKET        reduce using rule 15 (estructuracontrol -> while .)


state 19

    (16) estructuracontrol -> if .

    PRINT           reduce using rule 16 (estructuracontrol -> if .)
    RETURN          reduce using rule 16 (estructuracontrol -> if .)
    NUMBER          reduce using rule 16 (estructuracontrol -> if .)
    FLOAT           reduce using rule 16 (estructuracontrol -> if .)
    STRING          reduce using rule 16 (estructuracontrol -> if .)
    TRUE            reduce using rule 16 (estructuracontrol -> if .)
    FALSE           reduce using rule 16 (estructuracontrol -> if .)
    VARIABLE        reduce using rule 16 (estructuracontrol -> if .)
    CONTINUE        reduce using rule 16 (estructuracontrol -> if .)
    BREAK           reduce using rule 16 (estructuracontrol -> if .)
    LET             reduce using rule 16 (estructuracontrol -> if .)
    STRUCT          reduce using rule 16 (estructuracontrol -> if .)
    FOR             reduce using rule 16 (estructuracontrol -> if .)
    WHILE           reduce using rule 16 (estructuracontrol -> if .)
    IF              reduce using rule 16 (estructuracontrol -> if .)
    LOOP            reduce using rule 16 (estructuracontrol -> if .)
    ARRAY           reduce using rule 16 (estructuracontrol -> if .)
    BITAND          reduce using rule 16 (estructuracontrol -> if .)
    LPAREN          reduce using rule 16 (estructuracontrol -> if .)
    VEC             reduce using rule 16 (estructuracontrol -> if .)
    CONST           reduce using rule 16 (estructuracontrol -> if .)
    MUT             reduce using rule 16 (estructuracontrol -> if .)
    FN              reduce using rule 16 (estructuracontrol -> if .)
    TIMES           reduce using rule 16 (estructuracontrol -> if .)
    $end            reduce using rule 16 (estructuracontrol -> if .)
    SEMICOLON       reduce using rule 16 (estructuracontrol -> if .)
    LBRACKET        reduce using rule 16 (estructuracontrol -> if .)
    RPAREN          reduce using rule 16 (estructuracontrol -> if .)
    COMMA           reduce using rule 16 (estructuracontrol -> if .)
    RBRACKET        reduce using rule 16 (estructuracontrol -> if .)


state 20

    (17) estructuracontrol -> loop .

    PRINT           reduce using rule 17 (estructuracontrol -> loop .)
    RETURN          reduce using rule 17 (estructuracontrol -> loop .)
    NUMBER          reduce using rule 17 (estructuracontrol -> loop .)
    FLOAT           reduce using rule 17 (estructuracontrol -> loop .)
    STRING          reduce using rule 17 (estructuracontrol -> loop .)
    TRUE            reduce using rule 17 (estructuracontrol -> loop .)
    FALSE           reduce using rule 17 (estructuracontrol -> loop .)
    VARIABLE        reduce using rule 17 (estructuracontrol -> loop .)
    CONTINUE        reduce using rule 17 (estructuracontrol -> loop .)
    BREAK           reduce using rule 17 (estructuracontrol -> loop .)
    LET             reduce using rule 17 (estructuracontrol -> loop .)
    STRUCT          reduce using rule 17 (estructuracontrol -> loop .)
    FOR             reduce using rule 17 (estructuracontrol -> loop .)
    WHILE           reduce using rule 17 (estructuracontrol -> loop .)
    IF              reduce using rule 17 (estructuracontrol -> loop .)
    LOOP            reduce using rule 17 (estructuracontrol -> loop .)
    ARRAY           reduce using rule 17 (estructuracontrol -> loop .)
    BITAND          reduce using rule 17 (estructuracontrol -> loop .)
    LPAREN          reduce using rule 17 (estructuracontrol -> loop .)
    VEC             reduce using rule 17 (estructuracontrol -> loop .)
    CONST           reduce using rule 17 (estructuracontrol -> loop .)
    MUT             reduce using rule 17 (estructuracontrol -> loop .)
    FN              reduce using rule 17 (estructuracontrol -> loop .)
    TIMES           reduce using rule 17 (estructuracontrol -> loop .)
    $end            reduce using rule 17 (estructuracontrol -> loop .)
    SEMICOLON       reduce using rule 17 (estructuracontrol -> loop .)
    LBRACKET        reduce using rule 17 (estructuracontrol -> loop .)
    RPAREN          reduce using rule 17 (estructuracontrol -> loop .)
    COMMA           reduce using rule 17 (estructuracontrol -> loop .)
    RBRACKET        reduce using rule 17 (estructuracontrol -> loop .)


state 21

    (77) expresion -> ops .

    SEMICOLON       reduce using rule 77 (expresion -> ops .)
    PRINT           reduce using rule 77 (expresion -> ops .)
    RETURN          reduce using rule 77 (expresion -> ops .)
    NUMBER          reduce using rule 77 (expresion -> ops .)
    FLOAT           reduce using rule 77 (expresion -> ops .)
    STRING          reduce using rule 77 (expresion -> ops .)
    TRUE            reduce using rule 77 (expresion -> ops .)
    FALSE           reduce using rule 77 (expresion -> ops .)
    VARIABLE        reduce using rule 77 (expresion -> ops .)
    CONTINUE        reduce using rule 77 (expresion -> ops .)
    BREAK           reduce using rule 77 (expresion -> ops .)
    LET             reduce using rule 77 (expresion -> ops .)
    STRUCT          reduce using rule 77 (expresion -> ops .)
    FOR             reduce using rule 77 (expresion -> ops .)
    WHILE           reduce using rule 77 (expresion -> ops .)
    IF              reduce using rule 77 (expresion -> ops .)
    LOOP            reduce using rule 77 (expresion -> ops .)
    ARRAY           reduce using rule 77 (expresion -> ops .)
    BITAND          reduce using rule 77 (expresion -> ops .)
    LPAREN          reduce using rule 77 (expresion -> ops .)
    VEC             reduce using rule 77 (expresion -> ops .)
    CONST           reduce using rule 77 (expresion -> ops .)
    MUT             reduce using rule 77 (expresion -> ops .)
    FN              reduce using rule 77 (expresion -> ops .)
    TIMES           reduce using rule 77 (expresion -> ops .)
    $end            reduce using rule 77 (expresion -> ops .)
    LBRACKET        reduce using rule 77 (expresion -> ops .)
    RPAREN          reduce using rule 77 (expresion -> ops .)
    COMMA           reduce using rule 77 (expresion -> ops .)
    RBRACKET        reduce using rule 77 (expresion -> ops .)


state 22

    (78) expresion -> NUMBER .
    (105) operandos -> NUMBER .

  ! reduce/reduce conflict for COMMA resolved using rule 78 (expresion -> NUMBER .)
  ! reduce/reduce conflict for TIMES resolved using rule 78 (expresion -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 78 (expresion -> NUMBER .)
    SEMICOLON       reduce using rule 78 (expresion -> NUMBER .)
    PRINT           reduce using rule 78 (expresion -> NUMBER .)
    RETURN          reduce using rule 78 (expresion -> NUMBER .)
    NUMBER          reduce using rule 78 (expresion -> NUMBER .)
    FLOAT           reduce using rule 78 (expresion -> NUMBER .)
    STRING          reduce using rule 78 (expresion -> NUMBER .)
    TRUE            reduce using rule 78 (expresion -> NUMBER .)
    FALSE           reduce using rule 78 (expresion -> NUMBER .)
    VARIABLE        reduce using rule 78 (expresion -> NUMBER .)
    CONTINUE        reduce using rule 78 (expresion -> NUMBER .)
    BREAK           reduce using rule 78 (expresion -> NUMBER .)
    LET             reduce using rule 78 (expresion -> NUMBER .)
    STRUCT          reduce using rule 78 (expresion -> NUMBER .)
    FOR             reduce using rule 78 (expresion -> NUMBER .)
    WHILE           reduce using rule 78 (expresion -> NUMBER .)
    IF              reduce using rule 78 (expresion -> NUMBER .)
    LOOP            reduce using rule 78 (expresion -> NUMBER .)
    ARRAY           reduce using rule 78 (expresion -> NUMBER .)
    BITAND          reduce using rule 78 (expresion -> NUMBER .)
    LPAREN          reduce using rule 78 (expresion -> NUMBER .)
    VEC             reduce using rule 78 (expresion -> NUMBER .)
    CONST           reduce using rule 78 (expresion -> NUMBER .)
    MUT             reduce using rule 78 (expresion -> NUMBER .)
    FN              reduce using rule 78 (expresion -> NUMBER .)
    TIMES           reduce using rule 78 (expresion -> NUMBER .)
    $end            reduce using rule 78 (expresion -> NUMBER .)
    LBRACKET        reduce using rule 78 (expresion -> NUMBER .)
    RPAREN          reduce using rule 78 (expresion -> NUMBER .)
    COMMA           reduce using rule 78 (expresion -> NUMBER .)
    RBRACKET        reduce using rule 78 (expresion -> NUMBER .)
    PLUS            reduce using rule 105 (operandos -> NUMBER .)
    MINUS           reduce using rule 105 (operandos -> NUMBER .)
    DIVIDE          reduce using rule 105 (operandos -> NUMBER .)
    RDIAMOND        reduce using rule 105 (operandos -> NUMBER .)
    LDIAMOND        reduce using rule 105 (operandos -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 105 (operandos -> NUMBER .)
    NOT_EQUAL       reduce using rule 105 (operandos -> NUMBER .)
    LESS_EQUAL      reduce using rule 105 (operandos -> NUMBER .)
    GREATER_EQUAL   reduce using rule 105 (operandos -> NUMBER .)
    PLUS_EQUAL      reduce using rule 105 (operandos -> NUMBER .)

  ! COMMA           [ reduce using rule 105 (operandos -> NUMBER .) ]
  ! TIMES           [ reduce using rule 105 (operandos -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 105 (operandos -> NUMBER .) ]


state 23

    (79) expresion -> FLOAT .
    (106) operandos -> FLOAT .

  ! reduce/reduce conflict for COMMA resolved using rule 79 (expresion -> FLOAT .)
  ! reduce/reduce conflict for TIMES resolved using rule 79 (expresion -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 79 (expresion -> FLOAT .)
    SEMICOLON       reduce using rule 79 (expresion -> FLOAT .)
    PRINT           reduce using rule 79 (expresion -> FLOAT .)
    RETURN          reduce using rule 79 (expresion -> FLOAT .)
    NUMBER          reduce using rule 79 (expresion -> FLOAT .)
    FLOAT           reduce using rule 79 (expresion -> FLOAT .)
    STRING          reduce using rule 79 (expresion -> FLOAT .)
    TRUE            reduce using rule 79 (expresion -> FLOAT .)
    FALSE           reduce using rule 79 (expresion -> FLOAT .)
    VARIABLE        reduce using rule 79 (expresion -> FLOAT .)
    CONTINUE        reduce using rule 79 (expresion -> FLOAT .)
    BREAK           reduce using rule 79 (expresion -> FLOAT .)
    LET             reduce using rule 79 (expresion -> FLOAT .)
    STRUCT          reduce using rule 79 (expresion -> FLOAT .)
    FOR             reduce using rule 79 (expresion -> FLOAT .)
    WHILE           reduce using rule 79 (expresion -> FLOAT .)
    IF              reduce using rule 79 (expresion -> FLOAT .)
    LOOP            reduce using rule 79 (expresion -> FLOAT .)
    ARRAY           reduce using rule 79 (expresion -> FLOAT .)
    BITAND          reduce using rule 79 (expresion -> FLOAT .)
    LPAREN          reduce using rule 79 (expresion -> FLOAT .)
    VEC             reduce using rule 79 (expresion -> FLOAT .)
    CONST           reduce using rule 79 (expresion -> FLOAT .)
    MUT             reduce using rule 79 (expresion -> FLOAT .)
    FN              reduce using rule 79 (expresion -> FLOAT .)
    TIMES           reduce using rule 79 (expresion -> FLOAT .)
    $end            reduce using rule 79 (expresion -> FLOAT .)
    LBRACKET        reduce using rule 79 (expresion -> FLOAT .)
    RPAREN          reduce using rule 79 (expresion -> FLOAT .)
    COMMA           reduce using rule 79 (expresion -> FLOAT .)
    RBRACKET        reduce using rule 79 (expresion -> FLOAT .)
    PLUS            reduce using rule 106 (operandos -> FLOAT .)
    MINUS           reduce using rule 106 (operandos -> FLOAT .)
    DIVIDE          reduce using rule 106 (operandos -> FLOAT .)
    RDIAMOND        reduce using rule 106 (operandos -> FLOAT .)
    LDIAMOND        reduce using rule 106 (operandos -> FLOAT .)
    EQUAL_EQUAL     reduce using rule 106 (operandos -> FLOAT .)
    NOT_EQUAL       reduce using rule 106 (operandos -> FLOAT .)
    LESS_EQUAL      reduce using rule 106 (operandos -> FLOAT .)
    GREATER_EQUAL   reduce using rule 106 (operandos -> FLOAT .)
    PLUS_EQUAL      reduce using rule 106 (operandos -> FLOAT .)

  ! COMMA           [ reduce using rule 106 (operandos -> FLOAT .) ]
  ! TIMES           [ reduce using rule 106 (operandos -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 106 (operandos -> FLOAT .) ]


state 24

    (81) expresion -> TRUE .

    SEMICOLON       reduce using rule 81 (expresion -> TRUE .)
    PRINT           reduce using rule 81 (expresion -> TRUE .)
    RETURN          reduce using rule 81 (expresion -> TRUE .)
    NUMBER          reduce using rule 81 (expresion -> TRUE .)
    FLOAT           reduce using rule 81 (expresion -> TRUE .)
    STRING          reduce using rule 81 (expresion -> TRUE .)
    TRUE            reduce using rule 81 (expresion -> TRUE .)
    FALSE           reduce using rule 81 (expresion -> TRUE .)
    VARIABLE        reduce using rule 81 (expresion -> TRUE .)
    CONTINUE        reduce using rule 81 (expresion -> TRUE .)
    BREAK           reduce using rule 81 (expresion -> TRUE .)
    LET             reduce using rule 81 (expresion -> TRUE .)
    STRUCT          reduce using rule 81 (expresion -> TRUE .)
    FOR             reduce using rule 81 (expresion -> TRUE .)
    WHILE           reduce using rule 81 (expresion -> TRUE .)
    IF              reduce using rule 81 (expresion -> TRUE .)
    LOOP            reduce using rule 81 (expresion -> TRUE .)
    ARRAY           reduce using rule 81 (expresion -> TRUE .)
    BITAND          reduce using rule 81 (expresion -> TRUE .)
    LPAREN          reduce using rule 81 (expresion -> TRUE .)
    VEC             reduce using rule 81 (expresion -> TRUE .)
    CONST           reduce using rule 81 (expresion -> TRUE .)
    MUT             reduce using rule 81 (expresion -> TRUE .)
    FN              reduce using rule 81 (expresion -> TRUE .)
    TIMES           reduce using rule 81 (expresion -> TRUE .)
    $end            reduce using rule 81 (expresion -> TRUE .)
    LBRACKET        reduce using rule 81 (expresion -> TRUE .)
    RPAREN          reduce using rule 81 (expresion -> TRUE .)
    COMMA           reduce using rule 81 (expresion -> TRUE .)
    RBRACKET        reduce using rule 81 (expresion -> TRUE .)


state 25

    (82) expresion -> FALSE .

    SEMICOLON       reduce using rule 82 (expresion -> FALSE .)
    PRINT           reduce using rule 82 (expresion -> FALSE .)
    RETURN          reduce using rule 82 (expresion -> FALSE .)
    NUMBER          reduce using rule 82 (expresion -> FALSE .)
    FLOAT           reduce using rule 82 (expresion -> FALSE .)
    STRING          reduce using rule 82 (expresion -> FALSE .)
    TRUE            reduce using rule 82 (expresion -> FALSE .)
    FALSE           reduce using rule 82 (expresion -> FALSE .)
    VARIABLE        reduce using rule 82 (expresion -> FALSE .)
    CONTINUE        reduce using rule 82 (expresion -> FALSE .)
    BREAK           reduce using rule 82 (expresion -> FALSE .)
    LET             reduce using rule 82 (expresion -> FALSE .)
    STRUCT          reduce using rule 82 (expresion -> FALSE .)
    FOR             reduce using rule 82 (expresion -> FALSE .)
    WHILE           reduce using rule 82 (expresion -> FALSE .)
    IF              reduce using rule 82 (expresion -> FALSE .)
    LOOP            reduce using rule 82 (expresion -> FALSE .)
    ARRAY           reduce using rule 82 (expresion -> FALSE .)
    BITAND          reduce using rule 82 (expresion -> FALSE .)
    LPAREN          reduce using rule 82 (expresion -> FALSE .)
    VEC             reduce using rule 82 (expresion -> FALSE .)
    CONST           reduce using rule 82 (expresion -> FALSE .)
    MUT             reduce using rule 82 (expresion -> FALSE .)
    FN              reduce using rule 82 (expresion -> FALSE .)
    TIMES           reduce using rule 82 (expresion -> FALSE .)
    $end            reduce using rule 82 (expresion -> FALSE .)
    LBRACKET        reduce using rule 82 (expresion -> FALSE .)
    RPAREN          reduce using rule 82 (expresion -> FALSE .)
    COMMA           reduce using rule 82 (expresion -> FALSE .)
    RBRACKET        reduce using rule 82 (expresion -> FALSE .)


state 26

    (83) expresion -> VARIABLE .
    (54) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (55) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (166) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (170) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (89) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN
    (153) funcionesvector -> VARIABLE . DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> VARIABLE . DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> VARIABLE . DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> VARIABLE . DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> VARIABLE . DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> VARIABLE . DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> VARIABLE . DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> VARIABLE . DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> VARIABLE . DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> VARIABLE . DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> VARIABLE . DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> VARIABLE . DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> VARIABLE . DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> VARIABLE . DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> VARIABLE . DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> VARIABLE . DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> VARIABLE . DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> VARIABLE . DOT ITER LPAREN RPAREN
    (121) funcionesarray -> VARIABLE . DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> VARIABLE . DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> VARIABLE . DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> VARIABLE . DOT ITER LPAREN RPAREN SEMICOLON
    (107) operandos -> VARIABLE .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 83 (expresion -> VARIABLE .)
    SEMICOLON       reduce using rule 83 (expresion -> VARIABLE .)
    PRINT           reduce using rule 83 (expresion -> VARIABLE .)
    RETURN          reduce using rule 83 (expresion -> VARIABLE .)
    NUMBER          reduce using rule 83 (expresion -> VARIABLE .)
    FLOAT           reduce using rule 83 (expresion -> VARIABLE .)
    STRING          reduce using rule 83 (expresion -> VARIABLE .)
    TRUE            reduce using rule 83 (expresion -> VARIABLE .)
    FALSE           reduce using rule 83 (expresion -> VARIABLE .)
    VARIABLE        reduce using rule 83 (expresion -> VARIABLE .)
    CONTINUE        reduce using rule 83 (expresion -> VARIABLE .)
    BREAK           reduce using rule 83 (expresion -> VARIABLE .)
    LET             reduce using rule 83 (expresion -> VARIABLE .)
    STRUCT          reduce using rule 83 (expresion -> VARIABLE .)
    FOR             reduce using rule 83 (expresion -> VARIABLE .)
    WHILE           reduce using rule 83 (expresion -> VARIABLE .)
    IF              reduce using rule 83 (expresion -> VARIABLE .)
    LOOP            reduce using rule 83 (expresion -> VARIABLE .)
    ARRAY           reduce using rule 83 (expresion -> VARIABLE .)
    BITAND          reduce using rule 83 (expresion -> VARIABLE .)
    VEC             reduce using rule 83 (expresion -> VARIABLE .)
    CONST           reduce using rule 83 (expresion -> VARIABLE .)
    MUT             reduce using rule 83 (expresion -> VARIABLE .)
    FN              reduce using rule 83 (expresion -> VARIABLE .)
    TIMES           reduce using rule 83 (expresion -> VARIABLE .)
    $end            reduce using rule 83 (expresion -> VARIABLE .)
    RBRACKET        reduce using rule 83 (expresion -> VARIABLE .)
    EQUAL           shift and go to state 65
    DOT             shift and go to state 66
    LPAREN          shift and go to state 67
    COMMA           reduce using rule 107 (operandos -> VARIABLE .)
    PLUS            reduce using rule 107 (operandos -> VARIABLE .)
    MINUS           reduce using rule 107 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 107 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 107 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 107 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 107 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)

  ! LPAREN          [ reduce using rule 83 (expresion -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 107 (operandos -> VARIABLE .) ]


state 27

    (85) expresion -> opbasicas .
    (109) operandos -> opbasicas .

  ! reduce/reduce conflict for COMMA resolved using rule 85 (expresion -> opbasicas .)
  ! reduce/reduce conflict for TIMES resolved using rule 85 (expresion -> opbasicas .)
  ! reduce/reduce conflict for RPAREN resolved using rule 85 (expresion -> opbasicas .)
    SEMICOLON       reduce using rule 85 (expresion -> opbasicas .)
    PRINT           reduce using rule 85 (expresion -> opbasicas .)
    RETURN          reduce using rule 85 (expresion -> opbasicas .)
    NUMBER          reduce using rule 85 (expresion -> opbasicas .)
    FLOAT           reduce using rule 85 (expresion -> opbasicas .)
    STRING          reduce using rule 85 (expresion -> opbasicas .)
    TRUE            reduce using rule 85 (expresion -> opbasicas .)
    FALSE           reduce using rule 85 (expresion -> opbasicas .)
    VARIABLE        reduce using rule 85 (expresion -> opbasicas .)
    CONTINUE        reduce using rule 85 (expresion -> opbasicas .)
    BREAK           reduce using rule 85 (expresion -> opbasicas .)
    LET             reduce using rule 85 (expresion -> opbasicas .)
    STRUCT          reduce using rule 85 (expresion -> opbasicas .)
    FOR             reduce using rule 85 (expresion -> opbasicas .)
    WHILE           reduce using rule 85 (expresion -> opbasicas .)
    IF              reduce using rule 85 (expresion -> opbasicas .)
    LOOP            reduce using rule 85 (expresion -> opbasicas .)
    ARRAY           reduce using rule 85 (expresion -> opbasicas .)
    BITAND          reduce using rule 85 (expresion -> opbasicas .)
    LPAREN          reduce using rule 85 (expresion -> opbasicas .)
    VEC             reduce using rule 85 (expresion -> opbasicas .)
    CONST           reduce using rule 85 (expresion -> opbasicas .)
    MUT             reduce using rule 85 (expresion -> opbasicas .)
    FN              reduce using rule 85 (expresion -> opbasicas .)
    TIMES           reduce using rule 85 (expresion -> opbasicas .)
    $end            reduce using rule 85 (expresion -> opbasicas .)
    LBRACKET        reduce using rule 85 (expresion -> opbasicas .)
    RPAREN          reduce using rule 85 (expresion -> opbasicas .)
    COMMA           reduce using rule 85 (expresion -> opbasicas .)
    RBRACKET        reduce using rule 85 (expresion -> opbasicas .)
    PLUS            reduce using rule 109 (operandos -> opbasicas .)
    MINUS           reduce using rule 109 (operandos -> opbasicas .)
    DIVIDE          reduce using rule 109 (operandos -> opbasicas .)
    RDIAMOND        reduce using rule 109 (operandos -> opbasicas .)
    LDIAMOND        reduce using rule 109 (operandos -> opbasicas .)
    EQUAL_EQUAL     reduce using rule 109 (operandos -> opbasicas .)
    NOT_EQUAL       reduce using rule 109 (operandos -> opbasicas .)
    LESS_EQUAL      reduce using rule 109 (operandos -> opbasicas .)
    GREATER_EQUAL   reduce using rule 109 (operandos -> opbasicas .)
    PLUS_EQUAL      reduce using rule 109 (operandos -> opbasicas .)

  ! COMMA           [ reduce using rule 109 (operandos -> opbasicas .) ]
  ! TIMES           [ reduce using rule 109 (operandos -> opbasicas .) ]
  ! RPAREN          [ reduce using rule 109 (operandos -> opbasicas .) ]


state 28

    (88) expresion -> llamarfuncion .

    SEMICOLON       reduce using rule 88 (expresion -> llamarfuncion .)
    PRINT           reduce using rule 88 (expresion -> llamarfuncion .)
    RETURN          reduce using rule 88 (expresion -> llamarfuncion .)
    NUMBER          reduce using rule 88 (expresion -> llamarfuncion .)
    FLOAT           reduce using rule 88 (expresion -> llamarfuncion .)
    STRING          reduce using rule 88 (expresion -> llamarfuncion .)
    TRUE            reduce using rule 88 (expresion -> llamarfuncion .)
    FALSE           reduce using rule 88 (expresion -> llamarfuncion .)
    VARIABLE        reduce using rule 88 (expresion -> llamarfuncion .)
    CONTINUE        reduce using rule 88 (expresion -> llamarfuncion .)
    BREAK           reduce using rule 88 (expresion -> llamarfuncion .)
    LET             reduce using rule 88 (expresion -> llamarfuncion .)
    STRUCT          reduce using rule 88 (expresion -> llamarfuncion .)
    FOR             reduce using rule 88 (expresion -> llamarfuncion .)
    WHILE           reduce using rule 88 (expresion -> llamarfuncion .)
    IF              reduce using rule 88 (expresion -> llamarfuncion .)
    LOOP            reduce using rule 88 (expresion -> llamarfuncion .)
    ARRAY           reduce using rule 88 (expresion -> llamarfuncion .)
    BITAND          reduce using rule 88 (expresion -> llamarfuncion .)
    LPAREN          reduce using rule 88 (expresion -> llamarfuncion .)
    VEC             reduce using rule 88 (expresion -> llamarfuncion .)
    CONST           reduce using rule 88 (expresion -> llamarfuncion .)
    MUT             reduce using rule 88 (expresion -> llamarfuncion .)
    FN              reduce using rule 88 (expresion -> llamarfuncion .)
    TIMES           reduce using rule 88 (expresion -> llamarfuncion .)
    $end            reduce using rule 88 (expresion -> llamarfuncion .)
    LBRACKET        reduce using rule 88 (expresion -> llamarfuncion .)
    RPAREN          reduce using rule 88 (expresion -> llamarfuncion .)
    COMMA           reduce using rule 88 (expresion -> llamarfuncion .)
    RBRACKET        reduce using rule 88 (expresion -> llamarfuncion .)


state 29

    (132) continue -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 68


state 30

    (130) break -> BREAK . SEMICOLON
    (131) break -> BREAK . expresion SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    SEMICOLON       shift and go to state 69
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 70
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 31

    (150) funcionesesdata -> funcionesvector .

    PRINT           reduce using rule 150 (funcionesesdata -> funcionesvector .)
    RETURN          reduce using rule 150 (funcionesesdata -> funcionesvector .)
    NUMBER          reduce using rule 150 (funcionesesdata -> funcionesvector .)
    FLOAT           reduce using rule 150 (funcionesesdata -> funcionesvector .)
    STRING          reduce using rule 150 (funcionesesdata -> funcionesvector .)
    TRUE            reduce using rule 150 (funcionesesdata -> funcionesvector .)
    FALSE           reduce using rule 150 (funcionesesdata -> funcionesvector .)
    VARIABLE        reduce using rule 150 (funcionesesdata -> funcionesvector .)
    CONTINUE        reduce using rule 150 (funcionesesdata -> funcionesvector .)
    BREAK           reduce using rule 150 (funcionesesdata -> funcionesvector .)
    LET             reduce using rule 150 (funcionesesdata -> funcionesvector .)
    STRUCT          reduce using rule 150 (funcionesesdata -> funcionesvector .)
    FOR             reduce using rule 150 (funcionesesdata -> funcionesvector .)
    WHILE           reduce using rule 150 (funcionesesdata -> funcionesvector .)
    IF              reduce using rule 150 (funcionesesdata -> funcionesvector .)
    LOOP            reduce using rule 150 (funcionesesdata -> funcionesvector .)
    ARRAY           reduce using rule 150 (funcionesesdata -> funcionesvector .)
    BITAND          reduce using rule 150 (funcionesesdata -> funcionesvector .)
    LPAREN          reduce using rule 150 (funcionesesdata -> funcionesvector .)
    VEC             reduce using rule 150 (funcionesesdata -> funcionesvector .)
    CONST           reduce using rule 150 (funcionesesdata -> funcionesvector .)
    MUT             reduce using rule 150 (funcionesesdata -> funcionesvector .)
    FN              reduce using rule 150 (funcionesesdata -> funcionesvector .)
    TIMES           reduce using rule 150 (funcionesesdata -> funcionesvector .)
    $end            reduce using rule 150 (funcionesesdata -> funcionesvector .)
    RBRACKET        reduce using rule 150 (funcionesesdata -> funcionesvector .)


state 32

    (151) funcionesesdata -> funcioneshashmap .

    PRINT           reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    RETURN          reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    NUMBER          reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    FLOAT           reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    STRING          reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    TRUE            reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    FALSE           reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    VARIABLE        reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    CONTINUE        reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    BREAK           reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    LET             reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    STRUCT          reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    FOR             reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    WHILE           reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    IF              reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    LOOP            reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    ARRAY           reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    BITAND          reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    LPAREN          reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    VEC             reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    CONST           reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    MUT             reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    FN              reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    TIMES           reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    $end            reduce using rule 151 (funcionesesdata -> funcioneshashmap .)
    RBRACKET        reduce using rule 151 (funcionesesdata -> funcioneshashmap .)


state 33

    (152) funcionesesdata -> funcionesarray .

    PRINT           reduce using rule 152 (funcionesesdata -> funcionesarray .)
    RETURN          reduce using rule 152 (funcionesesdata -> funcionesarray .)
    NUMBER          reduce using rule 152 (funcionesesdata -> funcionesarray .)
    FLOAT           reduce using rule 152 (funcionesesdata -> funcionesarray .)
    STRING          reduce using rule 152 (funcionesesdata -> funcionesarray .)
    TRUE            reduce using rule 152 (funcionesesdata -> funcionesarray .)
    FALSE           reduce using rule 152 (funcionesesdata -> funcionesarray .)
    VARIABLE        reduce using rule 152 (funcionesesdata -> funcionesarray .)
    CONTINUE        reduce using rule 152 (funcionesesdata -> funcionesarray .)
    BREAK           reduce using rule 152 (funcionesesdata -> funcionesarray .)
    LET             reduce using rule 152 (funcionesesdata -> funcionesarray .)
    STRUCT          reduce using rule 152 (funcionesesdata -> funcionesarray .)
    FOR             reduce using rule 152 (funcionesesdata -> funcionesarray .)
    WHILE           reduce using rule 152 (funcionesesdata -> funcionesarray .)
    IF              reduce using rule 152 (funcionesesdata -> funcionesarray .)
    LOOP            reduce using rule 152 (funcionesesdata -> funcionesarray .)
    ARRAY           reduce using rule 152 (funcionesesdata -> funcionesarray .)
    BITAND          reduce using rule 152 (funcionesesdata -> funcionesarray .)
    LPAREN          reduce using rule 152 (funcionesesdata -> funcionesarray .)
    VEC             reduce using rule 152 (funcionesesdata -> funcionesarray .)
    CONST           reduce using rule 152 (funcionesesdata -> funcionesarray .)
    MUT             reduce using rule 152 (funcionesesdata -> funcionesarray .)
    FN              reduce using rule 152 (funcionesesdata -> funcionesarray .)
    TIMES           reduce using rule 152 (funcionesesdata -> funcionesarray .)
    $end            reduce using rule 152 (funcionesesdata -> funcionesarray .)
    RBRACKET        reduce using rule 152 (funcionesesdata -> funcionesarray .)


state 34

    (45) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> LET . VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> LET . MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> LET . VARIABLE SEMICOLON
    (56) definicionvariable -> LET . VARIABLE EQUAL expresion
    (59) definicionvariable -> LET . VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (35) hashmap -> LET . MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> LET . MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> LET . MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> LET . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> LET . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> LET . MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> LET . MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> LET . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> LET . VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON

    VARIABLE        shift and go to state 71
    MUT             shift and go to state 72


state 35

    (137) declaracion_mutable -> MUT . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> MUT . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> MUT . VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> MUT . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 73


state 36

    (57) definicionvariable -> declaracion_constante .

    PRINT           reduce using rule 57 (definicionvariable -> declaracion_constante .)
    RETURN          reduce using rule 57 (definicionvariable -> declaracion_constante .)
    NUMBER          reduce using rule 57 (definicionvariable -> declaracion_constante .)
    FLOAT           reduce using rule 57 (definicionvariable -> declaracion_constante .)
    STRING          reduce using rule 57 (definicionvariable -> declaracion_constante .)
    TRUE            reduce using rule 57 (definicionvariable -> declaracion_constante .)
    FALSE           reduce using rule 57 (definicionvariable -> declaracion_constante .)
    VARIABLE        reduce using rule 57 (definicionvariable -> declaracion_constante .)
    CONTINUE        reduce using rule 57 (definicionvariable -> declaracion_constante .)
    BREAK           reduce using rule 57 (definicionvariable -> declaracion_constante .)
    LET             reduce using rule 57 (definicionvariable -> declaracion_constante .)
    STRUCT          reduce using rule 57 (definicionvariable -> declaracion_constante .)
    FOR             reduce using rule 57 (definicionvariable -> declaracion_constante .)
    WHILE           reduce using rule 57 (definicionvariable -> declaracion_constante .)
    IF              reduce using rule 57 (definicionvariable -> declaracion_constante .)
    LOOP            reduce using rule 57 (definicionvariable -> declaracion_constante .)
    ARRAY           reduce using rule 57 (definicionvariable -> declaracion_constante .)
    BITAND          reduce using rule 57 (definicionvariable -> declaracion_constante .)
    LPAREN          reduce using rule 57 (definicionvariable -> declaracion_constante .)
    VEC             reduce using rule 57 (definicionvariable -> declaracion_constante .)
    CONST           reduce using rule 57 (definicionvariable -> declaracion_constante .)
    MUT             reduce using rule 57 (definicionvariable -> declaracion_constante .)
    FN              reduce using rule 57 (definicionvariable -> declaracion_constante .)
    TIMES           reduce using rule 57 (definicionvariable -> declaracion_constante .)
    $end            reduce using rule 57 (definicionvariable -> declaracion_constante .)
    SEMICOLON       reduce using rule 57 (definicionvariable -> declaracion_constante .)
    LBRACKET        reduce using rule 57 (definicionvariable -> declaracion_constante .)
    RPAREN          reduce using rule 57 (definicionvariable -> declaracion_constante .)
    COMMA           reduce using rule 57 (definicionvariable -> declaracion_constante .)
    RBRACKET        reduce using rule 57 (definicionvariable -> declaracion_constante .)


state 37

    (58) definicionvariable -> declaracion_mutable .

    PRINT           reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    RETURN          reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    NUMBER          reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    FLOAT           reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    STRING          reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    TRUE            reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    FALSE           reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    VARIABLE        reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    CONTINUE        reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    BREAK           reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    LET             reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    STRUCT          reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    FOR             reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    WHILE           reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    IF              reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    LOOP            reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    ARRAY           reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    BITAND          reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    LPAREN          reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    VEC             reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    CONST           reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    MUT             reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    FN              reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    TIMES           reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    $end            reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    SEMICOLON       reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    LBRACKET        reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    RPAREN          reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    COMMA           reduce using rule 58 (definicionvariable -> declaracion_mutable .)
    RBRACKET        reduce using rule 58 (definicionvariable -> declaracion_mutable .)


state 38

    (43) definicionestructura -> STRUCT . VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> STRUCT . VARIABLE LBRACKET RBRACKET SEMICOLON

    VARIABLE        shift and go to state 74


state 39

    (115) definicionfuncion -> funciongenerica .

    PRINT           reduce using rule 115 (definicionfuncion -> funciongenerica .)
    RETURN          reduce using rule 115 (definicionfuncion -> funciongenerica .)
    NUMBER          reduce using rule 115 (definicionfuncion -> funciongenerica .)
    FLOAT           reduce using rule 115 (definicionfuncion -> funciongenerica .)
    STRING          reduce using rule 115 (definicionfuncion -> funciongenerica .)
    TRUE            reduce using rule 115 (definicionfuncion -> funciongenerica .)
    FALSE           reduce using rule 115 (definicionfuncion -> funciongenerica .)
    VARIABLE        reduce using rule 115 (definicionfuncion -> funciongenerica .)
    CONTINUE        reduce using rule 115 (definicionfuncion -> funciongenerica .)
    BREAK           reduce using rule 115 (definicionfuncion -> funciongenerica .)
    LET             reduce using rule 115 (definicionfuncion -> funciongenerica .)
    STRUCT          reduce using rule 115 (definicionfuncion -> funciongenerica .)
    FOR             reduce using rule 115 (definicionfuncion -> funciongenerica .)
    WHILE           reduce using rule 115 (definicionfuncion -> funciongenerica .)
    IF              reduce using rule 115 (definicionfuncion -> funciongenerica .)
    LOOP            reduce using rule 115 (definicionfuncion -> funciongenerica .)
    ARRAY           reduce using rule 115 (definicionfuncion -> funciongenerica .)
    BITAND          reduce using rule 115 (definicionfuncion -> funciongenerica .)
    LPAREN          reduce using rule 115 (definicionfuncion -> funciongenerica .)
    VEC             reduce using rule 115 (definicionfuncion -> funciongenerica .)
    CONST           reduce using rule 115 (definicionfuncion -> funciongenerica .)
    MUT             reduce using rule 115 (definicionfuncion -> funciongenerica .)
    FN              reduce using rule 115 (definicionfuncion -> funciongenerica .)
    TIMES           reduce using rule 115 (definicionfuncion -> funciongenerica .)
    $end            reduce using rule 115 (definicionfuncion -> funciongenerica .)
    RBRACKET        reduce using rule 115 (definicionfuncion -> funciongenerica .)


state 40

    (28) definicionestructuradatos -> hashmap .

    PRINT           reduce using rule 28 (definicionestructuradatos -> hashmap .)
    RETURN          reduce using rule 28 (definicionestructuradatos -> hashmap .)
    NUMBER          reduce using rule 28 (definicionestructuradatos -> hashmap .)
    FLOAT           reduce using rule 28 (definicionestructuradatos -> hashmap .)
    STRING          reduce using rule 28 (definicionestructuradatos -> hashmap .)
    TRUE            reduce using rule 28 (definicionestructuradatos -> hashmap .)
    FALSE           reduce using rule 28 (definicionestructuradatos -> hashmap .)
    VARIABLE        reduce using rule 28 (definicionestructuradatos -> hashmap .)
    CONTINUE        reduce using rule 28 (definicionestructuradatos -> hashmap .)
    BREAK           reduce using rule 28 (definicionestructuradatos -> hashmap .)
    LET             reduce using rule 28 (definicionestructuradatos -> hashmap .)
    STRUCT          reduce using rule 28 (definicionestructuradatos -> hashmap .)
    FOR             reduce using rule 28 (definicionestructuradatos -> hashmap .)
    WHILE           reduce using rule 28 (definicionestructuradatos -> hashmap .)
    IF              reduce using rule 28 (definicionestructuradatos -> hashmap .)
    LOOP            reduce using rule 28 (definicionestructuradatos -> hashmap .)
    ARRAY           reduce using rule 28 (definicionestructuradatos -> hashmap .)
    BITAND          reduce using rule 28 (definicionestructuradatos -> hashmap .)
    LPAREN          reduce using rule 28 (definicionestructuradatos -> hashmap .)
    VEC             reduce using rule 28 (definicionestructuradatos -> hashmap .)
    CONST           reduce using rule 28 (definicionestructuradatos -> hashmap .)
    MUT             reduce using rule 28 (definicionestructuradatos -> hashmap .)
    FN              reduce using rule 28 (definicionestructuradatos -> hashmap .)
    TIMES           reduce using rule 28 (definicionestructuradatos -> hashmap .)
    $end            reduce using rule 28 (definicionestructuradatos -> hashmap .)
    RBRACKET        reduce using rule 28 (definicionestructuradatos -> hashmap .)


state 41

    (29) definicionestructuradatos -> array .

    PRINT           reduce using rule 29 (definicionestructuradatos -> array .)
    RETURN          reduce using rule 29 (definicionestructuradatos -> array .)
    NUMBER          reduce using rule 29 (definicionestructuradatos -> array .)
    FLOAT           reduce using rule 29 (definicionestructuradatos -> array .)
    STRING          reduce using rule 29 (definicionestructuradatos -> array .)
    TRUE            reduce using rule 29 (definicionestructuradatos -> array .)
    FALSE           reduce using rule 29 (definicionestructuradatos -> array .)
    VARIABLE        reduce using rule 29 (definicionestructuradatos -> array .)
    CONTINUE        reduce using rule 29 (definicionestructuradatos -> array .)
    BREAK           reduce using rule 29 (definicionestructuradatos -> array .)
    LET             reduce using rule 29 (definicionestructuradatos -> array .)
    STRUCT          reduce using rule 29 (definicionestructuradatos -> array .)
    FOR             reduce using rule 29 (definicionestructuradatos -> array .)
    WHILE           reduce using rule 29 (definicionestructuradatos -> array .)
    IF              reduce using rule 29 (definicionestructuradatos -> array .)
    LOOP            reduce using rule 29 (definicionestructuradatos -> array .)
    ARRAY           reduce using rule 29 (definicionestructuradatos -> array .)
    BITAND          reduce using rule 29 (definicionestructuradatos -> array .)
    LPAREN          reduce using rule 29 (definicionestructuradatos -> array .)
    VEC             reduce using rule 29 (definicionestructuradatos -> array .)
    CONST           reduce using rule 29 (definicionestructuradatos -> array .)
    MUT             reduce using rule 29 (definicionestructuradatos -> array .)
    FN              reduce using rule 29 (definicionestructuradatos -> array .)
    TIMES           reduce using rule 29 (definicionestructuradatos -> array .)
    $end            reduce using rule 29 (definicionestructuradatos -> array .)
    RBRACKET        reduce using rule 29 (definicionestructuradatos -> array .)


state 42

    (30) definicionestructuradatos -> vector .

    PRINT           reduce using rule 30 (definicionestructuradatos -> vector .)
    RETURN          reduce using rule 30 (definicionestructuradatos -> vector .)
    NUMBER          reduce using rule 30 (definicionestructuradatos -> vector .)
    FLOAT           reduce using rule 30 (definicionestructuradatos -> vector .)
    STRING          reduce using rule 30 (definicionestructuradatos -> vector .)
    TRUE            reduce using rule 30 (definicionestructuradatos -> vector .)
    FALSE           reduce using rule 30 (definicionestructuradatos -> vector .)
    VARIABLE        reduce using rule 30 (definicionestructuradatos -> vector .)
    CONTINUE        reduce using rule 30 (definicionestructuradatos -> vector .)
    BREAK           reduce using rule 30 (definicionestructuradatos -> vector .)
    LET             reduce using rule 30 (definicionestructuradatos -> vector .)
    STRUCT          reduce using rule 30 (definicionestructuradatos -> vector .)
    FOR             reduce using rule 30 (definicionestructuradatos -> vector .)
    WHILE           reduce using rule 30 (definicionestructuradatos -> vector .)
    IF              reduce using rule 30 (definicionestructuradatos -> vector .)
    LOOP            reduce using rule 30 (definicionestructuradatos -> vector .)
    ARRAY           reduce using rule 30 (definicionestructuradatos -> vector .)
    BITAND          reduce using rule 30 (definicionestructuradatos -> vector .)
    LPAREN          reduce using rule 30 (definicionestructuradatos -> vector .)
    VEC             reduce using rule 30 (definicionestructuradatos -> vector .)
    CONST           reduce using rule 30 (definicionestructuradatos -> vector .)
    MUT             reduce using rule 30 (definicionestructuradatos -> vector .)
    FN              reduce using rule 30 (definicionestructuradatos -> vector .)
    TIMES           reduce using rule 30 (definicionestructuradatos -> vector .)
    $end            reduce using rule 30 (definicionestructuradatos -> vector .)
    RBRACKET        reduce using rule 30 (definicionestructuradatos -> vector .)


state 43

    (31) definicionestructuradatos -> list .

    PRINT           reduce using rule 31 (definicionestructuradatos -> list .)
    RETURN          reduce using rule 31 (definicionestructuradatos -> list .)
    NUMBER          reduce using rule 31 (definicionestructuradatos -> list .)
    FLOAT           reduce using rule 31 (definicionestructuradatos -> list .)
    STRING          reduce using rule 31 (definicionestructuradatos -> list .)
    TRUE            reduce using rule 31 (definicionestructuradatos -> list .)
    FALSE           reduce using rule 31 (definicionestructuradatos -> list .)
    VARIABLE        reduce using rule 31 (definicionestructuradatos -> list .)
    CONTINUE        reduce using rule 31 (definicionestructuradatos -> list .)
    BREAK           reduce using rule 31 (definicionestructuradatos -> list .)
    LET             reduce using rule 31 (definicionestructuradatos -> list .)
    STRUCT          reduce using rule 31 (definicionestructuradatos -> list .)
    FOR             reduce using rule 31 (definicionestructuradatos -> list .)
    WHILE           reduce using rule 31 (definicionestructuradatos -> list .)
    IF              reduce using rule 31 (definicionestructuradatos -> list .)
    LOOP            reduce using rule 31 (definicionestructuradatos -> list .)
    ARRAY           reduce using rule 31 (definicionestructuradatos -> list .)
    BITAND          reduce using rule 31 (definicionestructuradatos -> list .)
    LPAREN          reduce using rule 31 (definicionestructuradatos -> list .)
    VEC             reduce using rule 31 (definicionestructuradatos -> list .)
    CONST           reduce using rule 31 (definicionestructuradatos -> list .)
    MUT             reduce using rule 31 (definicionestructuradatos -> list .)
    FN              reduce using rule 31 (definicionestructuradatos -> list .)
    TIMES           reduce using rule 31 (definicionestructuradatos -> list .)
    $end            reduce using rule 31 (definicionestructuradatos -> list .)
    RBRACKET        reduce using rule 31 (definicionestructuradatos -> list .)


state 44

    (18) for -> FOR . VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> FOR . VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> FOR . VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> FOR . VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> FOR . VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> FOR . VARIABLE IN expresion LBRACKET RBRACKET

    VARIABLE        shift and go to state 75


state 45

    (119) while -> WHILE . LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> WHILE . expresion LBRACKET program RBRACKET
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    LPAREN          shift and go to state 76
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 77
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 46

    (141) if -> IF . expresion LBRACKET program RBRACKET
    (142) if -> IF . expresion LBRACKET program RBRACKET ELSE
    (143) if -> IF . expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 78
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 47

    (144) loop -> LOOP . LBRACKET program RBRACKET

    LBRACKET        shift and go to state 79


state 48

    (172) ops -> operandos . operaciones operandos
    (173) ops -> operandos . operaciones ops
    (112) operandos -> operandos . COMMA operandos
    (94) operaciones -> . PLUS
    (95) operaciones -> . MINUS
    (96) operaciones -> . TIMES
    (97) operaciones -> . DIVIDE
    (98) operaciones -> . RDIAMOND
    (99) operaciones -> . LDIAMOND
    (100) operaciones -> . EQUAL_EQUAL
    (101) operaciones -> . NOT_EQUAL
    (102) operaciones -> . LESS_EQUAL
    (103) operaciones -> . GREATER_EQUAL
    (104) operaciones -> . PLUS_EQUAL

    COMMA           shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    RDIAMOND        shift and go to state 86
    LDIAMOND        shift and go to state 87
    EQUAL_EQUAL     shift and go to state 88
    NOT_EQUAL       shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    GREATER_EQUAL   shift and go to state 91
    PLUS_EQUAL      shift and go to state 92

    operaciones                    shift and go to state 80

state 49

    (164) opbasicas -> ARRAY . DOT LEN LPAREN RPAREN
    (167) opbasicas -> ARRAY . L_BRACKET operandos R_BRACKET

    DOT             shift and go to state 93
    L_BRACKET       shift and go to state 94


state 50

    (165) opbasicas -> BITAND . VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (111) operandos -> BITAND . VARIABLE

    VARIABLE        shift and go to state 95


state 51

    (171) opbasicas -> VEC . EXCLAMATION L_BRACKET numeros R_BRACKET

    EXCLAMATION     shift and go to state 96


state 52

    (133) declaracion_constante -> CONST . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> CONST . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> CONST . VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> CONST . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 97


state 53

    (116) funciongenerica -> FN . VARIABLE LPAREN RPAREN LBRACKET program RBRACKET

    VARIABLE        shift and go to state 98


state 54

    (110) operandos -> TIMES . VARIABLE

    VARIABLE        shift and go to state 99


state 55

    (1) program -> program item .

    PRINT           reduce using rule 1 (program -> program item .)
    RETURN          reduce using rule 1 (program -> program item .)
    NUMBER          reduce using rule 1 (program -> program item .)
    FLOAT           reduce using rule 1 (program -> program item .)
    STRING          reduce using rule 1 (program -> program item .)
    TRUE            reduce using rule 1 (program -> program item .)
    FALSE           reduce using rule 1 (program -> program item .)
    VARIABLE        reduce using rule 1 (program -> program item .)
    CONTINUE        reduce using rule 1 (program -> program item .)
    BREAK           reduce using rule 1 (program -> program item .)
    LET             reduce using rule 1 (program -> program item .)
    STRUCT          reduce using rule 1 (program -> program item .)
    FOR             reduce using rule 1 (program -> program item .)
    WHILE           reduce using rule 1 (program -> program item .)
    IF              reduce using rule 1 (program -> program item .)
    LOOP            reduce using rule 1 (program -> program item .)
    ARRAY           reduce using rule 1 (program -> program item .)
    BITAND          reduce using rule 1 (program -> program item .)
    LPAREN          reduce using rule 1 (program -> program item .)
    VEC             reduce using rule 1 (program -> program item .)
    CONST           reduce using rule 1 (program -> program item .)
    MUT             reduce using rule 1 (program -> program item .)
    FN              reduce using rule 1 (program -> program item .)
    TIMES           reduce using rule 1 (program -> program item .)
    $end            reduce using rule 1 (program -> program item .)
    RBRACKET        reduce using rule 1 (program -> program item .)


state 56

    (5) item -> PRINT EXCLAMATION . LPAREN STRING RPAREN SEMICOLON
    (6) item -> PRINT EXCLAMATION . LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> PRINT EXCLAMATION . LPAREN STRING COMMA vars RPAREN SEMICOLON

    LPAREN          shift and go to state 100


state 57

    (168) opbasicas -> LPAREN NUMBER . DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN

    DOT             shift and go to state 101


state 58

    (169) opbasicas -> STRING DOT . TO_STRING LPAREN RPAREN

    TO_STRING       shift and go to state 102


state 59

    (9) item -> expresion SEMICOLON .

    PRINT           reduce using rule 9 (item -> expresion SEMICOLON .)
    RETURN          reduce using rule 9 (item -> expresion SEMICOLON .)
    NUMBER          reduce using rule 9 (item -> expresion SEMICOLON .)
    FLOAT           reduce using rule 9 (item -> expresion SEMICOLON .)
    STRING          reduce using rule 9 (item -> expresion SEMICOLON .)
    TRUE            reduce using rule 9 (item -> expresion SEMICOLON .)
    FALSE           reduce using rule 9 (item -> expresion SEMICOLON .)
    VARIABLE        reduce using rule 9 (item -> expresion SEMICOLON .)
    CONTINUE        reduce using rule 9 (item -> expresion SEMICOLON .)
    BREAK           reduce using rule 9 (item -> expresion SEMICOLON .)
    LET             reduce using rule 9 (item -> expresion SEMICOLON .)
    STRUCT          reduce using rule 9 (item -> expresion SEMICOLON .)
    FOR             reduce using rule 9 (item -> expresion SEMICOLON .)
    WHILE           reduce using rule 9 (item -> expresion SEMICOLON .)
    IF              reduce using rule 9 (item -> expresion SEMICOLON .)
    LOOP            reduce using rule 9 (item -> expresion SEMICOLON .)
    ARRAY           reduce using rule 9 (item -> expresion SEMICOLON .)
    BITAND          reduce using rule 9 (item -> expresion SEMICOLON .)
    LPAREN          reduce using rule 9 (item -> expresion SEMICOLON .)
    VEC             reduce using rule 9 (item -> expresion SEMICOLON .)
    CONST           reduce using rule 9 (item -> expresion SEMICOLON .)
    MUT             reduce using rule 9 (item -> expresion SEMICOLON .)
    FN              reduce using rule 9 (item -> expresion SEMICOLON .)
    TIMES           reduce using rule 9 (item -> expresion SEMICOLON .)
    $end            reduce using rule 9 (item -> expresion SEMICOLON .)
    RBRACKET        reduce using rule 9 (item -> expresion SEMICOLON .)


state 60

    (13) item -> RETURN expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 103

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 61

    (83) expresion -> VARIABLE .
    (166) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (170) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (54) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (55) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (89) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN
    (107) operandos -> VARIABLE .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 83 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 83 (expresion -> VARIABLE .)
    SEMICOLON       reduce using rule 83 (expresion -> VARIABLE .)
    LBRACKET        reduce using rule 83 (expresion -> VARIABLE .)
    RPAREN          reduce using rule 83 (expresion -> VARIABLE .)
    PRINT           reduce using rule 83 (expresion -> VARIABLE .)
    RETURN          reduce using rule 83 (expresion -> VARIABLE .)
    NUMBER          reduce using rule 83 (expresion -> VARIABLE .)
    FLOAT           reduce using rule 83 (expresion -> VARIABLE .)
    STRING          reduce using rule 83 (expresion -> VARIABLE .)
    TRUE            reduce using rule 83 (expresion -> VARIABLE .)
    FALSE           reduce using rule 83 (expresion -> VARIABLE .)
    VARIABLE        reduce using rule 83 (expresion -> VARIABLE .)
    CONTINUE        reduce using rule 83 (expresion -> VARIABLE .)
    BREAK           reduce using rule 83 (expresion -> VARIABLE .)
    LET             reduce using rule 83 (expresion -> VARIABLE .)
    STRUCT          reduce using rule 83 (expresion -> VARIABLE .)
    FOR             reduce using rule 83 (expresion -> VARIABLE .)
    WHILE           reduce using rule 83 (expresion -> VARIABLE .)
    IF              reduce using rule 83 (expresion -> VARIABLE .)
    LOOP            reduce using rule 83 (expresion -> VARIABLE .)
    ARRAY           reduce using rule 83 (expresion -> VARIABLE .)
    BITAND          reduce using rule 83 (expresion -> VARIABLE .)
    VEC             reduce using rule 83 (expresion -> VARIABLE .)
    CONST           reduce using rule 83 (expresion -> VARIABLE .)
    MUT             reduce using rule 83 (expresion -> VARIABLE .)
    FN              reduce using rule 83 (expresion -> VARIABLE .)
    TIMES           reduce using rule 83 (expresion -> VARIABLE .)
    $end            reduce using rule 83 (expresion -> VARIABLE .)
    RBRACKET        reduce using rule 83 (expresion -> VARIABLE .)
    COMMA           reduce using rule 83 (expresion -> VARIABLE .)
    DOT             shift and go to state 104
    LPAREN          shift and go to state 67
    EQUAL           shift and go to state 65
    PLUS            reduce using rule 107 (operandos -> VARIABLE .)
    MINUS           reduce using rule 107 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 107 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 107 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 107 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 107 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)

  ! LPAREN          [ reduce using rule 83 (expresion -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 107 (operandos -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 107 (operandos -> VARIABLE .) ]


state 62

    (86) expresion -> estructuracontrol .

    SEMICOLON       reduce using rule 86 (expresion -> estructuracontrol .)
    LBRACKET        reduce using rule 86 (expresion -> estructuracontrol .)
    RPAREN          reduce using rule 86 (expresion -> estructuracontrol .)
    COMMA           reduce using rule 86 (expresion -> estructuracontrol .)
    PRINT           reduce using rule 86 (expresion -> estructuracontrol .)
    RETURN          reduce using rule 86 (expresion -> estructuracontrol .)
    NUMBER          reduce using rule 86 (expresion -> estructuracontrol .)
    FLOAT           reduce using rule 86 (expresion -> estructuracontrol .)
    STRING          reduce using rule 86 (expresion -> estructuracontrol .)
    TRUE            reduce using rule 86 (expresion -> estructuracontrol .)
    FALSE           reduce using rule 86 (expresion -> estructuracontrol .)
    VARIABLE        reduce using rule 86 (expresion -> estructuracontrol .)
    CONTINUE        reduce using rule 86 (expresion -> estructuracontrol .)
    BREAK           reduce using rule 86 (expresion -> estructuracontrol .)
    LET             reduce using rule 86 (expresion -> estructuracontrol .)
    STRUCT          reduce using rule 86 (expresion -> estructuracontrol .)
    FOR             reduce using rule 86 (expresion -> estructuracontrol .)
    WHILE           reduce using rule 86 (expresion -> estructuracontrol .)
    IF              reduce using rule 86 (expresion -> estructuracontrol .)
    LOOP            reduce using rule 86 (expresion -> estructuracontrol .)
    ARRAY           reduce using rule 86 (expresion -> estructuracontrol .)
    BITAND          reduce using rule 86 (expresion -> estructuracontrol .)
    LPAREN          reduce using rule 86 (expresion -> estructuracontrol .)
    VEC             reduce using rule 86 (expresion -> estructuracontrol .)
    CONST           reduce using rule 86 (expresion -> estructuracontrol .)
    MUT             reduce using rule 86 (expresion -> estructuracontrol .)
    FN              reduce using rule 86 (expresion -> estructuracontrol .)
    TIMES           reduce using rule 86 (expresion -> estructuracontrol .)
    $end            reduce using rule 86 (expresion -> estructuracontrol .)
    RBRACKET        reduce using rule 86 (expresion -> estructuracontrol .)


state 63

    (87) expresion -> definicionvariable .

    SEMICOLON       reduce using rule 87 (expresion -> definicionvariable .)
    LBRACKET        reduce using rule 87 (expresion -> definicionvariable .)
    RPAREN          reduce using rule 87 (expresion -> definicionvariable .)
    COMMA           reduce using rule 87 (expresion -> definicionvariable .)
    PRINT           reduce using rule 87 (expresion -> definicionvariable .)
    RETURN          reduce using rule 87 (expresion -> definicionvariable .)
    NUMBER          reduce using rule 87 (expresion -> definicionvariable .)
    FLOAT           reduce using rule 87 (expresion -> definicionvariable .)
    STRING          reduce using rule 87 (expresion -> definicionvariable .)
    TRUE            reduce using rule 87 (expresion -> definicionvariable .)
    FALSE           reduce using rule 87 (expresion -> definicionvariable .)
    VARIABLE        reduce using rule 87 (expresion -> definicionvariable .)
    CONTINUE        reduce using rule 87 (expresion -> definicionvariable .)
    BREAK           reduce using rule 87 (expresion -> definicionvariable .)
    LET             reduce using rule 87 (expresion -> definicionvariable .)
    STRUCT          reduce using rule 87 (expresion -> definicionvariable .)
    FOR             reduce using rule 87 (expresion -> definicionvariable .)
    WHILE           reduce using rule 87 (expresion -> definicionvariable .)
    IF              reduce using rule 87 (expresion -> definicionvariable .)
    LOOP            reduce using rule 87 (expresion -> definicionvariable .)
    ARRAY           reduce using rule 87 (expresion -> definicionvariable .)
    BITAND          reduce using rule 87 (expresion -> definicionvariable .)
    LPAREN          reduce using rule 87 (expresion -> definicionvariable .)
    VEC             reduce using rule 87 (expresion -> definicionvariable .)
    CONST           reduce using rule 87 (expresion -> definicionvariable .)
    MUT             reduce using rule 87 (expresion -> definicionvariable .)
    FN              reduce using rule 87 (expresion -> definicionvariable .)
    TIMES           reduce using rule 87 (expresion -> definicionvariable .)
    $end            reduce using rule 87 (expresion -> definicionvariable .)
    RBRACKET        reduce using rule 87 (expresion -> definicionvariable .)


state 64

    (45) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> LET . VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> LET . MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> LET . VARIABLE SEMICOLON
    (56) definicionvariable -> LET . VARIABLE EQUAL expresion
    (59) definicionvariable -> LET . VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion

    VARIABLE        shift and go to state 105
    MUT             shift and go to state 106


state 65

    (54) definicionvariable -> VARIABLE EQUAL . expresion SEMICOLON
    (55) definicionvariable -> VARIABLE EQUAL . STRING SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    STRING          shift and go to state 108
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 107
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 66

    (166) opbasicas -> VARIABLE DOT . ITER LPAREN RPAREN
    (153) funcionesvector -> VARIABLE DOT . PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> VARIABLE DOT . POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> VARIABLE DOT . LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> VARIABLE DOT . IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> VARIABLE DOT . GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> VARIABLE DOT . SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> VARIABLE DOT . REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> VARIABLE DOT . CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> VARIABLE DOT . SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> VARIABLE DOT . REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> VARIABLE DOT . ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> VARIABLE DOT . INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> VARIABLE DOT . REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> VARIABLE DOT . GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> VARIABLE DOT . LEN LPAREN RPAREN
    (40) funcioneshashmap -> VARIABLE DOT . IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> VARIABLE DOT . CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> VARIABLE DOT . ITER LPAREN RPAREN
    (121) funcionesarray -> VARIABLE DOT . LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> VARIABLE DOT . IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> VARIABLE DOT . CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> VARIABLE DOT . ITER LPAREN RPAREN SEMICOLON

    ITER            shift and go to state 109
    PUSH            shift and go to state 110
    POP             shift and go to state 111
    LEN             shift and go to state 112
    IS_EMPTY        shift and go to state 113
    GET             shift and go to state 114
    SET             shift and go to state 115
    REMOVE          shift and go to state 116
    CLEAR           shift and go to state 117
    SWAP            shift and go to state 118
    REVERSE         shift and go to state 119
    INSERT          shift and go to state 120


state 67

    (170) opbasicas -> VARIABLE LPAREN . variables RPAREN
    (89) llamarfuncion -> VARIABLE LPAREN . RPAREN SEMICOLON
    (90) llamarfuncion -> VARIABLE LPAREN . expresion RPAREN SEMICOLON
    (91) llamarfuncion -> VARIABLE LPAREN . expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> VARIABLE LPAREN . operandos RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE LPAREN . operandos RPAREN
    (113) variables -> . VARIABLE
    (114) variables -> . VARIABLE COMMA variables
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    RPAREN          shift and go to state 123
    VARIABLE        shift and go to state 121
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 126
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    TIMES           shift and go to state 54
    BITAND          shift and go to state 127
    ARRAY           shift and go to state 49
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    variables                      shift and go to state 122
    expresion                      shift and go to state 124
    operandos                      shift and go to state 125
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 68

    (132) continue -> CONTINUE SEMICOLON .

    PRINT           reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    LET             reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    IF              reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    LOOP            reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    ARRAY           reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    BITAND          reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    VEC             reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    MUT             reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    FN              reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    TIMES           reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    $end            reduce using rule 132 (continue -> CONTINUE SEMICOLON .)
    RBRACKET        reduce using rule 132 (continue -> CONTINUE SEMICOLON .)


state 69

    (130) break -> BREAK SEMICOLON .

    PRINT           reduce using rule 130 (break -> BREAK SEMICOLON .)
    RETURN          reduce using rule 130 (break -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 130 (break -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 130 (break -> BREAK SEMICOLON .)
    STRING          reduce using rule 130 (break -> BREAK SEMICOLON .)
    TRUE            reduce using rule 130 (break -> BREAK SEMICOLON .)
    FALSE           reduce using rule 130 (break -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 130 (break -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 130 (break -> BREAK SEMICOLON .)
    BREAK           reduce using rule 130 (break -> BREAK SEMICOLON .)
    LET             reduce using rule 130 (break -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 130 (break -> BREAK SEMICOLON .)
    FOR             reduce using rule 130 (break -> BREAK SEMICOLON .)
    WHILE           reduce using rule 130 (break -> BREAK SEMICOLON .)
    IF              reduce using rule 130 (break -> BREAK SEMICOLON .)
    LOOP            reduce using rule 130 (break -> BREAK SEMICOLON .)
    ARRAY           reduce using rule 130 (break -> BREAK SEMICOLON .)
    BITAND          reduce using rule 130 (break -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 130 (break -> BREAK SEMICOLON .)
    VEC             reduce using rule 130 (break -> BREAK SEMICOLON .)
    CONST           reduce using rule 130 (break -> BREAK SEMICOLON .)
    MUT             reduce using rule 130 (break -> BREAK SEMICOLON .)
    FN              reduce using rule 130 (break -> BREAK SEMICOLON .)
    TIMES           reduce using rule 130 (break -> BREAK SEMICOLON .)
    $end            reduce using rule 130 (break -> BREAK SEMICOLON .)
    RBRACKET        reduce using rule 130 (break -> BREAK SEMICOLON .)


state 70

    (131) break -> BREAK expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 128

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 71

    (45) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> LET VARIABLE . EQUAL expresion SEMICOLON
    (49) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> LET VARIABLE . SEMICOLON
    (56) definicionvariable -> LET VARIABLE . EQUAL expresion
    (59) definicionvariable -> LET VARIABLE . LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (145) vector -> LET VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> LET VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> LET VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> LET VARIABLE . EQUAL L_BRACKET numeros R_BRACKET SEMICOLON

    DOUBLE_POINT    shift and go to state 129
    EQUAL           shift and go to state 130
    SEMICOLON       shift and go to state 131
    LPAREN          shift and go to state 132


state 72

    (47) definicionvariable -> LET MUT . VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (35) hashmap -> LET MUT . VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> LET MUT . ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> LET MUT . VARIABLE DOUBLE_POINT array SEMICOLON
    (147) vector -> LET MUT . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> LET MUT . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON

    VARIABLE        shift and go to state 133
    ARRAY           shift and go to state 134


state 73

    (137) declaracion_mutable -> MUT VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> MUT VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> MUT VARIABLE . EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> MUT VARIABLE . SEMICOLON

    DOUBLE_POINT    shift and go to state 135
    EQUAL           shift and go to state 136
    SEMICOLON       shift and go to state 137


state 74

    (43) definicionestructura -> STRUCT VARIABLE . LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> STRUCT VARIABLE . LBRACKET RBRACKET SEMICOLON

    LBRACKET        shift and go to state 138


state 75

    (18) for -> FOR VARIABLE . IN VARIABLE LBRACKET program RBRACKET
    (19) for -> FOR VARIABLE . IN VARIABLE LBRACKET RBRACKET
    (20) for -> FOR VARIABLE . IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> FOR VARIABLE . IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> FOR VARIABLE . IN expresion LBRACKET program RBRACKET
    (23) for -> FOR VARIABLE . IN expresion LBRACKET RBRACKET

    IN              shift and go to state 139


state 76

    (119) while -> WHILE LPAREN . expresion RPAREN LBRACKET program RBRACKET
    (168) opbasicas -> LPAREN . NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 141
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 140
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 77

    (120) while -> WHILE expresion . LBRACKET program RBRACKET
    (84) expresion -> expresion .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 142

  ! LBRACKET        [ reduce using rule 84 (expresion -> expresion .) ]


state 78

    (141) if -> IF expresion . LBRACKET program RBRACKET
    (142) if -> IF expresion . LBRACKET program RBRACKET ELSE
    (143) if -> IF expresion . LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (84) expresion -> expresion .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 143

  ! LBRACKET        [ reduce using rule 84 (expresion -> expresion .) ]


state 79

    (144) loop -> LOOP LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    program                        shift and go to state 144
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 80

    (172) ops -> operandos operaciones . operandos
    (173) ops -> operandos operaciones . ops
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET

    NUMBER          shift and go to state 147
    FLOAT           shift and go to state 148
    VARIABLE        shift and go to state 149
    STRING          shift and go to state 150
    TIMES           shift and go to state 54
    BITAND          shift and go to state 127
    ARRAY           shift and go to state 49
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51

    operandos                      shift and go to state 145
    ops                            shift and go to state 146
    opbasicas                      shift and go to state 151

state 81

    (112) operandos -> operandos COMMA . operandos
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET

    NUMBER          shift and go to state 147
    FLOAT           shift and go to state 148
    VARIABLE        shift and go to state 149
    STRING          shift and go to state 150
    TIMES           shift and go to state 54
    BITAND          shift and go to state 127
    ARRAY           shift and go to state 49
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51

    operandos                      shift and go to state 152
    opbasicas                      shift and go to state 151

state 82

    (94) operaciones -> PLUS .

    NUMBER          reduce using rule 94 (operaciones -> PLUS .)
    FLOAT           reduce using rule 94 (operaciones -> PLUS .)
    VARIABLE        reduce using rule 94 (operaciones -> PLUS .)
    STRING          reduce using rule 94 (operaciones -> PLUS .)
    TIMES           reduce using rule 94 (operaciones -> PLUS .)
    BITAND          reduce using rule 94 (operaciones -> PLUS .)
    ARRAY           reduce using rule 94 (operaciones -> PLUS .)
    LPAREN          reduce using rule 94 (operaciones -> PLUS .)
    VEC             reduce using rule 94 (operaciones -> PLUS .)


state 83

    (95) operaciones -> MINUS .

    NUMBER          reduce using rule 95 (operaciones -> MINUS .)
    FLOAT           reduce using rule 95 (operaciones -> MINUS .)
    VARIABLE        reduce using rule 95 (operaciones -> MINUS .)
    STRING          reduce using rule 95 (operaciones -> MINUS .)
    TIMES           reduce using rule 95 (operaciones -> MINUS .)
    BITAND          reduce using rule 95 (operaciones -> MINUS .)
    ARRAY           reduce using rule 95 (operaciones -> MINUS .)
    LPAREN          reduce using rule 95 (operaciones -> MINUS .)
    VEC             reduce using rule 95 (operaciones -> MINUS .)


state 84

    (96) operaciones -> TIMES .

    NUMBER          reduce using rule 96 (operaciones -> TIMES .)
    FLOAT           reduce using rule 96 (operaciones -> TIMES .)
    VARIABLE        reduce using rule 96 (operaciones -> TIMES .)
    STRING          reduce using rule 96 (operaciones -> TIMES .)
    TIMES           reduce using rule 96 (operaciones -> TIMES .)
    BITAND          reduce using rule 96 (operaciones -> TIMES .)
    ARRAY           reduce using rule 96 (operaciones -> TIMES .)
    LPAREN          reduce using rule 96 (operaciones -> TIMES .)
    VEC             reduce using rule 96 (operaciones -> TIMES .)


state 85

    (97) operaciones -> DIVIDE .

    NUMBER          reduce using rule 97 (operaciones -> DIVIDE .)
    FLOAT           reduce using rule 97 (operaciones -> DIVIDE .)
    VARIABLE        reduce using rule 97 (operaciones -> DIVIDE .)
    STRING          reduce using rule 97 (operaciones -> DIVIDE .)
    TIMES           reduce using rule 97 (operaciones -> DIVIDE .)
    BITAND          reduce using rule 97 (operaciones -> DIVIDE .)
    ARRAY           reduce using rule 97 (operaciones -> DIVIDE .)
    LPAREN          reduce using rule 97 (operaciones -> DIVIDE .)
    VEC             reduce using rule 97 (operaciones -> DIVIDE .)


state 86

    (98) operaciones -> RDIAMOND .

    NUMBER          reduce using rule 98 (operaciones -> RDIAMOND .)
    FLOAT           reduce using rule 98 (operaciones -> RDIAMOND .)
    VARIABLE        reduce using rule 98 (operaciones -> RDIAMOND .)
    STRING          reduce using rule 98 (operaciones -> RDIAMOND .)
    TIMES           reduce using rule 98 (operaciones -> RDIAMOND .)
    BITAND          reduce using rule 98 (operaciones -> RDIAMOND .)
    ARRAY           reduce using rule 98 (operaciones -> RDIAMOND .)
    LPAREN          reduce using rule 98 (operaciones -> RDIAMOND .)
    VEC             reduce using rule 98 (operaciones -> RDIAMOND .)


state 87

    (99) operaciones -> LDIAMOND .

    NUMBER          reduce using rule 99 (operaciones -> LDIAMOND .)
    FLOAT           reduce using rule 99 (operaciones -> LDIAMOND .)
    VARIABLE        reduce using rule 99 (operaciones -> LDIAMOND .)
    STRING          reduce using rule 99 (operaciones -> LDIAMOND .)
    TIMES           reduce using rule 99 (operaciones -> LDIAMOND .)
    BITAND          reduce using rule 99 (operaciones -> LDIAMOND .)
    ARRAY           reduce using rule 99 (operaciones -> LDIAMOND .)
    LPAREN          reduce using rule 99 (operaciones -> LDIAMOND .)
    VEC             reduce using rule 99 (operaciones -> LDIAMOND .)


state 88

    (100) operaciones -> EQUAL_EQUAL .

    NUMBER          reduce using rule 100 (operaciones -> EQUAL_EQUAL .)
    FLOAT           reduce using rule 100 (operaciones -> EQUAL_EQUAL .)
    VARIABLE        reduce using rule 100 (operaciones -> EQUAL_EQUAL .)
    STRING          reduce using rule 100 (operaciones -> EQUAL_EQUAL .)
    TIMES           reduce using rule 100 (operaciones -> EQUAL_EQUAL .)
    BITAND          reduce using rule 100 (operaciones -> EQUAL_EQUAL .)
    ARRAY           reduce using rule 100 (operaciones -> EQUAL_EQUAL .)
    LPAREN          reduce using rule 100 (operaciones -> EQUAL_EQUAL .)
    VEC             reduce using rule 100 (operaciones -> EQUAL_EQUAL .)


state 89

    (101) operaciones -> NOT_EQUAL .

    NUMBER          reduce using rule 101 (operaciones -> NOT_EQUAL .)
    FLOAT           reduce using rule 101 (operaciones -> NOT_EQUAL .)
    VARIABLE        reduce using rule 101 (operaciones -> NOT_EQUAL .)
    STRING          reduce using rule 101 (operaciones -> NOT_EQUAL .)
    TIMES           reduce using rule 101 (operaciones -> NOT_EQUAL .)
    BITAND          reduce using rule 101 (operaciones -> NOT_EQUAL .)
    ARRAY           reduce using rule 101 (operaciones -> NOT_EQUAL .)
    LPAREN          reduce using rule 101 (operaciones -> NOT_EQUAL .)
    VEC             reduce using rule 101 (operaciones -> NOT_EQUAL .)


state 90

    (102) operaciones -> LESS_EQUAL .

    NUMBER          reduce using rule 102 (operaciones -> LESS_EQUAL .)
    FLOAT           reduce using rule 102 (operaciones -> LESS_EQUAL .)
    VARIABLE        reduce using rule 102 (operaciones -> LESS_EQUAL .)
    STRING          reduce using rule 102 (operaciones -> LESS_EQUAL .)
    TIMES           reduce using rule 102 (operaciones -> LESS_EQUAL .)
    BITAND          reduce using rule 102 (operaciones -> LESS_EQUAL .)
    ARRAY           reduce using rule 102 (operaciones -> LESS_EQUAL .)
    LPAREN          reduce using rule 102 (operaciones -> LESS_EQUAL .)
    VEC             reduce using rule 102 (operaciones -> LESS_EQUAL .)


state 91

    (103) operaciones -> GREATER_EQUAL .

    NUMBER          reduce using rule 103 (operaciones -> GREATER_EQUAL .)
    FLOAT           reduce using rule 103 (operaciones -> GREATER_EQUAL .)
    VARIABLE        reduce using rule 103 (operaciones -> GREATER_EQUAL .)
    STRING          reduce using rule 103 (operaciones -> GREATER_EQUAL .)
    TIMES           reduce using rule 103 (operaciones -> GREATER_EQUAL .)
    BITAND          reduce using rule 103 (operaciones -> GREATER_EQUAL .)
    ARRAY           reduce using rule 103 (operaciones -> GREATER_EQUAL .)
    LPAREN          reduce using rule 103 (operaciones -> GREATER_EQUAL .)
    VEC             reduce using rule 103 (operaciones -> GREATER_EQUAL .)


state 92

    (104) operaciones -> PLUS_EQUAL .

    NUMBER          reduce using rule 104 (operaciones -> PLUS_EQUAL .)
    FLOAT           reduce using rule 104 (operaciones -> PLUS_EQUAL .)
    VARIABLE        reduce using rule 104 (operaciones -> PLUS_EQUAL .)
    STRING          reduce using rule 104 (operaciones -> PLUS_EQUAL .)
    TIMES           reduce using rule 104 (operaciones -> PLUS_EQUAL .)
    BITAND          reduce using rule 104 (operaciones -> PLUS_EQUAL .)
    ARRAY           reduce using rule 104 (operaciones -> PLUS_EQUAL .)
    LPAREN          reduce using rule 104 (operaciones -> PLUS_EQUAL .)
    VEC             reduce using rule 104 (operaciones -> PLUS_EQUAL .)


state 93

    (164) opbasicas -> ARRAY DOT . LEN LPAREN RPAREN

    LEN             shift and go to state 153


state 94

    (167) opbasicas -> ARRAY L_BRACKET . operandos R_BRACKET
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET

    NUMBER          shift and go to state 147
    FLOAT           shift and go to state 148
    VARIABLE        shift and go to state 149
    STRING          shift and go to state 150
    TIMES           shift and go to state 54
    BITAND          shift and go to state 127
    ARRAY           shift and go to state 49
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51

    operandos                      shift and go to state 154
    opbasicas                      shift and go to state 151

state 95

    (165) opbasicas -> BITAND VARIABLE . L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (111) operandos -> BITAND VARIABLE .

    L_BRACKET       shift and go to state 155
    COMMA           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    PLUS            reduce using rule 111 (operandos -> BITAND VARIABLE .)
    MINUS           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    TIMES           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    DIVIDE          reduce using rule 111 (operandos -> BITAND VARIABLE .)
    RDIAMOND        reduce using rule 111 (operandos -> BITAND VARIABLE .)
    LDIAMOND        reduce using rule 111 (operandos -> BITAND VARIABLE .)
    EQUAL_EQUAL     reduce using rule 111 (operandos -> BITAND VARIABLE .)
    NOT_EQUAL       reduce using rule 111 (operandos -> BITAND VARIABLE .)
    LESS_EQUAL      reduce using rule 111 (operandos -> BITAND VARIABLE .)
    GREATER_EQUAL   reduce using rule 111 (operandos -> BITAND VARIABLE .)
    PLUS_EQUAL      reduce using rule 111 (operandos -> BITAND VARIABLE .)


state 96

    (171) opbasicas -> VEC EXCLAMATION . L_BRACKET numeros R_BRACKET

    L_BRACKET       shift and go to state 156


state 97

    (133) declaracion_constante -> CONST VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> CONST VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> CONST VARIABLE . EQUAL expresion SEMICOLON
    (136) declaracion_constante -> CONST VARIABLE . SEMICOLON

    DOUBLE_POINT    shift and go to state 157
    EQUAL           shift and go to state 158
    SEMICOLON       shift and go to state 159


state 98

    (116) funciongenerica -> FN VARIABLE . LPAREN RPAREN LBRACKET program RBRACKET

    LPAREN          shift and go to state 160


state 99

    (110) operandos -> TIMES VARIABLE .

    COMMA           reduce using rule 110 (operandos -> TIMES VARIABLE .)
    PLUS            reduce using rule 110 (operandos -> TIMES VARIABLE .)
    MINUS           reduce using rule 110 (operandos -> TIMES VARIABLE .)
    TIMES           reduce using rule 110 (operandos -> TIMES VARIABLE .)
    DIVIDE          reduce using rule 110 (operandos -> TIMES VARIABLE .)
    RDIAMOND        reduce using rule 110 (operandos -> TIMES VARIABLE .)
    LDIAMOND        reduce using rule 110 (operandos -> TIMES VARIABLE .)
    EQUAL_EQUAL     reduce using rule 110 (operandos -> TIMES VARIABLE .)
    NOT_EQUAL       reduce using rule 110 (operandos -> TIMES VARIABLE .)
    LESS_EQUAL      reduce using rule 110 (operandos -> TIMES VARIABLE .)
    GREATER_EQUAL   reduce using rule 110 (operandos -> TIMES VARIABLE .)
    PLUS_EQUAL      reduce using rule 110 (operandos -> TIMES VARIABLE .)
    RPAREN          reduce using rule 110 (operandos -> TIMES VARIABLE .)
    SEMICOLON       reduce using rule 110 (operandos -> TIMES VARIABLE .)
    PRINT           reduce using rule 110 (operandos -> TIMES VARIABLE .)
    RETURN          reduce using rule 110 (operandos -> TIMES VARIABLE .)
    NUMBER          reduce using rule 110 (operandos -> TIMES VARIABLE .)
    FLOAT           reduce using rule 110 (operandos -> TIMES VARIABLE .)
    STRING          reduce using rule 110 (operandos -> TIMES VARIABLE .)
    TRUE            reduce using rule 110 (operandos -> TIMES VARIABLE .)
    FALSE           reduce using rule 110 (operandos -> TIMES VARIABLE .)
    VARIABLE        reduce using rule 110 (operandos -> TIMES VARIABLE .)
    CONTINUE        reduce using rule 110 (operandos -> TIMES VARIABLE .)
    BREAK           reduce using rule 110 (operandos -> TIMES VARIABLE .)
    LET             reduce using rule 110 (operandos -> TIMES VARIABLE .)
    STRUCT          reduce using rule 110 (operandos -> TIMES VARIABLE .)
    FOR             reduce using rule 110 (operandos -> TIMES VARIABLE .)
    WHILE           reduce using rule 110 (operandos -> TIMES VARIABLE .)
    IF              reduce using rule 110 (operandos -> TIMES VARIABLE .)
    LOOP            reduce using rule 110 (operandos -> TIMES VARIABLE .)
    ARRAY           reduce using rule 110 (operandos -> TIMES VARIABLE .)
    BITAND          reduce using rule 110 (operandos -> TIMES VARIABLE .)
    LPAREN          reduce using rule 110 (operandos -> TIMES VARIABLE .)
    VEC             reduce using rule 110 (operandos -> TIMES VARIABLE .)
    CONST           reduce using rule 110 (operandos -> TIMES VARIABLE .)
    MUT             reduce using rule 110 (operandos -> TIMES VARIABLE .)
    FN              reduce using rule 110 (operandos -> TIMES VARIABLE .)
    $end            reduce using rule 110 (operandos -> TIMES VARIABLE .)
    LBRACKET        reduce using rule 110 (operandos -> TIMES VARIABLE .)
    RBRACKET        reduce using rule 110 (operandos -> TIMES VARIABLE .)
    R_BRACKET       reduce using rule 110 (operandos -> TIMES VARIABLE .)


state 100

    (5) item -> PRINT EXCLAMATION LPAREN . STRING RPAREN SEMICOLON
    (6) item -> PRINT EXCLAMATION LPAREN . STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> PRINT EXCLAMATION LPAREN . STRING COMMA vars RPAREN SEMICOLON

    STRING          shift and go to state 161


state 101

    (168) opbasicas -> LPAREN NUMBER DOT . DOT NUMBER RPAREN DOT REV LPAREN RPAREN

    DOT             shift and go to state 162


state 102

    (169) opbasicas -> STRING DOT TO_STRING . LPAREN RPAREN

    LPAREN          shift and go to state 163


state 103

    (13) item -> RETURN expresion SEMICOLON .

    PRINT           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    RETURN          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    NUMBER          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    FLOAT           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    STRING          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    TRUE            reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    FALSE           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    VARIABLE        reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    CONTINUE        reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    BREAK           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    LET             reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    STRUCT          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    FOR             reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    WHILE           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    IF              reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    LOOP            reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    ARRAY           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    BITAND          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    LPAREN          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    VEC             reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    CONST           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    MUT             reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    FN              reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    TIMES           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    $end            reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    RBRACKET        reduce using rule 13 (item -> RETURN expresion SEMICOLON .)


state 104

    (166) opbasicas -> VARIABLE DOT . ITER LPAREN RPAREN

    ITER            shift and go to state 164


state 105

    (45) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> LET VARIABLE . EQUAL expresion SEMICOLON
    (49) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> LET VARIABLE . SEMICOLON
    (56) definicionvariable -> LET VARIABLE . EQUAL expresion
    (59) definicionvariable -> LET VARIABLE . LPAREN VARIABLE RPAREN EQUAL llamarfuncion

    DOUBLE_POINT    shift and go to state 165
    EQUAL           shift and go to state 166
    SEMICOLON       shift and go to state 131
    LPAREN          shift and go to state 132


state 106

    (47) definicionvariable -> LET MUT . VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo SEMICOLON

    VARIABLE        shift and go to state 167


state 107

    (54) definicionvariable -> VARIABLE EQUAL expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 168

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 108

    (55) definicionvariable -> VARIABLE EQUAL STRING . SEMICOLON
    (80) expresion -> STRING .
    (169) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN
    (108) operandos -> STRING .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 169
    DOT             shift and go to state 58
    COMMA           reduce using rule 108 (operandos -> STRING .)
    PLUS            reduce using rule 108 (operandos -> STRING .)
    MINUS           reduce using rule 108 (operandos -> STRING .)
    TIMES           reduce using rule 108 (operandos -> STRING .)
    DIVIDE          reduce using rule 108 (operandos -> STRING .)
    RDIAMOND        reduce using rule 108 (operandos -> STRING .)
    LDIAMOND        reduce using rule 108 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 108 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 108 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> STRING .)

  ! SEMICOLON       [ reduce using rule 80 (expresion -> STRING .) ]


state 109

    (166) opbasicas -> VARIABLE DOT ITER . LPAREN RPAREN
    (163) funcionesvector -> VARIABLE DOT ITER . LPAREN RPAREN SEMICOLON
    (42) funcioneshashmap -> VARIABLE DOT ITER . LPAREN RPAREN
    (124) funcionesarray -> VARIABLE DOT ITER . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 170


state 110

    (153) funcionesvector -> VARIABLE DOT PUSH . LPAREN expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 171


state 111

    (154) funcionesvector -> VARIABLE DOT POP . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 172


state 112

    (155) funcionesvector -> VARIABLE DOT LEN . LPAREN RPAREN SEMICOLON
    (39) funcioneshashmap -> VARIABLE DOT LEN . LPAREN RPAREN
    (121) funcionesarray -> VARIABLE DOT LEN . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 173


state 113

    (156) funcionesvector -> VARIABLE DOT IS_EMPTY . LPAREN RPAREN SEMICOLON
    (40) funcioneshashmap -> VARIABLE DOT IS_EMPTY . LPAREN RPAREN
    (122) funcionesarray -> VARIABLE DOT IS_EMPTY . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 174


state 114

    (157) funcionesvector -> VARIABLE DOT GET . LPAREN NUMBER RPAREN SEMICOLON
    (38) funcioneshashmap -> VARIABLE DOT GET . LPAREN expresion RPAREN

    LPAREN          shift and go to state 175


state 115

    (158) funcionesvector -> VARIABLE DOT SET . LPAREN NUMBER COMMA expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 176


state 116

    (159) funcionesvector -> VARIABLE DOT REMOVE . LPAREN expresion RPAREN SEMICOLON
    (37) funcioneshashmap -> VARIABLE DOT REMOVE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 177


state 117

    (160) funcionesvector -> VARIABLE DOT CLEAR . LPAREN RPAREN SEMICOLON
    (41) funcioneshashmap -> VARIABLE DOT CLEAR . LPAREN RPAREN
    (123) funcionesarray -> VARIABLE DOT CLEAR . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 178


state 118

    (161) funcionesvector -> VARIABLE DOT SWAP . LPAREN expresion COMMA expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 179


state 119

    (162) funcionesvector -> VARIABLE DOT REVERSE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 180


state 120

    (36) funcioneshashmap -> VARIABLE DOT INSERT . LPAREN expresion COMMA expresion RPAREN

    LPAREN          shift and go to state 181


state 121

    (113) variables -> VARIABLE .
    (114) variables -> VARIABLE . COMMA variables
    (83) expresion -> VARIABLE .
    (107) operandos -> VARIABLE .
    (166) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (170) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (54) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (55) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (89) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 83 (expresion -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 83 (expresion -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 182
    RPAREN          reduce using rule 83 (expresion -> VARIABLE .)
    PLUS            reduce using rule 107 (operandos -> VARIABLE .)
    MINUS           reduce using rule 107 (operandos -> VARIABLE .)
    TIMES           reduce using rule 107 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 107 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 107 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 107 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 107 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)
    DOT             shift and go to state 104
    LPAREN          shift and go to state 67
    EQUAL           shift and go to state 65

  ! RPAREN          [ reduce using rule 113 (variables -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 83 (expresion -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 107 (operandos -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 107 (operandos -> VARIABLE .) ]


state 122

    (170) opbasicas -> VARIABLE LPAREN variables . RPAREN

    RPAREN          shift and go to state 183


state 123

    (89) llamarfuncion -> VARIABLE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 184


state 124

    (90) llamarfuncion -> VARIABLE LPAREN expresion . RPAREN SEMICOLON
    (91) llamarfuncion -> VARIABLE LPAREN expresion . COMMA expresion RPAREN SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          shift and go to state 185
    COMMA           shift and go to state 186

  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]
  ! COMMA           [ reduce using rule 84 (expresion -> expresion .) ]


state 125

    (92) llamarfuncion -> VARIABLE LPAREN operandos . RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE LPAREN operandos . RPAREN
    (112) operandos -> operandos . COMMA operandos
    (172) ops -> operandos . operaciones operandos
    (173) ops -> operandos . operaciones ops
    (94) operaciones -> . PLUS
    (95) operaciones -> . MINUS
    (96) operaciones -> . TIMES
    (97) operaciones -> . DIVIDE
    (98) operaciones -> . RDIAMOND
    (99) operaciones -> . LDIAMOND
    (100) operaciones -> . EQUAL_EQUAL
    (101) operaciones -> . NOT_EQUAL
    (102) operaciones -> . LESS_EQUAL
    (103) operaciones -> . GREATER_EQUAL
    (104) operaciones -> . PLUS_EQUAL

    RPAREN          shift and go to state 187
    COMMA           shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    RDIAMOND        shift and go to state 86
    LDIAMOND        shift and go to state 87
    EQUAL_EQUAL     shift and go to state 88
    NOT_EQUAL       shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    GREATER_EQUAL   shift and go to state 91
    PLUS_EQUAL      shift and go to state 92

    operaciones                    shift and go to state 80

state 126

    (80) expresion -> STRING .
    (108) operandos -> STRING .
    (169) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 80 (expresion -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 80 (expresion -> STRING .)
    RPAREN          reduce using rule 80 (expresion -> STRING .)
    COMMA           reduce using rule 80 (expresion -> STRING .)
    PLUS            reduce using rule 108 (operandos -> STRING .)
    MINUS           reduce using rule 108 (operandos -> STRING .)
    TIMES           reduce using rule 108 (operandos -> STRING .)
    DIVIDE          reduce using rule 108 (operandos -> STRING .)
    RDIAMOND        reduce using rule 108 (operandos -> STRING .)
    LDIAMOND        reduce using rule 108 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 108 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 108 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> STRING .)
    DOT             shift and go to state 58

  ! RPAREN          [ reduce using rule 108 (operandos -> STRING .) ]
  ! COMMA           [ reduce using rule 108 (operandos -> STRING .) ]


state 127

    (111) operandos -> BITAND . VARIABLE
    (165) opbasicas -> BITAND . VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET

    VARIABLE        shift and go to state 188


state 128

    (131) break -> BREAK expresion SEMICOLON .

    PRINT           reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    RETURN          reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    NUMBER          reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    FLOAT           reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    STRING          reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    TRUE            reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    FALSE           reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    VARIABLE        reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    CONTINUE        reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    BREAK           reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    LET             reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    STRUCT          reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    FOR             reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    WHILE           reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    IF              reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    LOOP            reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    ARRAY           reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    BITAND          reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    LPAREN          reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    VEC             reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    CONST           reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    MUT             reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    FN              reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    TIMES           reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    $end            reduce using rule 131 (break -> BREAK expresion SEMICOLON .)
    RBRACKET        reduce using rule 131 (break -> BREAK expresion SEMICOLON .)


state 129

    (45) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (145) vector -> LET VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> LET VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> LET VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    VEC             shift and go to state 191
    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189

    tipo                           shift and go to state 190

state 130

    (46) definicionvariable -> LET VARIABLE EQUAL . expresion SEMICOLON
    (56) definicionvariable -> LET VARIABLE EQUAL . expresion
    (32) list -> LET VARIABLE EQUAL . L_BRACKET numeros R_BRACKET SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    L_BRACKET       shift and go to state 206
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 205
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 131

    (53) definicionvariable -> LET VARIABLE SEMICOLON .

    PRINT           reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    RETURN          reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    STRING          reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    TRUE            reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    FALSE           reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    BREAK           reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    LET             reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    FOR             reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    WHILE           reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    IF              reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    LOOP            reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    BITAND          reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    VEC             reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    CONST           reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    MUT             reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    FN              reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    TIMES           reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    $end            reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    SEMICOLON       reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    LBRACKET        reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    RPAREN          reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    COMMA           reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)
    RBRACKET        reduce using rule 53 (definicionvariable -> LET VARIABLE SEMICOLON .)


state 132

    (59) definicionvariable -> LET VARIABLE LPAREN . VARIABLE RPAREN EQUAL llamarfuncion

    VARIABLE        shift and go to state 207


state 133

    (47) definicionvariable -> LET MUT VARIABLE . EQUAL expresion SEMICOLON
    (48) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (35) hashmap -> LET MUT VARIABLE . DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (118) array -> LET MUT VARIABLE . DOUBLE_POINT array SEMICOLON
    (147) vector -> LET MUT VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> LET MUT VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON

    EQUAL           shift and go to state 208
    DOUBLE_POINT    shift and go to state 209


state 134

    (117) array -> LET MUT ARRAY . DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    DOUBLE_POINT    shift and go to state 210


state 135

    (137) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 211

state 136

    (139) declaracion_mutable -> MUT VARIABLE EQUAL . expresion SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 213
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 137

    (140) declaracion_mutable -> MUT VARIABLE SEMICOLON .

    PRINT           reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    RETURN          reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    STRING          reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    TRUE            reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    FALSE           reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    BREAK           reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LET             reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    FOR             reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    WHILE           reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    IF              reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LOOP            reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    BITAND          reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    VEC             reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    CONST           reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    MUT             reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    FN              reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    TIMES           reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    $end            reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    SEMICOLON       reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LBRACKET        reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    RPAREN          reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    COMMA           reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    RBRACKET        reduce using rule 140 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)


state 138

    (43) definicionestructura -> STRUCT VARIABLE LBRACKET . item RBRACKET SEMICOLON
    (44) definicionestructura -> STRUCT VARIABLE LBRACKET . RBRACKET SEMICOLON
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 215
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    item                           shift and go to state 214
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 139

    (18) for -> FOR VARIABLE IN . VARIABLE LBRACKET program RBRACKET
    (19) for -> FOR VARIABLE IN . VARIABLE LBRACKET RBRACKET
    (20) for -> FOR VARIABLE IN . NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> FOR VARIABLE IN . NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> FOR VARIABLE IN . expresion LBRACKET program RBRACKET
    (23) for -> FOR VARIABLE IN . expresion LBRACKET RBRACKET
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    VARIABLE        shift and go to state 216
    NUMBER          shift and go to state 217
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 218
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 140

    (119) while -> WHILE LPAREN expresion . RPAREN LBRACKET program RBRACKET
    (84) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 219

  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]


state 141

    (168) opbasicas -> LPAREN NUMBER . DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (78) expresion -> NUMBER .
    (105) operandos -> NUMBER .

    DOT             shift and go to state 101
    RPAREN          reduce using rule 78 (expresion -> NUMBER .)
    COMMA           reduce using rule 105 (operandos -> NUMBER .)
    PLUS            reduce using rule 105 (operandos -> NUMBER .)
    MINUS           reduce using rule 105 (operandos -> NUMBER .)
    TIMES           reduce using rule 105 (operandos -> NUMBER .)
    DIVIDE          reduce using rule 105 (operandos -> NUMBER .)
    RDIAMOND        reduce using rule 105 (operandos -> NUMBER .)
    LDIAMOND        reduce using rule 105 (operandos -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 105 (operandos -> NUMBER .)
    NOT_EQUAL       reduce using rule 105 (operandos -> NUMBER .)
    LESS_EQUAL      reduce using rule 105 (operandos -> NUMBER .)
    GREATER_EQUAL   reduce using rule 105 (operandos -> NUMBER .)
    PLUS_EQUAL      reduce using rule 105 (operandos -> NUMBER .)


state 142

    (120) while -> WHILE expresion LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    expresion                      shift and go to state 8
    program                        shift and go to state 220
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 143

    (141) if -> IF expresion LBRACKET . program RBRACKET
    (142) if -> IF expresion LBRACKET . program RBRACKET ELSE
    (143) if -> IF expresion LBRACKET . program RBRACKET ELSE LBRACKET program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    expresion                      shift and go to state 8
    program                        shift and go to state 221
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 144

    (144) loop -> LOOP LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 222
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    item                           shift and go to state 55
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 145

    (172) ops -> operandos operaciones operandos .
    (112) operandos -> operandos . COMMA operandos
    (172) ops -> operandos . operaciones operandos
    (173) ops -> operandos . operaciones ops
    (94) operaciones -> . PLUS
    (95) operaciones -> . MINUS
    (96) operaciones -> . TIMES
    (97) operaciones -> . DIVIDE
    (98) operaciones -> . RDIAMOND
    (99) operaciones -> . LDIAMOND
    (100) operaciones -> . EQUAL_EQUAL
    (101) operaciones -> . NOT_EQUAL
    (102) operaciones -> . LESS_EQUAL
    (103) operaciones -> . GREATER_EQUAL
    (104) operaciones -> . PLUS_EQUAL

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMICOLON       reduce using rule 172 (ops -> operandos operaciones operandos .)
    PRINT           reduce using rule 172 (ops -> operandos operaciones operandos .)
    RETURN          reduce using rule 172 (ops -> operandos operaciones operandos .)
    NUMBER          reduce using rule 172 (ops -> operandos operaciones operandos .)
    FLOAT           reduce using rule 172 (ops -> operandos operaciones operandos .)
    STRING          reduce using rule 172 (ops -> operandos operaciones operandos .)
    TRUE            reduce using rule 172 (ops -> operandos operaciones operandos .)
    FALSE           reduce using rule 172 (ops -> operandos operaciones operandos .)
    VARIABLE        reduce using rule 172 (ops -> operandos operaciones operandos .)
    CONTINUE        reduce using rule 172 (ops -> operandos operaciones operandos .)
    BREAK           reduce using rule 172 (ops -> operandos operaciones operandos .)
    LET             reduce using rule 172 (ops -> operandos operaciones operandos .)
    STRUCT          reduce using rule 172 (ops -> operandos operaciones operandos .)
    FOR             reduce using rule 172 (ops -> operandos operaciones operandos .)
    WHILE           reduce using rule 172 (ops -> operandos operaciones operandos .)
    IF              reduce using rule 172 (ops -> operandos operaciones operandos .)
    LOOP            reduce using rule 172 (ops -> operandos operaciones operandos .)
    ARRAY           reduce using rule 172 (ops -> operandos operaciones operandos .)
    BITAND          reduce using rule 172 (ops -> operandos operaciones operandos .)
    LPAREN          reduce using rule 172 (ops -> operandos operaciones operandos .)
    VEC             reduce using rule 172 (ops -> operandos operaciones operandos .)
    CONST           reduce using rule 172 (ops -> operandos operaciones operandos .)
    MUT             reduce using rule 172 (ops -> operandos operaciones operandos .)
    FN              reduce using rule 172 (ops -> operandos operaciones operandos .)
    $end            reduce using rule 172 (ops -> operandos operaciones operandos .)
    LBRACKET        reduce using rule 172 (ops -> operandos operaciones operandos .)
    RPAREN          reduce using rule 172 (ops -> operandos operaciones operandos .)
    RBRACKET        reduce using rule 172 (ops -> operandos operaciones operandos .)
    COMMA           shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    RDIAMOND        shift and go to state 86
    LDIAMOND        shift and go to state 87
    EQUAL_EQUAL     shift and go to state 88
    NOT_EQUAL       shift and go to state 89
    LESS_EQUAL      shift and go to state 90
    GREATER_EQUAL   shift and go to state 91
    PLUS_EQUAL      shift and go to state 92

  ! TIMES           [ reduce using rule 172 (ops -> operandos operaciones operandos .) ]
  ! COMMA           [ reduce using rule 172 (ops -> operandos operaciones operandos .) ]

    operaciones                    shift and go to state 80

state 146

    (173) ops -> operandos operaciones ops .

    SEMICOLON       reduce using rule 173 (ops -> operandos operaciones ops .)
    PRINT           reduce using rule 173 (ops -> operandos operaciones ops .)
    RETURN          reduce using rule 173 (ops -> operandos operaciones ops .)
    NUMBER          reduce using rule 173 (ops -> operandos operaciones ops .)
    FLOAT           reduce using rule 173 (ops -> operandos operaciones ops .)
    STRING          reduce using rule 173 (ops -> operandos operaciones ops .)
    TRUE            reduce using rule 173 (ops -> operandos operaciones ops .)
    FALSE           reduce using rule 173 (ops -> operandos operaciones ops .)
    VARIABLE        reduce using rule 173 (ops -> operandos operaciones ops .)
    CONTINUE        reduce using rule 173 (ops -> operandos operaciones ops .)
    BREAK           reduce using rule 173 (ops -> operandos operaciones ops .)
    LET             reduce using rule 173 (ops -> operandos operaciones ops .)
    STRUCT          reduce using rule 173 (ops -> operandos operaciones ops .)
    FOR             reduce using rule 173 (ops -> operandos operaciones ops .)
    WHILE           reduce using rule 173 (ops -> operandos operaciones ops .)
    IF              reduce using rule 173 (ops -> operandos operaciones ops .)
    LOOP            reduce using rule 173 (ops -> operandos operaciones ops .)
    ARRAY           reduce using rule 173 (ops -> operandos operaciones ops .)
    BITAND          reduce using rule 173 (ops -> operandos operaciones ops .)
    LPAREN          reduce using rule 173 (ops -> operandos operaciones ops .)
    VEC             reduce using rule 173 (ops -> operandos operaciones ops .)
    CONST           reduce using rule 173 (ops -> operandos operaciones ops .)
    MUT             reduce using rule 173 (ops -> operandos operaciones ops .)
    FN              reduce using rule 173 (ops -> operandos operaciones ops .)
    TIMES           reduce using rule 173 (ops -> operandos operaciones ops .)
    $end            reduce using rule 173 (ops -> operandos operaciones ops .)
    LBRACKET        reduce using rule 173 (ops -> operandos operaciones ops .)
    RPAREN          reduce using rule 173 (ops -> operandos operaciones ops .)
    COMMA           reduce using rule 173 (ops -> operandos operaciones ops .)
    RBRACKET        reduce using rule 173 (ops -> operandos operaciones ops .)


state 147

    (105) operandos -> NUMBER .

    COMMA           reduce using rule 105 (operandos -> NUMBER .)
    PLUS            reduce using rule 105 (operandos -> NUMBER .)
    MINUS           reduce using rule 105 (operandos -> NUMBER .)
    TIMES           reduce using rule 105 (operandos -> NUMBER .)
    DIVIDE          reduce using rule 105 (operandos -> NUMBER .)
    RDIAMOND        reduce using rule 105 (operandos -> NUMBER .)
    LDIAMOND        reduce using rule 105 (operandos -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 105 (operandos -> NUMBER .)
    NOT_EQUAL       reduce using rule 105 (operandos -> NUMBER .)
    LESS_EQUAL      reduce using rule 105 (operandos -> NUMBER .)
    GREATER_EQUAL   reduce using rule 105 (operandos -> NUMBER .)
    PLUS_EQUAL      reduce using rule 105 (operandos -> NUMBER .)
    SEMICOLON       reduce using rule 105 (operandos -> NUMBER .)
    PRINT           reduce using rule 105 (operandos -> NUMBER .)
    RETURN          reduce using rule 105 (operandos -> NUMBER .)
    NUMBER          reduce using rule 105 (operandos -> NUMBER .)
    FLOAT           reduce using rule 105 (operandos -> NUMBER .)
    STRING          reduce using rule 105 (operandos -> NUMBER .)
    TRUE            reduce using rule 105 (operandos -> NUMBER .)
    FALSE           reduce using rule 105 (operandos -> NUMBER .)
    VARIABLE        reduce using rule 105 (operandos -> NUMBER .)
    CONTINUE        reduce using rule 105 (operandos -> NUMBER .)
    BREAK           reduce using rule 105 (operandos -> NUMBER .)
    LET             reduce using rule 105 (operandos -> NUMBER .)
    STRUCT          reduce using rule 105 (operandos -> NUMBER .)
    FOR             reduce using rule 105 (operandos -> NUMBER .)
    WHILE           reduce using rule 105 (operandos -> NUMBER .)
    IF              reduce using rule 105 (operandos -> NUMBER .)
    LOOP            reduce using rule 105 (operandos -> NUMBER .)
    ARRAY           reduce using rule 105 (operandos -> NUMBER .)
    BITAND          reduce using rule 105 (operandos -> NUMBER .)
    LPAREN          reduce using rule 105 (operandos -> NUMBER .)
    VEC             reduce using rule 105 (operandos -> NUMBER .)
    CONST           reduce using rule 105 (operandos -> NUMBER .)
    MUT             reduce using rule 105 (operandos -> NUMBER .)
    FN              reduce using rule 105 (operandos -> NUMBER .)
    $end            reduce using rule 105 (operandos -> NUMBER .)
    LBRACKET        reduce using rule 105 (operandos -> NUMBER .)
    RPAREN          reduce using rule 105 (operandos -> NUMBER .)
    RBRACKET        reduce using rule 105 (operandos -> NUMBER .)
    R_BRACKET       reduce using rule 105 (operandos -> NUMBER .)


state 148

    (106) operandos -> FLOAT .

    COMMA           reduce using rule 106 (operandos -> FLOAT .)
    PLUS            reduce using rule 106 (operandos -> FLOAT .)
    MINUS           reduce using rule 106 (operandos -> FLOAT .)
    TIMES           reduce using rule 106 (operandos -> FLOAT .)
    DIVIDE          reduce using rule 106 (operandos -> FLOAT .)
    RDIAMOND        reduce using rule 106 (operandos -> FLOAT .)
    LDIAMOND        reduce using rule 106 (operandos -> FLOAT .)
    EQUAL_EQUAL     reduce using rule 106 (operandos -> FLOAT .)
    NOT_EQUAL       reduce using rule 106 (operandos -> FLOAT .)
    LESS_EQUAL      reduce using rule 106 (operandos -> FLOAT .)
    GREATER_EQUAL   reduce using rule 106 (operandos -> FLOAT .)
    PLUS_EQUAL      reduce using rule 106 (operandos -> FLOAT .)
    SEMICOLON       reduce using rule 106 (operandos -> FLOAT .)
    PRINT           reduce using rule 106 (operandos -> FLOAT .)
    RETURN          reduce using rule 106 (operandos -> FLOAT .)
    NUMBER          reduce using rule 106 (operandos -> FLOAT .)
    FLOAT           reduce using rule 106 (operandos -> FLOAT .)
    STRING          reduce using rule 106 (operandos -> FLOAT .)
    TRUE            reduce using rule 106 (operandos -> FLOAT .)
    FALSE           reduce using rule 106 (operandos -> FLOAT .)
    VARIABLE        reduce using rule 106 (operandos -> FLOAT .)
    CONTINUE        reduce using rule 106 (operandos -> FLOAT .)
    BREAK           reduce using rule 106 (operandos -> FLOAT .)
    LET             reduce using rule 106 (operandos -> FLOAT .)
    STRUCT          reduce using rule 106 (operandos -> FLOAT .)
    FOR             reduce using rule 106 (operandos -> FLOAT .)
    WHILE           reduce using rule 106 (operandos -> FLOAT .)
    IF              reduce using rule 106 (operandos -> FLOAT .)
    LOOP            reduce using rule 106 (operandos -> FLOAT .)
    ARRAY           reduce using rule 106 (operandos -> FLOAT .)
    BITAND          reduce using rule 106 (operandos -> FLOAT .)
    LPAREN          reduce using rule 106 (operandos -> FLOAT .)
    VEC             reduce using rule 106 (operandos -> FLOAT .)
    CONST           reduce using rule 106 (operandos -> FLOAT .)
    MUT             reduce using rule 106 (operandos -> FLOAT .)
    FN              reduce using rule 106 (operandos -> FLOAT .)
    $end            reduce using rule 106 (operandos -> FLOAT .)
    LBRACKET        reduce using rule 106 (operandos -> FLOAT .)
    RPAREN          reduce using rule 106 (operandos -> FLOAT .)
    RBRACKET        reduce using rule 106 (operandos -> FLOAT .)
    R_BRACKET       reduce using rule 106 (operandos -> FLOAT .)


state 149

    (107) operandos -> VARIABLE .
    (166) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (170) opbasicas -> VARIABLE . LPAREN variables RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    COMMA           reduce using rule 107 (operandos -> VARIABLE .)
    PLUS            reduce using rule 107 (operandos -> VARIABLE .)
    MINUS           reduce using rule 107 (operandos -> VARIABLE .)
    TIMES           reduce using rule 107 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 107 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 107 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 107 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 107 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)
    SEMICOLON       reduce using rule 107 (operandos -> VARIABLE .)
    PRINT           reduce using rule 107 (operandos -> VARIABLE .)
    RETURN          reduce using rule 107 (operandos -> VARIABLE .)
    NUMBER          reduce using rule 107 (operandos -> VARIABLE .)
    FLOAT           reduce using rule 107 (operandos -> VARIABLE .)
    STRING          reduce using rule 107 (operandos -> VARIABLE .)
    TRUE            reduce using rule 107 (operandos -> VARIABLE .)
    FALSE           reduce using rule 107 (operandos -> VARIABLE .)
    VARIABLE        reduce using rule 107 (operandos -> VARIABLE .)
    CONTINUE        reduce using rule 107 (operandos -> VARIABLE .)
    BREAK           reduce using rule 107 (operandos -> VARIABLE .)
    LET             reduce using rule 107 (operandos -> VARIABLE .)
    STRUCT          reduce using rule 107 (operandos -> VARIABLE .)
    FOR             reduce using rule 107 (operandos -> VARIABLE .)
    WHILE           reduce using rule 107 (operandos -> VARIABLE .)
    IF              reduce using rule 107 (operandos -> VARIABLE .)
    LOOP            reduce using rule 107 (operandos -> VARIABLE .)
    ARRAY           reduce using rule 107 (operandos -> VARIABLE .)
    BITAND          reduce using rule 107 (operandos -> VARIABLE .)
    VEC             reduce using rule 107 (operandos -> VARIABLE .)
    CONST           reduce using rule 107 (operandos -> VARIABLE .)
    MUT             reduce using rule 107 (operandos -> VARIABLE .)
    FN              reduce using rule 107 (operandos -> VARIABLE .)
    $end            reduce using rule 107 (operandos -> VARIABLE .)
    LBRACKET        reduce using rule 107 (operandos -> VARIABLE .)
    RPAREN          reduce using rule 107 (operandos -> VARIABLE .)
    RBRACKET        reduce using rule 107 (operandos -> VARIABLE .)
    R_BRACKET       reduce using rule 107 (operandos -> VARIABLE .)
    DOT             shift and go to state 104
    LPAREN          shift and go to state 223

  ! LPAREN          [ reduce using rule 107 (operandos -> VARIABLE .) ]


state 150

    (108) operandos -> STRING .
    (169) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN

    COMMA           reduce using rule 108 (operandos -> STRING .)
    PLUS            reduce using rule 108 (operandos -> STRING .)
    MINUS           reduce using rule 108 (operandos -> STRING .)
    TIMES           reduce using rule 108 (operandos -> STRING .)
    DIVIDE          reduce using rule 108 (operandos -> STRING .)
    RDIAMOND        reduce using rule 108 (operandos -> STRING .)
    LDIAMOND        reduce using rule 108 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 108 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 108 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> STRING .)
    SEMICOLON       reduce using rule 108 (operandos -> STRING .)
    PRINT           reduce using rule 108 (operandos -> STRING .)
    RETURN          reduce using rule 108 (operandos -> STRING .)
    NUMBER          reduce using rule 108 (operandos -> STRING .)
    FLOAT           reduce using rule 108 (operandos -> STRING .)
    STRING          reduce using rule 108 (operandos -> STRING .)
    TRUE            reduce using rule 108 (operandos -> STRING .)
    FALSE           reduce using rule 108 (operandos -> STRING .)
    VARIABLE        reduce using rule 108 (operandos -> STRING .)
    CONTINUE        reduce using rule 108 (operandos -> STRING .)
    BREAK           reduce using rule 108 (operandos -> STRING .)
    LET             reduce using rule 108 (operandos -> STRING .)
    STRUCT          reduce using rule 108 (operandos -> STRING .)
    FOR             reduce using rule 108 (operandos -> STRING .)
    WHILE           reduce using rule 108 (operandos -> STRING .)
    IF              reduce using rule 108 (operandos -> STRING .)
    LOOP            reduce using rule 108 (operandos -> STRING .)
    ARRAY           reduce using rule 108 (operandos -> STRING .)
    BITAND          reduce using rule 108 (operandos -> STRING .)
    LPAREN          reduce using rule 108 (operandos -> STRING .)
    VEC             reduce using rule 108 (operandos -> STRING .)
    CONST           reduce using rule 108 (operandos -> STRING .)
    MUT             reduce using rule 108 (operandos -> STRING .)
    FN              reduce using rule 108 (operandos -> STRING .)
    $end            reduce using rule 108 (operandos -> STRING .)
    LBRACKET        reduce using rule 108 (operandos -> STRING .)
    RPAREN          reduce using rule 108 (operandos -> STRING .)
    RBRACKET        reduce using rule 108 (operandos -> STRING .)
    R_BRACKET       reduce using rule 108 (operandos -> STRING .)
    DOT             shift and go to state 58


state 151

    (109) operandos -> opbasicas .

    COMMA           reduce using rule 109 (operandos -> opbasicas .)
    PLUS            reduce using rule 109 (operandos -> opbasicas .)
    MINUS           reduce using rule 109 (operandos -> opbasicas .)
    TIMES           reduce using rule 109 (operandos -> opbasicas .)
    DIVIDE          reduce using rule 109 (operandos -> opbasicas .)
    RDIAMOND        reduce using rule 109 (operandos -> opbasicas .)
    LDIAMOND        reduce using rule 109 (operandos -> opbasicas .)
    EQUAL_EQUAL     reduce using rule 109 (operandos -> opbasicas .)
    NOT_EQUAL       reduce using rule 109 (operandos -> opbasicas .)
    LESS_EQUAL      reduce using rule 109 (operandos -> opbasicas .)
    GREATER_EQUAL   reduce using rule 109 (operandos -> opbasicas .)
    PLUS_EQUAL      reduce using rule 109 (operandos -> opbasicas .)
    SEMICOLON       reduce using rule 109 (operandos -> opbasicas .)
    PRINT           reduce using rule 109 (operandos -> opbasicas .)
    RETURN          reduce using rule 109 (operandos -> opbasicas .)
    NUMBER          reduce using rule 109 (operandos -> opbasicas .)
    FLOAT           reduce using rule 109 (operandos -> opbasicas .)
    STRING          reduce using rule 109 (operandos -> opbasicas .)
    TRUE            reduce using rule 109 (operandos -> opbasicas .)
    FALSE           reduce using rule 109 (operandos -> opbasicas .)
    VARIABLE        reduce using rule 109 (operandos -> opbasicas .)
    CONTINUE        reduce using rule 109 (operandos -> opbasicas .)
    BREAK           reduce using rule 109 (operandos -> opbasicas .)
    LET             reduce using rule 109 (operandos -> opbasicas .)
    STRUCT          reduce using rule 109 (operandos -> opbasicas .)
    FOR             reduce using rule 109 (operandos -> opbasicas .)
    WHILE           reduce using rule 109 (operandos -> opbasicas .)
    IF              reduce using rule 109 (operandos -> opbasicas .)
    LOOP            reduce using rule 109 (operandos -> opbasicas .)
    ARRAY           reduce using rule 109 (operandos -> opbasicas .)
    BITAND          reduce using rule 109 (operandos -> opbasicas .)
    LPAREN          reduce using rule 109 (operandos -> opbasicas .)
    VEC             reduce using rule 109 (operandos -> opbasicas .)
    CONST           reduce using rule 109 (operandos -> opbasicas .)
    MUT             reduce using rule 109 (operandos -> opbasicas .)
    FN              reduce using rule 109 (operandos -> opbasicas .)
    $end            reduce using rule 109 (operandos -> opbasicas .)
    LBRACKET        reduce using rule 109 (operandos -> opbasicas .)
    RPAREN          reduce using rule 109 (operandos -> opbasicas .)
    RBRACKET        reduce using rule 109 (operandos -> opbasicas .)
    R_BRACKET       reduce using rule 109 (operandos -> opbasicas .)


state 152

    (112) operandos -> operandos COMMA operandos .
    (112) operandos -> operandos . COMMA operandos

  ! shift/reduce conflict for COMMA resolved as shift
    PLUS            reduce using rule 112 (operandos -> operandos COMMA operandos .)
    MINUS           reduce using rule 112 (operandos -> operandos COMMA operandos .)
    TIMES           reduce using rule 112 (operandos -> operandos COMMA operandos .)
    DIVIDE          reduce using rule 112 (operandos -> operandos COMMA operandos .)
    RDIAMOND        reduce using rule 112 (operandos -> operandos COMMA operandos .)
    LDIAMOND        reduce using rule 112 (operandos -> operandos COMMA operandos .)
    EQUAL_EQUAL     reduce using rule 112 (operandos -> operandos COMMA operandos .)
    NOT_EQUAL       reduce using rule 112 (operandos -> operandos COMMA operandos .)
    LESS_EQUAL      reduce using rule 112 (operandos -> operandos COMMA operandos .)
    GREATER_EQUAL   reduce using rule 112 (operandos -> operandos COMMA operandos .)
    PLUS_EQUAL      reduce using rule 112 (operandos -> operandos COMMA operandos .)
    RPAREN          reduce using rule 112 (operandos -> operandos COMMA operandos .)
    SEMICOLON       reduce using rule 112 (operandos -> operandos COMMA operandos .)
    PRINT           reduce using rule 112 (operandos -> operandos COMMA operandos .)
    RETURN          reduce using rule 112 (operandos -> operandos COMMA operandos .)
    NUMBER          reduce using rule 112 (operandos -> operandos COMMA operandos .)
    FLOAT           reduce using rule 112 (operandos -> operandos COMMA operandos .)
    STRING          reduce using rule 112 (operandos -> operandos COMMA operandos .)
    TRUE            reduce using rule 112 (operandos -> operandos COMMA operandos .)
    FALSE           reduce using rule 112 (operandos -> operandos COMMA operandos .)
    VARIABLE        reduce using rule 112 (operandos -> operandos COMMA operandos .)
    CONTINUE        reduce using rule 112 (operandos -> operandos COMMA operandos .)
    BREAK           reduce using rule 112 (operandos -> operandos COMMA operandos .)
    LET             reduce using rule 112 (operandos -> operandos COMMA operandos .)
    STRUCT          reduce using rule 112 (operandos -> operandos COMMA operandos .)
    FOR             reduce using rule 112 (operandos -> operandos COMMA operandos .)
    WHILE           reduce using rule 112 (operandos -> operandos COMMA operandos .)
    IF              reduce using rule 112 (operandos -> operandos COMMA operandos .)
    LOOP            reduce using rule 112 (operandos -> operandos COMMA operandos .)
    ARRAY           reduce using rule 112 (operandos -> operandos COMMA operandos .)
    BITAND          reduce using rule 112 (operandos -> operandos COMMA operandos .)
    LPAREN          reduce using rule 112 (operandos -> operandos COMMA operandos .)
    VEC             reduce using rule 112 (operandos -> operandos COMMA operandos .)
    CONST           reduce using rule 112 (operandos -> operandos COMMA operandos .)
    MUT             reduce using rule 112 (operandos -> operandos COMMA operandos .)
    FN              reduce using rule 112 (operandos -> operandos COMMA operandos .)
    $end            reduce using rule 112 (operandos -> operandos COMMA operandos .)
    LBRACKET        reduce using rule 112 (operandos -> operandos COMMA operandos .)
    RBRACKET        reduce using rule 112 (operandos -> operandos COMMA operandos .)
    R_BRACKET       reduce using rule 112 (operandos -> operandos COMMA operandos .)
    COMMA           shift and go to state 81

  ! COMMA           [ reduce using rule 112 (operandos -> operandos COMMA operandos .) ]


state 153

    (164) opbasicas -> ARRAY DOT LEN . LPAREN RPAREN

    LPAREN          shift and go to state 224


state 154

    (167) opbasicas -> ARRAY L_BRACKET operandos . R_BRACKET
    (112) operandos -> operandos . COMMA operandos

    R_BRACKET       shift and go to state 225
    COMMA           shift and go to state 81


state 155

    (165) opbasicas -> BITAND VARIABLE L_BRACKET . NUMBER DOT DOT NUMBER R_BRACKET

    NUMBER          shift and go to state 226


state 156

    (171) opbasicas -> VEC EXCLAMATION L_BRACKET . numeros R_BRACKET
    (33) numeros -> . NUMBER
    (34) numeros -> . NUMBER COMMA numeros

    NUMBER          shift and go to state 228

    numeros                        shift and go to state 227

state 157

    (133) declaracion_constante -> CONST VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> CONST VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 229

state 158

    (135) declaracion_constante -> CONST VARIABLE EQUAL . expresion SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 230
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 159

    (136) declaracion_constante -> CONST VARIABLE SEMICOLON .

    PRINT           reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    RETURN          reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    STRING          reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    TRUE            reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    FALSE           reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    BREAK           reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LET             reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    FOR             reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    WHILE           reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    IF              reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LOOP            reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    BITAND          reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    VEC             reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    CONST           reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    MUT             reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    FN              reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    TIMES           reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    $end            reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    SEMICOLON       reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LBRACKET        reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    RPAREN          reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    COMMA           reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    RBRACKET        reduce using rule 136 (declaracion_constante -> CONST VARIABLE SEMICOLON .)


state 160

    (116) funciongenerica -> FN VARIABLE LPAREN . RPAREN LBRACKET program RBRACKET

    RPAREN          shift and go to state 231


state 161

    (5) item -> PRINT EXCLAMATION LPAREN STRING . RPAREN SEMICOLON
    (6) item -> PRINT EXCLAMATION LPAREN STRING . COMMA expresion RPAREN SEMICOLON
    (7) item -> PRINT EXCLAMATION LPAREN STRING . COMMA vars RPAREN SEMICOLON

    RPAREN          shift and go to state 232
    COMMA           shift and go to state 233


state 162

    (168) opbasicas -> LPAREN NUMBER DOT DOT . NUMBER RPAREN DOT REV LPAREN RPAREN

    NUMBER          shift and go to state 234


state 163

    (169) opbasicas -> STRING DOT TO_STRING LPAREN . RPAREN

    RPAREN          shift and go to state 235


state 164

    (166) opbasicas -> VARIABLE DOT ITER . LPAREN RPAREN

    LPAREN          shift and go to state 236


state 165

    (45) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 190

state 166

    (46) definicionvariable -> LET VARIABLE EQUAL . expresion SEMICOLON
    (56) definicionvariable -> LET VARIABLE EQUAL . expresion
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 205
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 167

    (47) definicionvariable -> LET MUT VARIABLE . EQUAL expresion SEMICOLON
    (48) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo SEMICOLON

    EQUAL           shift and go to state 208
    DOUBLE_POINT    shift and go to state 237


state 168

    (54) definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 54 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)


state 169

    (55) definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .

    PRINT           reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    RETURN          reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    NUMBER          reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    FLOAT           reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    STRING          reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    TRUE            reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    FALSE           reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    VARIABLE        reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    CONTINUE        reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    BREAK           reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    LET             reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    STRUCT          reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    FOR             reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    WHILE           reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    IF              reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    LOOP            reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    ARRAY           reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    BITAND          reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    LPAREN          reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    VEC             reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    CONST           reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    MUT             reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    FN              reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    TIMES           reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    $end            reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    SEMICOLON       reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    LBRACKET        reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    RPAREN          reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    COMMA           reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    RBRACKET        reduce using rule 55 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)


state 170

    (166) opbasicas -> VARIABLE DOT ITER LPAREN . RPAREN
    (163) funcionesvector -> VARIABLE DOT ITER LPAREN . RPAREN SEMICOLON
    (42) funcioneshashmap -> VARIABLE DOT ITER LPAREN . RPAREN
    (124) funcionesarray -> VARIABLE DOT ITER LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 238


state 171

    (153) funcionesvector -> VARIABLE DOT PUSH LPAREN . expresion RPAREN SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 239
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 172

    (154) funcionesvector -> VARIABLE DOT POP LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 240


state 173

    (155) funcionesvector -> VARIABLE DOT LEN LPAREN . RPAREN SEMICOLON
    (39) funcioneshashmap -> VARIABLE DOT LEN LPAREN . RPAREN
    (121) funcionesarray -> VARIABLE DOT LEN LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 241


state 174

    (156) funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN . RPAREN SEMICOLON
    (40) funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN . RPAREN
    (122) funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 242


state 175

    (157) funcionesvector -> VARIABLE DOT GET LPAREN . NUMBER RPAREN SEMICOLON
    (38) funcioneshashmap -> VARIABLE DOT GET LPAREN . expresion RPAREN
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 243
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 244
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 176

    (158) funcionesvector -> VARIABLE DOT SET LPAREN . NUMBER COMMA expresion RPAREN SEMICOLON

    NUMBER          shift and go to state 245


state 177

    (159) funcionesvector -> VARIABLE DOT REMOVE LPAREN . expresion RPAREN SEMICOLON
    (37) funcioneshashmap -> VARIABLE DOT REMOVE LPAREN . expresion RPAREN
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 246
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 178

    (160) funcionesvector -> VARIABLE DOT CLEAR LPAREN . RPAREN SEMICOLON
    (41) funcioneshashmap -> VARIABLE DOT CLEAR LPAREN . RPAREN
    (123) funcionesarray -> VARIABLE DOT CLEAR LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 247


state 179

    (161) funcionesvector -> VARIABLE DOT SWAP LPAREN . expresion COMMA expresion RPAREN SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 248
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 180

    (162) funcionesvector -> VARIABLE DOT REVERSE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 249


state 181

    (36) funcioneshashmap -> VARIABLE DOT INSERT LPAREN . expresion COMMA expresion RPAREN
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 250
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 182

    (114) variables -> VARIABLE COMMA . variables
    (113) variables -> . VARIABLE
    (114) variables -> . VARIABLE COMMA variables

    VARIABLE        shift and go to state 251

    variables                      shift and go to state 252

state 183

    (170) opbasicas -> VARIABLE LPAREN variables RPAREN .

    SEMICOLON       reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    PRINT           reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    RETURN          reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    NUMBER          reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    FLOAT           reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    STRING          reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    TRUE            reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    FALSE           reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    VARIABLE        reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    CONTINUE        reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    BREAK           reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LET             reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    STRUCT          reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    FOR             reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    WHILE           reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    IF              reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LOOP            reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    ARRAY           reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    BITAND          reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LPAREN          reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    VEC             reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    CONST           reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    MUT             reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    FN              reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    TIMES           reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    $end            reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    COMMA           reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    PLUS            reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    MINUS           reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    DIVIDE          reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    RDIAMOND        reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LDIAMOND        reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    EQUAL_EQUAL     reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    NOT_EQUAL       reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LESS_EQUAL      reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    GREATER_EQUAL   reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    PLUS_EQUAL      reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LBRACKET        reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    RPAREN          reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    RBRACKET        reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    R_BRACKET       reduce using rule 170 (opbasicas -> VARIABLE LPAREN variables RPAREN .)


state 184

    (89) llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RPAREN          reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    COMMA           reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 89 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)


state 185

    (90) llamarfuncion -> VARIABLE LPAREN expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 253


state 186

    (91) llamarfuncion -> VARIABLE LPAREN expresion COMMA . expresion RPAREN SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 254
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 187

    (92) llamarfuncion -> VARIABLE LPAREN operandos RPAREN . SEMICOLON
    (93) llamarfuncion -> VARIABLE LPAREN operandos RPAREN .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 255
    PRINT           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    RETURN          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    NUMBER          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    FLOAT           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    STRING          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    TRUE            reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    FALSE           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    VARIABLE        reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    CONTINUE        reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    BREAK           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    LET             reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    STRUCT          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    FOR             reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    WHILE           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    IF              reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    LOOP            reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    ARRAY           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    BITAND          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    LPAREN          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    VEC             reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    CONST           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    MUT             reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    FN              reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    TIMES           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    $end            reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    LBRACKET        reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    RPAREN          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    COMMA           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    RBRACKET        reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)

  ! SEMICOLON       [ reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .) ]


state 188

    (111) operandos -> BITAND VARIABLE .
    (165) opbasicas -> BITAND VARIABLE . L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET

    RPAREN          reduce using rule 111 (operandos -> BITAND VARIABLE .)
    COMMA           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    PLUS            reduce using rule 111 (operandos -> BITAND VARIABLE .)
    MINUS           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    TIMES           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    DIVIDE          reduce using rule 111 (operandos -> BITAND VARIABLE .)
    RDIAMOND        reduce using rule 111 (operandos -> BITAND VARIABLE .)
    LDIAMOND        reduce using rule 111 (operandos -> BITAND VARIABLE .)
    EQUAL_EQUAL     reduce using rule 111 (operandos -> BITAND VARIABLE .)
    NOT_EQUAL       reduce using rule 111 (operandos -> BITAND VARIABLE .)
    LESS_EQUAL      reduce using rule 111 (operandos -> BITAND VARIABLE .)
    GREATER_EQUAL   reduce using rule 111 (operandos -> BITAND VARIABLE .)
    PLUS_EQUAL      reduce using rule 111 (operandos -> BITAND VARIABLE .)
    SEMICOLON       reduce using rule 111 (operandos -> BITAND VARIABLE .)
    PRINT           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    RETURN          reduce using rule 111 (operandos -> BITAND VARIABLE .)
    NUMBER          reduce using rule 111 (operandos -> BITAND VARIABLE .)
    FLOAT           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    STRING          reduce using rule 111 (operandos -> BITAND VARIABLE .)
    TRUE            reduce using rule 111 (operandos -> BITAND VARIABLE .)
    FALSE           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    VARIABLE        reduce using rule 111 (operandos -> BITAND VARIABLE .)
    CONTINUE        reduce using rule 111 (operandos -> BITAND VARIABLE .)
    BREAK           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    LET             reduce using rule 111 (operandos -> BITAND VARIABLE .)
    STRUCT          reduce using rule 111 (operandos -> BITAND VARIABLE .)
    FOR             reduce using rule 111 (operandos -> BITAND VARIABLE .)
    WHILE           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    IF              reduce using rule 111 (operandos -> BITAND VARIABLE .)
    LOOP            reduce using rule 111 (operandos -> BITAND VARIABLE .)
    ARRAY           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    BITAND          reduce using rule 111 (operandos -> BITAND VARIABLE .)
    LPAREN          reduce using rule 111 (operandos -> BITAND VARIABLE .)
    VEC             reduce using rule 111 (operandos -> BITAND VARIABLE .)
    CONST           reduce using rule 111 (operandos -> BITAND VARIABLE .)
    MUT             reduce using rule 111 (operandos -> BITAND VARIABLE .)
    FN              reduce using rule 111 (operandos -> BITAND VARIABLE .)
    $end            reduce using rule 111 (operandos -> BITAND VARIABLE .)
    LBRACKET        reduce using rule 111 (operandos -> BITAND VARIABLE .)
    RBRACKET        reduce using rule 111 (operandos -> BITAND VARIABLE .)
    R_BRACKET       reduce using rule 111 (operandos -> BITAND VARIABLE .)
    L_BRACKET       shift and go to state 155


state 189

    (75) tipo -> VARIABLE .

    EQUAL           reduce using rule 75 (tipo -> VARIABLE .)
    SEMICOLON       reduce using rule 75 (tipo -> VARIABLE .)
    RDIAMOND        reduce using rule 75 (tipo -> VARIABLE .)
    COMMA           reduce using rule 75 (tipo -> VARIABLE .)


state 190

    (45) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (49) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo . EQUAL STRING SEMICOLON
    (51) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 256
    SEMICOLON       shift and go to state 257


state 191

    (145) vector -> LET VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> LET VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> LET VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (76) tipo -> VEC . tipo
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    LDIAMOND        shift and go to state 258
    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 259

state 192

    (62) tipo -> INT8 .

    EQUAL           reduce using rule 62 (tipo -> INT8 .)
    SEMICOLON       reduce using rule 62 (tipo -> INT8 .)
    RDIAMOND        reduce using rule 62 (tipo -> INT8 .)
    COMMA           reduce using rule 62 (tipo -> INT8 .)


state 193

    (63) tipo -> INT16 .

    EQUAL           reduce using rule 63 (tipo -> INT16 .)
    SEMICOLON       reduce using rule 63 (tipo -> INT16 .)
    RDIAMOND        reduce using rule 63 (tipo -> INT16 .)
    COMMA           reduce using rule 63 (tipo -> INT16 .)


state 194

    (64) tipo -> INT32 .

    EQUAL           reduce using rule 64 (tipo -> INT32 .)
    SEMICOLON       reduce using rule 64 (tipo -> INT32 .)
    RDIAMOND        reduce using rule 64 (tipo -> INT32 .)
    COMMA           reduce using rule 64 (tipo -> INT32 .)


state 195

    (65) tipo -> INT64 .

    EQUAL           reduce using rule 65 (tipo -> INT64 .)
    SEMICOLON       reduce using rule 65 (tipo -> INT64 .)
    RDIAMOND        reduce using rule 65 (tipo -> INT64 .)
    COMMA           reduce using rule 65 (tipo -> INT64 .)


state 196

    (66) tipo -> UINT8 .

    EQUAL           reduce using rule 66 (tipo -> UINT8 .)
    SEMICOLON       reduce using rule 66 (tipo -> UINT8 .)
    RDIAMOND        reduce using rule 66 (tipo -> UINT8 .)
    COMMA           reduce using rule 66 (tipo -> UINT8 .)


state 197

    (67) tipo -> UINT16 .

    EQUAL           reduce using rule 67 (tipo -> UINT16 .)
    SEMICOLON       reduce using rule 67 (tipo -> UINT16 .)
    RDIAMOND        reduce using rule 67 (tipo -> UINT16 .)
    COMMA           reduce using rule 67 (tipo -> UINT16 .)


state 198

    (68) tipo -> UINT32 .

    EQUAL           reduce using rule 68 (tipo -> UINT32 .)
    SEMICOLON       reduce using rule 68 (tipo -> UINT32 .)
    RDIAMOND        reduce using rule 68 (tipo -> UINT32 .)
    COMMA           reduce using rule 68 (tipo -> UINT32 .)


state 199

    (69) tipo -> UINT64 .

    EQUAL           reduce using rule 69 (tipo -> UINT64 .)
    SEMICOLON       reduce using rule 69 (tipo -> UINT64 .)
    RDIAMOND        reduce using rule 69 (tipo -> UINT64 .)
    COMMA           reduce using rule 69 (tipo -> UINT64 .)


state 200

    (70) tipo -> FLOAT32 .

    EQUAL           reduce using rule 70 (tipo -> FLOAT32 .)
    SEMICOLON       reduce using rule 70 (tipo -> FLOAT32 .)
    RDIAMOND        reduce using rule 70 (tipo -> FLOAT32 .)
    COMMA           reduce using rule 70 (tipo -> FLOAT32 .)


state 201

    (71) tipo -> FLOAT64 .

    EQUAL           reduce using rule 71 (tipo -> FLOAT64 .)
    SEMICOLON       reduce using rule 71 (tipo -> FLOAT64 .)
    RDIAMOND        reduce using rule 71 (tipo -> FLOAT64 .)
    COMMA           reduce using rule 71 (tipo -> FLOAT64 .)


state 202

    (72) tipo -> BOOL .

    EQUAL           reduce using rule 72 (tipo -> BOOL .)
    SEMICOLON       reduce using rule 72 (tipo -> BOOL .)
    RDIAMOND        reduce using rule 72 (tipo -> BOOL .)
    COMMA           reduce using rule 72 (tipo -> BOOL .)


state 203

    (73) tipo -> CHAR .

    EQUAL           reduce using rule 73 (tipo -> CHAR .)
    SEMICOLON       reduce using rule 73 (tipo -> CHAR .)
    RDIAMOND        reduce using rule 73 (tipo -> CHAR .)
    COMMA           reduce using rule 73 (tipo -> CHAR .)


state 204

    (74) tipo -> STR .

    EQUAL           reduce using rule 74 (tipo -> STR .)
    SEMICOLON       reduce using rule 74 (tipo -> STR .)
    RDIAMOND        reduce using rule 74 (tipo -> STR .)
    COMMA           reduce using rule 74 (tipo -> STR .)


state 205

    (46) definicionvariable -> LET VARIABLE EQUAL expresion . SEMICOLON
    (56) definicionvariable -> LET VARIABLE EQUAL expresion .
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for RETURN resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for NUMBER resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for FLOAT resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for STRING resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for TRUE resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for FALSE resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for BREAK resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for LET resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for STRUCT resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for FOR resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for WHILE resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for IF resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for LOOP resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for ARRAY resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for BITAND resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for LPAREN resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for VEC resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for CONST resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for MUT resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for FN resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for TIMES resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for $end resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for RPAREN resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for COMMA resolved using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    SEMICOLON       shift and go to state 260
    PRINT           reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    RETURN          reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    NUMBER          reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    FLOAT           reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    STRING          reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    TRUE            reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    FALSE           reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    VARIABLE        reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    CONTINUE        reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    BREAK           reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    LET             reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    STRUCT          reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    FOR             reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    WHILE           reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    IF              reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    LOOP            reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    ARRAY           reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    BITAND          reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    LPAREN          reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    VEC             reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    CONST           reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    MUT             reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    FN              reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    TIMES           reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    $end            reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    LBRACKET        reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    RPAREN          reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    COMMA           reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    RBRACKET        reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .)

  ! SEMICOLON       [ reduce using rule 56 (definicionvariable -> LET VARIABLE EQUAL expresion .) ]
  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]
  ! PRINT           [ reduce using rule 84 (expresion -> expresion .) ]
  ! RETURN          [ reduce using rule 84 (expresion -> expresion .) ]
  ! NUMBER          [ reduce using rule 84 (expresion -> expresion .) ]
  ! FLOAT           [ reduce using rule 84 (expresion -> expresion .) ]
  ! STRING          [ reduce using rule 84 (expresion -> expresion .) ]
  ! TRUE            [ reduce using rule 84 (expresion -> expresion .) ]
  ! FALSE           [ reduce using rule 84 (expresion -> expresion .) ]
  ! VARIABLE        [ reduce using rule 84 (expresion -> expresion .) ]
  ! CONTINUE        [ reduce using rule 84 (expresion -> expresion .) ]
  ! BREAK           [ reduce using rule 84 (expresion -> expresion .) ]
  ! LET             [ reduce using rule 84 (expresion -> expresion .) ]
  ! STRUCT          [ reduce using rule 84 (expresion -> expresion .) ]
  ! FOR             [ reduce using rule 84 (expresion -> expresion .) ]
  ! WHILE           [ reduce using rule 84 (expresion -> expresion .) ]
  ! IF              [ reduce using rule 84 (expresion -> expresion .) ]
  ! LOOP            [ reduce using rule 84 (expresion -> expresion .) ]
  ! ARRAY           [ reduce using rule 84 (expresion -> expresion .) ]
  ! BITAND          [ reduce using rule 84 (expresion -> expresion .) ]
  ! LPAREN          [ reduce using rule 84 (expresion -> expresion .) ]
  ! VEC             [ reduce using rule 84 (expresion -> expresion .) ]
  ! CONST           [ reduce using rule 84 (expresion -> expresion .) ]
  ! MUT             [ reduce using rule 84 (expresion -> expresion .) ]
  ! FN              [ reduce using rule 84 (expresion -> expresion .) ]
  ! TIMES           [ reduce using rule 84 (expresion -> expresion .) ]
  ! $end            [ reduce using rule 84 (expresion -> expresion .) ]
  ! RBRACKET        [ reduce using rule 84 (expresion -> expresion .) ]
  ! LBRACKET        [ reduce using rule 84 (expresion -> expresion .) ]
  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]
  ! COMMA           [ reduce using rule 84 (expresion -> expresion .) ]


state 206

    (32) list -> LET VARIABLE EQUAL L_BRACKET . numeros R_BRACKET SEMICOLON
    (33) numeros -> . NUMBER
    (34) numeros -> . NUMBER COMMA numeros

    NUMBER          shift and go to state 228

    numeros                        shift and go to state 261

state 207

    (59) definicionvariable -> LET VARIABLE LPAREN VARIABLE . RPAREN EQUAL llamarfuncion

    RPAREN          shift and go to state 262


state 208

    (47) definicionvariable -> LET MUT VARIABLE EQUAL . expresion SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 263
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 209

    (48) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT . HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (118) array -> LET MUT VARIABLE DOUBLE_POINT . array SEMICOLON
    (147) vector -> LET MUT VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> LET MUT VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON

    HASHMAP         shift and go to state 266
    VEC             shift and go to state 268
    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    LET             shift and go to state 264

    tipo                           shift and go to state 265
    array                          shift and go to state 267

state 210

    (117) array -> LET MUT ARRAY DOUBLE_POINT . L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    L_BRACKET       shift and go to state 269


state 211

    (137) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 270
    SEMICOLON       shift and go to state 271


state 212

    (76) tipo -> VEC . tipo
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 259

state 213

    (139) declaracion_mutable -> MUT VARIABLE EQUAL expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 272

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 214

    (43) definicionestructura -> STRUCT VARIABLE LBRACKET item . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 273


state 215

    (44) definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 274


state 216

    (18) for -> FOR VARIABLE IN VARIABLE . LBRACKET program RBRACKET
    (19) for -> FOR VARIABLE IN VARIABLE . LBRACKET RBRACKET
    (83) expresion -> VARIABLE .
    (166) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (170) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (54) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (55) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (89) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN
    (107) operandos -> VARIABLE .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 275
    DOT             shift and go to state 104
    LPAREN          shift and go to state 67
    EQUAL           shift and go to state 65
    COMMA           reduce using rule 107 (operandos -> VARIABLE .)
    PLUS            reduce using rule 107 (operandos -> VARIABLE .)
    MINUS           reduce using rule 107 (operandos -> VARIABLE .)
    TIMES           reduce using rule 107 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 107 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 107 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 107 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 107 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)

  ! LBRACKET        [ reduce using rule 83 (expresion -> VARIABLE .) ]


state 217

    (20) for -> FOR VARIABLE IN NUMBER . DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> FOR VARIABLE IN NUMBER . DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (78) expresion -> NUMBER .
    (105) operandos -> NUMBER .

    DOT             shift and go to state 276
    LBRACKET        reduce using rule 78 (expresion -> NUMBER .)
    COMMA           reduce using rule 105 (operandos -> NUMBER .)
    PLUS            reduce using rule 105 (operandos -> NUMBER .)
    MINUS           reduce using rule 105 (operandos -> NUMBER .)
    TIMES           reduce using rule 105 (operandos -> NUMBER .)
    DIVIDE          reduce using rule 105 (operandos -> NUMBER .)
    RDIAMOND        reduce using rule 105 (operandos -> NUMBER .)
    LDIAMOND        reduce using rule 105 (operandos -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 105 (operandos -> NUMBER .)
    NOT_EQUAL       reduce using rule 105 (operandos -> NUMBER .)
    LESS_EQUAL      reduce using rule 105 (operandos -> NUMBER .)
    GREATER_EQUAL   reduce using rule 105 (operandos -> NUMBER .)
    PLUS_EQUAL      reduce using rule 105 (operandos -> NUMBER .)


state 218

    (22) for -> FOR VARIABLE IN expresion . LBRACKET program RBRACKET
    (23) for -> FOR VARIABLE IN expresion . LBRACKET RBRACKET
    (84) expresion -> expresion .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 277

  ! LBRACKET        [ reduce using rule 84 (expresion -> expresion .) ]


state 219

    (119) while -> WHILE LPAREN expresion RPAREN . LBRACKET program RBRACKET

    LBRACKET        shift and go to state 278


state 220

    (120) while -> WHILE expresion LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 279
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    expresion                      shift and go to state 8
    item                           shift and go to state 55
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 221

    (141) if -> IF expresion LBRACKET program . RBRACKET
    (142) if -> IF expresion LBRACKET program . RBRACKET ELSE
    (143) if -> IF expresion LBRACKET program . RBRACKET ELSE LBRACKET program RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 280
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    expresion                      shift and go to state 8
    item                           shift and go to state 55
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 222

    (144) loop -> LOOP LBRACKET program RBRACKET .

    PRINT           reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    RETURN          reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    STRING          reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    TRUE            reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    FALSE           reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    BREAK           reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    LET             reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    FOR             reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    WHILE           reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    IF              reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    LOOP            reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    BITAND          reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    VEC             reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    CONST           reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    MUT             reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    FN              reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    TIMES           reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    $end            reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    COMMA           reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 144 (loop -> LOOP LBRACKET program RBRACKET .)


state 223

    (170) opbasicas -> VARIABLE LPAREN . variables RPAREN
    (113) variables -> . VARIABLE
    (114) variables -> . VARIABLE COMMA variables

    VARIABLE        shift and go to state 251

    variables                      shift and go to state 122

state 224

    (164) opbasicas -> ARRAY DOT LEN LPAREN . RPAREN

    RPAREN          shift and go to state 281


state 225

    (167) opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .

    SEMICOLON       reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    PRINT           reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    RETURN          reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    NUMBER          reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    FLOAT           reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    STRING          reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    TRUE            reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    FALSE           reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    VARIABLE        reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    CONTINUE        reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    BREAK           reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LET             reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    STRUCT          reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    FOR             reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    WHILE           reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    IF              reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LOOP            reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    ARRAY           reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    BITAND          reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LPAREN          reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    VEC             reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    CONST           reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    MUT             reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    FN              reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    TIMES           reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    $end            reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    COMMA           reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    PLUS            reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    MINUS           reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    DIVIDE          reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    RDIAMOND        reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LDIAMOND        reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    EQUAL_EQUAL     reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    NOT_EQUAL       reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LESS_EQUAL      reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    GREATER_EQUAL   reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    PLUS_EQUAL      reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LBRACKET        reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    RPAREN          reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    RBRACKET        reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    R_BRACKET       reduce using rule 167 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)


state 226

    (165) opbasicas -> BITAND VARIABLE L_BRACKET NUMBER . DOT DOT NUMBER R_BRACKET

    DOT             shift and go to state 282


state 227

    (171) opbasicas -> VEC EXCLAMATION L_BRACKET numeros . R_BRACKET

    R_BRACKET       shift and go to state 283


state 228

    (33) numeros -> NUMBER .
    (34) numeros -> NUMBER . COMMA numeros

    R_BRACKET       reduce using rule 33 (numeros -> NUMBER .)
    COMMA           shift and go to state 284


state 229

    (133) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (134) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 285
    SEMICOLON       shift and go to state 286


state 230

    (135) declaracion_constante -> CONST VARIABLE EQUAL expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 287

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 231

    (116) funciongenerica -> FN VARIABLE LPAREN RPAREN . LBRACKET program RBRACKET

    LBRACKET        shift and go to state 288


state 232

    (5) item -> PRINT EXCLAMATION LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 289


state 233

    (6) item -> PRINT EXCLAMATION LPAREN STRING COMMA . expresion RPAREN SEMICOLON
    (7) item -> PRINT EXCLAMATION LPAREN STRING COMMA . vars RPAREN SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (60) vars -> . VARIABLE
    (61) vars -> . VARIABLE COMMA vars
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 292
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 290
    vars                           shift and go to state 291
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 234

    (168) opbasicas -> LPAREN NUMBER DOT DOT NUMBER . RPAREN DOT REV LPAREN RPAREN

    RPAREN          shift and go to state 293


state 235

    (169) opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .

    SEMICOLON       reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    PRINT           reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    RETURN          reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    NUMBER          reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    FLOAT           reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    STRING          reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    TRUE            reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    FALSE           reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    VARIABLE        reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    CONTINUE        reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    BREAK           reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LET             reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    STRUCT          reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    FOR             reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    WHILE           reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    IF              reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LOOP            reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    ARRAY           reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    BITAND          reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LPAREN          reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    VEC             reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    CONST           reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    MUT             reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    FN              reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    TIMES           reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    $end            reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    COMMA           reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    PLUS            reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    MINUS           reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    DIVIDE          reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    RDIAMOND        reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LDIAMOND        reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LBRACKET        reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    RPAREN          reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    RBRACKET        reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    R_BRACKET       reduce using rule 169 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)


state 236

    (166) opbasicas -> VARIABLE DOT ITER LPAREN . RPAREN

    RPAREN          shift and go to state 294


state 237

    (48) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 265

state 238

    (166) opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .
    (163) funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN . SEMICOLON
    (42) funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .
    (124) funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for NUMBER resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for FLOAT resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for TRUE resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for FALSE resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for LET resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for STRUCT resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for WHILE resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for LOOP resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for ARRAY resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for BITAND resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for LPAREN resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for VEC resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for CONST resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for MUT resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for FN resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for TIMES resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    COMMA           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    PLUS            reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    MINUS           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    DIVIDE          reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    RDIAMOND        reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LDIAMOND        reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    SEMICOLON       shift and go to state 295
    PRINT           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    RETURN          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    NUMBER          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    FLOAT           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    STRING          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    TRUE            reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    FALSE           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    VARIABLE        reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    CONTINUE        reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    BREAK           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    LET             reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    STRUCT          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    FOR             reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    WHILE           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    IF              reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    LOOP            reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    ARRAY           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    BITAND          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    LPAREN          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    VEC             reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    CONST           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    MUT             reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    FN              reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    TIMES           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    $end            reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    RBRACKET        reduce using rule 42 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)

  ! SEMICOLON       [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! PRINT           [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! RETURN          [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! NUMBER          [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! FLOAT           [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! STRING          [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! TRUE            [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! FALSE           [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! VARIABLE        [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! CONTINUE        [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! BREAK           [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! LET             [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! STRUCT          [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! FOR             [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! WHILE           [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! IF              [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! LOOP            [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! ARRAY           [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! BITAND          [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! LPAREN          [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! VEC             [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! CONST           [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! MUT             [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! FN              [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! TIMES           [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! $end            [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! RBRACKET        [ reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]


state 239

    (153) funcionesvector -> VARIABLE DOT PUSH LPAREN expresion . RPAREN SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 296

  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]


state 240

    (154) funcionesvector -> VARIABLE DOT POP LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 297


state 241

    (155) funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN . SEMICOLON
    (39) funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .
    (121) funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 298
    PRINT           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    RETURN          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    NUMBER          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    FLOAT           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    STRING          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    TRUE            reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    FALSE           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    VARIABLE        reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    CONTINUE        reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    BREAK           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    LET             reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    STRUCT          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    FOR             reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    WHILE           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    IF              reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    LOOP            reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    ARRAY           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    BITAND          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    LPAREN          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    VEC             reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    CONST           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    MUT             reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    FN              reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    TIMES           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    $end            reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    RBRACKET        reduce using rule 39 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)


state 242

    (156) funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN . SEMICOLON
    (40) funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .
    (122) funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 299
    PRINT           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    RETURN          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    NUMBER          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    FLOAT           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    STRING          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    TRUE            reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    FALSE           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    VARIABLE        reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    CONTINUE        reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    BREAK           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    LET             reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    STRUCT          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    FOR             reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    WHILE           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    IF              reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    LOOP            reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    ARRAY           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    BITAND          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    LPAREN          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    VEC             reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    CONST           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    MUT             reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    FN              reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    TIMES           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    $end            reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    RBRACKET        reduce using rule 40 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)


state 243

    (157) funcionesvector -> VARIABLE DOT GET LPAREN NUMBER . RPAREN SEMICOLON
    (78) expresion -> NUMBER .
    (105) operandos -> NUMBER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 300
    COMMA           reduce using rule 105 (operandos -> NUMBER .)
    PLUS            reduce using rule 105 (operandos -> NUMBER .)
    MINUS           reduce using rule 105 (operandos -> NUMBER .)
    TIMES           reduce using rule 105 (operandos -> NUMBER .)
    DIVIDE          reduce using rule 105 (operandos -> NUMBER .)
    RDIAMOND        reduce using rule 105 (operandos -> NUMBER .)
    LDIAMOND        reduce using rule 105 (operandos -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 105 (operandos -> NUMBER .)
    NOT_EQUAL       reduce using rule 105 (operandos -> NUMBER .)
    LESS_EQUAL      reduce using rule 105 (operandos -> NUMBER .)
    GREATER_EQUAL   reduce using rule 105 (operandos -> NUMBER .)
    PLUS_EQUAL      reduce using rule 105 (operandos -> NUMBER .)

  ! RPAREN          [ reduce using rule 78 (expresion -> NUMBER .) ]


state 244

    (38) funcioneshashmap -> VARIABLE DOT GET LPAREN expresion . RPAREN
    (84) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 301

  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]


state 245

    (158) funcionesvector -> VARIABLE DOT SET LPAREN NUMBER . COMMA expresion RPAREN SEMICOLON

    COMMA           shift and go to state 302


state 246

    (159) funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion . RPAREN SEMICOLON
    (37) funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion . RPAREN
    (84) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 303

  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]


state 247

    (160) funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN . SEMICOLON
    (41) funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .
    (123) funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 304
    PRINT           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    RETURN          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    NUMBER          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    FLOAT           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    STRING          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    TRUE            reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    FALSE           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    VARIABLE        reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    CONTINUE        reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    BREAK           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    LET             reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    STRUCT          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    FOR             reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    WHILE           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    IF              reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    LOOP            reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    ARRAY           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    BITAND          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    LPAREN          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    VEC             reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    CONST           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    MUT             reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    FN              reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    TIMES           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    $end            reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    RBRACKET        reduce using rule 41 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)


state 248

    (161) funcionesvector -> VARIABLE DOT SWAP LPAREN expresion . COMMA expresion RPAREN SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 305

  ! COMMA           [ reduce using rule 84 (expresion -> expresion .) ]


state 249

    (162) funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 306


state 250

    (36) funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion . COMMA expresion RPAREN
    (84) expresion -> expresion .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 307

  ! COMMA           [ reduce using rule 84 (expresion -> expresion .) ]


state 251

    (113) variables -> VARIABLE .
    (114) variables -> VARIABLE . COMMA variables

    RPAREN          reduce using rule 113 (variables -> VARIABLE .)
    COMMA           shift and go to state 182


state 252

    (114) variables -> VARIABLE COMMA variables .

    RPAREN          reduce using rule 114 (variables -> VARIABLE COMMA variables .)


state 253

    (90) llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    PRINT           reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    LET             reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    IF              reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    FN              reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    $end            reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    RPAREN          reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    COMMA           reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 90 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)


state 254

    (91) llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion . RPAREN SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 308

  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]


state 255

    (92) llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    PRINT           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    RETURN          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    NUMBER          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    STRING          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    TRUE            reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    FALSE           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    BREAK           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    LET             reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    STRUCT          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    FOR             reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    WHILE           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    IF              reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    LOOP            reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    BITAND          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    LPAREN          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    VEC             reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    CONST           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    MUT             reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    FN              reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    TIMES           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    $end            reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    COMMA           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)


state 256

    (45) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (49) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL . STRING SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    STRING          shift and go to state 310
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 309
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 257

    (51) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .

    PRINT           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RETURN          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FLOAT           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONTINUE        reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FOR             reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BITAND          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LPAREN          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VEC             reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TIMES           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    SEMICOLON       reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LBRACKET        reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RPAREN          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    COMMA           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 258

    (145) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND SEMICOLON
    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 311

state 259

    (76) tipo -> VEC tipo .

    EQUAL           reduce using rule 76 (tipo -> VEC tipo .)
    SEMICOLON       reduce using rule 76 (tipo -> VEC tipo .)
    RDIAMOND        reduce using rule 76 (tipo -> VEC tipo .)
    COMMA           reduce using rule 76 (tipo -> VEC tipo .)


state 260

    (46) definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 46 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)


state 261

    (32) list -> LET VARIABLE EQUAL L_BRACKET numeros . R_BRACKET SEMICOLON

    R_BRACKET       shift and go to state 312


state 262

    (59) definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN . EQUAL llamarfuncion

    EQUAL           shift and go to state 313


state 263

    (47) definicionvariable -> LET MUT VARIABLE EQUAL expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 314

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 264

    (117) array -> LET . MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> LET . MUT VARIABLE DOUBLE_POINT array SEMICOLON

    MUT             shift and go to state 315


state 265

    (48) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo . EQUAL STRING SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 316
    SEMICOLON       shift and go to state 317


state 266

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP . LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    LDIAMOND        shift and go to state 318


state 267

    (118) array -> LET MUT VARIABLE DOUBLE_POINT array . SEMICOLON

    SEMICOLON       shift and go to state 319


state 268

    (147) vector -> LET MUT VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> LET MUT VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND SEMICOLON
    (76) tipo -> VEC . tipo
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    LDIAMOND        shift and go to state 320
    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 259

state 269

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET . tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 321

state 270

    (137) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 322
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 271

    (138) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .

    PRINT           reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RETURN          reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FLOAT           reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONTINUE        reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FOR             reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BITAND          reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LPAREN          reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VEC             reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TIMES           reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    SEMICOLON       reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LBRACKET        reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RPAREN          reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    COMMA           reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 138 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 272

    (139) declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 139 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)


state 273

    (43) definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 323


state 274

    (44) definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .

    PRINT           reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    RETURN          reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    STRING          reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    TRUE            reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    FALSE           reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    VARIABLE        reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    CONTINUE        reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    BREAK           reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    LET             reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    STRUCT          reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    FOR             reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    WHILE           reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    IF              reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    LOOP            reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    BITAND          reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    VEC             reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    CONST           reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    MUT             reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    FN              reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    TIMES           reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    $end            reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 44 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)


state 275

    (18) for -> FOR VARIABLE IN VARIABLE LBRACKET . program RBRACKET
    (19) for -> FOR VARIABLE IN VARIABLE LBRACKET . RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 325
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    program                        shift and go to state 324
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 276

    (20) for -> FOR VARIABLE IN NUMBER DOT . DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> FOR VARIABLE IN NUMBER DOT . DOT EQUAL NUMBER LBRACKET RBRACKET

    DOT             shift and go to state 326


state 277

    (22) for -> FOR VARIABLE IN expresion LBRACKET . program RBRACKET
    (23) for -> FOR VARIABLE IN expresion LBRACKET . RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 328
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    expresion                      shift and go to state 8
    program                        shift and go to state 327
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 278

    (119) while -> WHILE LPAREN expresion RPAREN LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    expresion                      shift and go to state 8
    program                        shift and go to state 329
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 279

    (120) while -> WHILE expresion LBRACKET program RBRACKET .

    PRINT           reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    RETURN          reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    STRING          reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    TRUE            reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    FALSE           reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    BREAK           reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    LET             reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    FOR             reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    WHILE           reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    IF              reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    LOOP            reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    BITAND          reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    VEC             reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    CONST           reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    MUT             reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    FN              reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    TIMES           reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    $end            reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    COMMA           reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 120 (while -> WHILE expresion LBRACKET program RBRACKET .)


state 280

    (141) if -> IF expresion LBRACKET program RBRACKET .
    (142) if -> IF expresion LBRACKET program RBRACKET . ELSE
    (143) if -> IF expresion LBRACKET program RBRACKET . ELSE LBRACKET program RBRACKET

    PRINT           reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    RETURN          reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    STRING          reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    TRUE            reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    FALSE           reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    BREAK           reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    LET             reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    FOR             reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    WHILE           reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    IF              reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    LOOP            reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    BITAND          reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    VEC             reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    CONST           reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    MUT             reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    FN              reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    TIMES           reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    $end            reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    COMMA           reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 141 (if -> IF expresion LBRACKET program RBRACKET .)
    ELSE            shift and go to state 330


state 281

    (164) opbasicas -> ARRAY DOT LEN LPAREN RPAREN .

    SEMICOLON       reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    PRINT           reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    RETURN          reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    NUMBER          reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    FLOAT           reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    STRING          reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    TRUE            reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    FALSE           reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    VARIABLE        reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    CONTINUE        reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    BREAK           reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LET             reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    STRUCT          reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    FOR             reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    WHILE           reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    IF              reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LOOP            reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    ARRAY           reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    BITAND          reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LPAREN          reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    VEC             reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    CONST           reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    MUT             reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    FN              reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    TIMES           reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    $end            reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    COMMA           reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    PLUS            reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    MINUS           reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    DIVIDE          reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    RDIAMOND        reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LDIAMOND        reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LBRACKET        reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    RPAREN          reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    RBRACKET        reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    R_BRACKET       reduce using rule 164 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)


state 282

    (165) opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT . DOT NUMBER R_BRACKET

    DOT             shift and go to state 331


state 283

    (171) opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .

    SEMICOLON       reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    PRINT           reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    RETURN          reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    NUMBER          reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    FLOAT           reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    STRING          reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    TRUE            reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    FALSE           reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    VARIABLE        reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    CONTINUE        reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    BREAK           reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LET             reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    STRUCT          reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    FOR             reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    WHILE           reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    IF              reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LOOP            reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    ARRAY           reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    BITAND          reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LPAREN          reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    VEC             reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    CONST           reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    MUT             reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    FN              reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    TIMES           reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    $end            reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    COMMA           reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    PLUS            reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    MINUS           reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    DIVIDE          reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    RDIAMOND        reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LDIAMOND        reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    EQUAL_EQUAL     reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    NOT_EQUAL       reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LESS_EQUAL      reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    GREATER_EQUAL   reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    PLUS_EQUAL      reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LBRACKET        reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    RPAREN          reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    RBRACKET        reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    R_BRACKET       reduce using rule 171 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)


state 284

    (34) numeros -> NUMBER COMMA . numeros
    (33) numeros -> . NUMBER
    (34) numeros -> . NUMBER COMMA numeros

    NUMBER          shift and go to state 228

    numeros                        shift and go to state 332

state 285

    (133) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 333
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 286

    (134) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .

    PRINT           reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RETURN          reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FLOAT           reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONTINUE        reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FOR             reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BITAND          reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LPAREN          reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VEC             reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TIMES           reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    SEMICOLON       reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LBRACKET        reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RPAREN          reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    COMMA           reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 134 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 287

    (135) declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 135 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)


state 288

    (116) funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    program                        shift and go to state 334
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 289

    (5) item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .

    PRINT           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    RETURN          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    NUMBER          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    FLOAT           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    STRING          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    TRUE            reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    FALSE           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    BREAK           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    LET             reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    STRUCT          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    LOOP            reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    ARRAY           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    BITAND          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    LPAREN          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    VEC             reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    CONST           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    MUT             reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    FN              reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    TIMES           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    $end            reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)


state 290

    (6) item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion . RPAREN SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 335

  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]


state 291

    (7) item -> PRINT EXCLAMATION LPAREN STRING COMMA vars . RPAREN SEMICOLON

    RPAREN          shift and go to state 336


state 292

    (83) expresion -> VARIABLE .
    (60) vars -> VARIABLE .
    (61) vars -> VARIABLE . COMMA vars
    (166) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (170) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (54) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (55) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (89) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN
    (107) operandos -> VARIABLE .

  ! reduce/reduce conflict for RPAREN resolved using rule 60 (vars -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 60 (vars -> VARIABLE .)
    COMMA           shift and go to state 337
    DOT             shift and go to state 104
    LPAREN          shift and go to state 67
    EQUAL           shift and go to state 65
    PLUS            reduce using rule 107 (operandos -> VARIABLE .)
    MINUS           reduce using rule 107 (operandos -> VARIABLE .)
    TIMES           reduce using rule 107 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 107 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 107 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 107 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 107 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)

  ! RPAREN          [ reduce using rule 83 (expresion -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 107 (operandos -> VARIABLE .) ]


state 293

    (168) opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN . DOT REV LPAREN RPAREN

    DOT             shift and go to state 338


state 294

    (166) opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .

    SEMICOLON       reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    COMMA           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    PLUS            reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    MINUS           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    TIMES           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    DIVIDE          reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    RDIAMOND        reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LDIAMOND        reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LBRACKET        reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    RPAREN          reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    PRINT           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    RETURN          reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    NUMBER          reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    FLOAT           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    STRING          reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    TRUE            reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    FALSE           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    VARIABLE        reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    CONTINUE        reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    BREAK           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LET             reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    STRUCT          reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    FOR             reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    WHILE           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    IF              reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LOOP            reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    ARRAY           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    BITAND          reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LPAREN          reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    VEC             reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    CONST           reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    MUT             reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    FN              reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    $end            reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    RBRACKET        reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    R_BRACKET       reduce using rule 166 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)


state 295

    (163) funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .
    (124) funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .

  ! reduce/reduce conflict for PRINT resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LET resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRUCT resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LOOP resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ARRAY resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BITAND resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VEC resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for MUT resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 124 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)

  ! PRINT           [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! RETURN          [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! TRUE            [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! FALSE           [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! VARIABLE        [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! LET             [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! STRUCT          [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! FOR             [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! WHILE           [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! IF              [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! LOOP            [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! ARRAY           [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! BITAND          [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! VEC             [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! CONST           [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! MUT             [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! TIMES           [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! RBRACKET        [ reduce using rule 163 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]


state 296

    (153) funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 339


state 297

    (154) funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .

    PRINT           reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 154 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)


state 298

    (155) funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .
    (121) funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .

  ! reduce/reduce conflict for PRINT resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LET resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRUCT resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LOOP resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ARRAY resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BITAND resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VEC resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for MUT resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 121 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)

  ! PRINT           [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! RETURN          [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! TRUE            [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! FALSE           [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! VARIABLE        [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! LET             [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! STRUCT          [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! FOR             [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! WHILE           [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! IF              [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! LOOP            [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! ARRAY           [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! BITAND          [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! VEC             [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! CONST           [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! MUT             [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! TIMES           [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! RBRACKET        [ reduce using rule 155 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]


state 299

    (156) funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .
    (122) funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .

  ! reduce/reduce conflict for PRINT resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LET resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRUCT resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LOOP resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ARRAY resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BITAND resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VEC resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for MUT resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 122 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)

  ! PRINT           [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! RETURN          [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! TRUE            [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! FALSE           [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! VARIABLE        [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! LET             [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! STRUCT          [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! FOR             [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! WHILE           [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! IF              [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! LOOP            [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! ARRAY           [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! BITAND          [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! VEC             [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! CONST           [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! MUT             [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! TIMES           [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! RBRACKET        [ reduce using rule 156 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]


state 300

    (157) funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 340


state 301

    (38) funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .

    PRINT           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    RETURN          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    NUMBER          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    FLOAT           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    STRING          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    TRUE            reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    FALSE           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    VARIABLE        reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    CONTINUE        reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    BREAK           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    LET             reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    STRUCT          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    FOR             reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    WHILE           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    IF              reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    LOOP            reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    ARRAY           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    BITAND          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    LPAREN          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    VEC             reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    CONST           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    MUT             reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    FN              reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    TIMES           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    $end            reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    RBRACKET        reduce using rule 38 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)


state 302

    (158) funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA . expresion RPAREN SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 341
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 303

    (159) funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN . SEMICOLON
    (37) funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .

    SEMICOLON       shift and go to state 342
    PRINT           reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    RETURN          reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    NUMBER          reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    FLOAT           reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    STRING          reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    TRUE            reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    FALSE           reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    VARIABLE        reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    CONTINUE        reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    BREAK           reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    LET             reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    STRUCT          reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    FOR             reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    WHILE           reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    IF              reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    LOOP            reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    ARRAY           reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    BITAND          reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    LPAREN          reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    VEC             reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    CONST           reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    MUT             reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    FN              reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    TIMES           reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    $end            reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    RBRACKET        reduce using rule 37 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)


state 304

    (160) funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .
    (123) funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .

  ! reduce/reduce conflict for PRINT resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LET resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRUCT resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LOOP resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ARRAY resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BITAND resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VEC resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for MUT resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 123 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)

  ! PRINT           [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! RETURN          [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! TRUE            [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! FALSE           [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! VARIABLE        [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! LET             [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! STRUCT          [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! FOR             [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! WHILE           [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! IF              [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! LOOP            [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! ARRAY           [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! BITAND          [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! VEC             [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! CONST           [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! MUT             [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! TIMES           [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! RBRACKET        [ reduce using rule 160 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]


state 305

    (161) funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA . expresion RPAREN SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 343
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 306

    (162) funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .

    PRINT           reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 162 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)


state 307

    (36) funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA . expresion RPAREN
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 344
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 308

    (91) llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 345


state 309

    (45) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 346

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 310

    (49) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING . SEMICOLON
    (80) expresion -> STRING .
    (169) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN
    (108) operandos -> STRING .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 347
    DOT             shift and go to state 58
    COMMA           reduce using rule 108 (operandos -> STRING .)
    PLUS            reduce using rule 108 (operandos -> STRING .)
    MINUS           reduce using rule 108 (operandos -> STRING .)
    TIMES           reduce using rule 108 (operandos -> STRING .)
    DIVIDE          reduce using rule 108 (operandos -> STRING .)
    RDIAMOND        reduce using rule 108 (operandos -> STRING .)
    LDIAMOND        reduce using rule 108 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 108 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 108 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> STRING .)

  ! SEMICOLON       [ reduce using rule 80 (expresion -> STRING .) ]


state 311

    (145) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND SEMICOLON
    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    RDIAMOND        shift and go to state 348


state 312

    (32) list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 349


state 313

    (59) definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL . llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN

    VARIABLE        shift and go to state 350

    llamarfuncion                  shift and go to state 351

state 314

    (47) definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 47 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)


state 315

    (117) array -> LET MUT . ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> LET MUT . VARIABLE DOUBLE_POINT array SEMICOLON

    ARRAY           shift and go to state 134
    VARIABLE        shift and go to state 352


state 316

    (48) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL . STRING SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    STRING          shift and go to state 354
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 353
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 317

    (52) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .

    PRINT           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RETURN          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FLOAT           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONTINUE        reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FOR             reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BITAND          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LPAREN          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VEC             reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TIMES           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    SEMICOLON       reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LBRACKET        reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RPAREN          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    COMMA           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 318

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND . tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 355

state 319

    (118) array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .

    PRINT           reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    RETURN          reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    NUMBER          reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    FLOAT           reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    STRING          reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    TRUE            reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    FALSE           reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    VARIABLE        reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    CONTINUE        reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    BREAK           reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    LET             reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    STRUCT          reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    FOR             reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    WHILE           reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    IF              reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    LOOP            reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    ARRAY           reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    BITAND          reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    LPAREN          reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    VEC             reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    CONST           reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    MUT             reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    FN              reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    TIMES           reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    $end            reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    RBRACKET        reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    SEMICOLON       reduce using rule 118 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)


state 320

    (147) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 356

state 321

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo . SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    SEMICOLON       shift and go to state 357


state 322

    (137) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 358

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 323

    (43) definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .

    PRINT           reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    RETURN          reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    STRING          reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    TRUE            reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    FALSE           reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    VARIABLE        reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    CONTINUE        reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    BREAK           reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    LET             reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    STRUCT          reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    FOR             reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    WHILE           reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    IF              reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    LOOP            reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    BITAND          reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    VEC             reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    CONST           reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    MUT             reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    FN              reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    TIMES           reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    $end            reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 43 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)


state 324

    (18) for -> FOR VARIABLE IN VARIABLE LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 359
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    item                           shift and go to state 55
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 325

    (19) for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .

    PRINT           reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    RETURN          reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    NUMBER          reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    FLOAT           reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    STRING          reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    TRUE            reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    FALSE           reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    CONTINUE        reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    BREAK           reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    LET             reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    STRUCT          reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    FOR             reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    WHILE           reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    IF              reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    LOOP            reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    ARRAY           reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    BITAND          reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    LPAREN          reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    VEC             reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    CONST           reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    MUT             reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    FN              reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    TIMES           reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    $end            reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    RPAREN          reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    COMMA           reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 19 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)


state 326

    (20) for -> FOR VARIABLE IN NUMBER DOT DOT . EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> FOR VARIABLE IN NUMBER DOT DOT . EQUAL NUMBER LBRACKET RBRACKET

    EQUAL           shift and go to state 360


state 327

    (22) for -> FOR VARIABLE IN expresion LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 361
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    expresion                      shift and go to state 8
    item                           shift and go to state 55
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 328

    (23) for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .

    PRINT           reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    RETURN          reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    NUMBER          reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    FLOAT           reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    STRING          reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    TRUE            reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    FALSE           reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    CONTINUE        reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    BREAK           reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    LET             reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    STRUCT          reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    FOR             reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    WHILE           reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    IF              reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    LOOP            reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    ARRAY           reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    BITAND          reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    LPAREN          reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    VEC             reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    CONST           reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    MUT             reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    FN              reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    TIMES           reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    $end            reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    RPAREN          reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    COMMA           reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 23 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)


state 329

    (119) while -> WHILE LPAREN expresion RPAREN LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 362
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    expresion                      shift and go to state 8
    item                           shift and go to state 55
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 330

    (142) if -> IF expresion LBRACKET program RBRACKET ELSE .
    (143) if -> IF expresion LBRACKET program RBRACKET ELSE . LBRACKET program RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    PRINT           reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    RETURN          reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    NUMBER          reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    FLOAT           reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    STRING          reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    TRUE            reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    FALSE           reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    VARIABLE        reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    CONTINUE        reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    BREAK           reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    LET             reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    STRUCT          reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    FOR             reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    WHILE           reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    IF              reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    LOOP            reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    ARRAY           reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    BITAND          reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    LPAREN          reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    VEC             reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    CONST           reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    MUT             reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    FN              reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    TIMES           reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    $end            reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    SEMICOLON       reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    RPAREN          reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    COMMA           reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    RBRACKET        reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    LBRACKET        shift and go to state 363

  ! LBRACKET        [ reduce using rule 142 (if -> IF expresion LBRACKET program RBRACKET ELSE .) ]


state 331

    (165) opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT . NUMBER R_BRACKET

    NUMBER          shift and go to state 364


state 332

    (34) numeros -> NUMBER COMMA numeros .

    R_BRACKET       reduce using rule 34 (numeros -> NUMBER COMMA numeros .)


state 333

    (133) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 365

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 334

    (116) funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 366
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    item                           shift and go to state 55
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 335

    (6) item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 367


state 336

    (7) item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 368


state 337

    (61) vars -> VARIABLE COMMA . vars
    (60) vars -> . VARIABLE
    (61) vars -> . VARIABLE COMMA vars

    VARIABLE        shift and go to state 369

    vars                           shift and go to state 370

state 338

    (168) opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT . REV LPAREN RPAREN

    REV             shift and go to state 371


state 339

    (153) funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .

    PRINT           reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    LET             reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    IF              reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    FN              reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    $end            reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 153 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)


state 340

    (157) funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .

    PRINT           reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    RETURN          reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    NUMBER          reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    FLOAT           reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    STRING          reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    TRUE            reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    FALSE           reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    BREAK           reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    LET             reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    STRUCT          reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    FOR             reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    WHILE           reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    IF              reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    LOOP            reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    ARRAY           reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    BITAND          reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    LPAREN          reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    VEC             reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    CONST           reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    MUT             reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    FN              reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    TIMES           reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    $end            reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 157 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)


state 341

    (158) funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion . RPAREN SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 372

  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]


state 342

    (159) funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .

    PRINT           reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    LET             reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    IF              reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    FN              reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    $end            reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 159 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)


state 343

    (161) funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion . RPAREN SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 373

  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]


state 344

    (36) funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion . RPAREN
    (84) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 374

  ! RPAREN          [ reduce using rule 84 (expresion -> expresion .) ]


state 345

    (91) llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    PRINT           reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LET             reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    IF              reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FN              reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    $end            reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    RPAREN          reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    COMMA           reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 91 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)


state 346

    (45) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 45 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 347

    (49) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .

    PRINT           reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RETURN          reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    NUMBER          reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FLOAT           reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    STRING          reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    TRUE            reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FALSE           reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    VARIABLE        reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    CONTINUE        reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    BREAK           reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LET             reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    STRUCT          reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FOR             reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    WHILE           reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    IF              reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LOOP            reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    ARRAY           reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    BITAND          reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LPAREN          reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    VEC             reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    CONST           reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    MUT             reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FN              reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    TIMES           reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    $end            reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    SEMICOLON       reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LBRACKET        reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RPAREN          reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    COMMA           reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RBRACKET        reduce using rule 49 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)


state 348

    (145) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . EQUAL expresion SEMICOLON
    (146) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . SEMICOLON
    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    EQUAL           shift and go to state 375
    SEMICOLON       shift and go to state 376


state 349

    (32) list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .

    PRINT           reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    RETURN          reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    NUMBER          reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    STRING          reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    TRUE            reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    FALSE           reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    BREAK           reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    LET             reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    STRUCT          reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    FOR             reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    WHILE           reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    IF              reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    LOOP            reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    BITAND          reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    LPAREN          reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    VEC             reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    CONST           reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    MUT             reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    FN              reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    TIMES           reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    $end            reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    RBRACKET        reduce using rule 32 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)


state 350

    (89) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN

    LPAREN          shift and go to state 377


state 351

    (59) definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .

    PRINT           reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    RETURN          reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    NUMBER          reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    FLOAT           reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    STRING          reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    TRUE            reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    FALSE           reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    VARIABLE        reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    CONTINUE        reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    BREAK           reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    LET             reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    STRUCT          reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    FOR             reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    WHILE           reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    IF              reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    LOOP            reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    ARRAY           reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    BITAND          reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    LPAREN          reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    VEC             reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    CONST           reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    MUT             reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    FN              reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    TIMES           reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    $end            reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    SEMICOLON       reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    LBRACKET        reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    RPAREN          reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    COMMA           reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    RBRACKET        reduce using rule 59 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)


state 352

    (118) array -> LET MUT VARIABLE . DOUBLE_POINT array SEMICOLON

    DOUBLE_POINT    shift and go to state 378


state 353

    (48) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 379

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 354

    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING . SEMICOLON
    (80) expresion -> STRING .
    (169) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN
    (108) operandos -> STRING .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 380
    DOT             shift and go to state 58
    COMMA           reduce using rule 108 (operandos -> STRING .)
    PLUS            reduce using rule 108 (operandos -> STRING .)
    MINUS           reduce using rule 108 (operandos -> STRING .)
    TIMES           reduce using rule 108 (operandos -> STRING .)
    DIVIDE          reduce using rule 108 (operandos -> STRING .)
    RDIAMOND        reduce using rule 108 (operandos -> STRING .)
    LDIAMOND        reduce using rule 108 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 108 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 108 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> STRING .)

  ! SEMICOLON       [ reduce using rule 80 (expresion -> STRING .) ]


state 355

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo . COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    COMMA           shift and go to state 381


state 356

    (147) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND SEMICOLON

    RDIAMOND        shift and go to state 382


state 357

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON . NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    NUMBER          shift and go to state 383


state 358

    (137) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 137 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 359

    (18) for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .

    PRINT           reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    RETURN          reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    STRING          reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    TRUE            reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    FALSE           reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    BREAK           reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    LET             reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    FOR             reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    WHILE           reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    IF              reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    LOOP            reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    BITAND          reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    VEC             reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    CONST           reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    MUT             reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    FN              reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    TIMES           reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    $end            reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    COMMA           reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 18 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)


state 360

    (20) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL . NUMBER LBRACKET program RBRACKET
    (21) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL . NUMBER LBRACKET RBRACKET

    NUMBER          shift and go to state 384


state 361

    (22) for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .

    PRINT           reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    RETURN          reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    STRING          reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    TRUE            reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    FALSE           reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    BREAK           reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    LET             reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    FOR             reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    WHILE           reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    IF              reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    LOOP            reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    BITAND          reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    VEC             reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    CONST           reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    MUT             reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    FN              reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    TIMES           reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    $end            reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    COMMA           reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 22 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)


state 362

    (119) while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .

    PRINT           reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    RETURN          reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    STRING          reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    TRUE            reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    FALSE           reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    BREAK           reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    LET             reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    FOR             reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    WHILE           reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    IF              reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    LOOP            reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    BITAND          reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    VEC             reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    CONST           reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    MUT             reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    FN              reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    TIMES           reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    $end            reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    COMMA           reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 119 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)


state 363

    (143) if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    expresion                      shift and go to state 8
    program                        shift and go to state 385
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 364

    (165) opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER . R_BRACKET

    R_BRACKET       shift and go to state 386


state 365

    (133) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 133 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 366

    (116) funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .

    PRINT           reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    RETURN          reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    STRING          reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    TRUE            reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    FALSE           reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    BREAK           reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    LET             reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    FOR             reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    WHILE           reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    IF              reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    LOOP            reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    BITAND          reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    VEC             reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    CONST           reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    MUT             reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    FN              reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    TIMES           reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    $end            reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 116 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)


state 367

    (6) item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .

    PRINT           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    LET             reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    IF              reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    FN              reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    $end            reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)


state 368

    (7) item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .

    PRINT           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    RETURN          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    NUMBER          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    FLOAT           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    STRING          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    TRUE            reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    FALSE           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    BREAK           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    LET             reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    STRUCT          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    FOR             reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    WHILE           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    IF              reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    LOOP            reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    ARRAY           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    BITAND          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    LPAREN          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    VEC             reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    CONST           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    MUT             reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    FN              reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    TIMES           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    $end            reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)


state 369

    (60) vars -> VARIABLE .
    (61) vars -> VARIABLE . COMMA vars

    RPAREN          reduce using rule 60 (vars -> VARIABLE .)
    COMMA           shift and go to state 337


state 370

    (61) vars -> VARIABLE COMMA vars .

    RPAREN          reduce using rule 61 (vars -> VARIABLE COMMA vars .)


state 371

    (168) opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV . LPAREN RPAREN

    LPAREN          shift and go to state 387


state 372

    (158) funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 388


state 373

    (161) funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 389


state 374

    (36) funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .

    PRINT           reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    RETURN          reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    NUMBER          reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    FLOAT           reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    STRING          reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    TRUE            reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    FALSE           reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    VARIABLE        reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    CONTINUE        reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    BREAK           reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    LET             reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    STRUCT          reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    FOR             reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    WHILE           reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    IF              reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    LOOP            reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    ARRAY           reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    BITAND          reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    LPAREN          reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    VEC             reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    CONST           reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    MUT             reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    FN              reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    TIMES           reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    $end            reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    RBRACKET        reduce using rule 36 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)


state 375

    (145) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL . expresion SEMICOLON
    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL . VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    VEC             shift and go to state 390
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 391
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 376

    (146) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .

    PRINT           reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    RETURN          reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    NUMBER          reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FLOAT           reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRING          reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    TRUE            reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FALSE           reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    VARIABLE        reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    CONTINUE        reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    BREAK           reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LET             reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRUCT          reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FOR             reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    WHILE           reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    IF              reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LOOP            reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    ARRAY           reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    BITAND          reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LPAREN          reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    VEC             reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    CONST           reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    MUT             reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FN              reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    TIMES           reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    $end            reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    RBRACKET        reduce using rule 146 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)


state 377

    (89) llamarfuncion -> VARIABLE LPAREN . RPAREN SEMICOLON
    (90) llamarfuncion -> VARIABLE LPAREN . expresion RPAREN SEMICOLON
    (91) llamarfuncion -> VARIABLE LPAREN . expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> VARIABLE LPAREN . operandos RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE LPAREN . operandos RPAREN
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    RPAREN          shift and go to state 123
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 126
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 392
    TIMES           shift and go to state 54
    BITAND          shift and go to state 127
    ARRAY           shift and go to state 49
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 124
    operandos                      shift and go to state 125
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 378

    (118) array -> LET MUT VARIABLE DOUBLE_POINT . array SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON

    LET             shift and go to state 264

    array                          shift and go to state 267

state 379

    (48) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 48 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 380

    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .

    PRINT           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RETURN          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    NUMBER          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FLOAT           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    STRING          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    TRUE            reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FALSE           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    VARIABLE        reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    CONTINUE        reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    BREAK           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LET             reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    STRUCT          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FOR             reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    WHILE           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    IF              reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LOOP            reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    ARRAY           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    BITAND          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LPAREN          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    VEC             reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    CONST           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    MUT             reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FN              reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    TIMES           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    $end            reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    SEMICOLON       reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LBRACKET        reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RPAREN          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    COMMA           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RBRACKET        reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)


state 381

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA . tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (62) tipo -> . INT8
    (63) tipo -> . INT16
    (64) tipo -> . INT32
    (65) tipo -> . INT64
    (66) tipo -> . UINT8
    (67) tipo -> . UINT16
    (68) tipo -> . UINT32
    (69) tipo -> . UINT64
    (70) tipo -> . FLOAT32
    (71) tipo -> . FLOAT64
    (72) tipo -> . BOOL
    (73) tipo -> . CHAR
    (74) tipo -> . STR
    (75) tipo -> . VARIABLE
    (76) tipo -> . VEC tipo

    INT8            shift and go to state 192
    INT16           shift and go to state 193
    INT32           shift and go to state 194
    INT64           shift and go to state 195
    UINT8           shift and go to state 196
    UINT16          shift and go to state 197
    UINT32          shift and go to state 198
    UINT64          shift and go to state 199
    FLOAT32         shift and go to state 200
    FLOAT64         shift and go to state 201
    BOOL            shift and go to state 202
    CHAR            shift and go to state 203
    STR             shift and go to state 204
    VARIABLE        shift and go to state 189
    VEC             shift and go to state 212

    tipo                           shift and go to state 393

state 382

    (147) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . EQUAL expresion SEMICOLON
    (148) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . SEMICOLON

    EQUAL           shift and go to state 394
    SEMICOLON       shift and go to state 395


state 383

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER . R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    R_BRACKET       shift and go to state 396


state 384

    (20) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER . LBRACKET program RBRACKET
    (21) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER . LBRACKET RBRACKET

    LBRACKET        shift and go to state 397


state 385

    (143) if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 398
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    expresion                      shift and go to state 8
    item                           shift and go to state 55
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 386

    (165) opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .

    SEMICOLON       reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    PRINT           reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    RETURN          reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    NUMBER          reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    FLOAT           reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    STRING          reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    TRUE            reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    FALSE           reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    VARIABLE        reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    CONTINUE        reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    BREAK           reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LET             reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    STRUCT          reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    FOR             reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    WHILE           reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    IF              reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LOOP            reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    ARRAY           reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    BITAND          reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LPAREN          reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    VEC             reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    CONST           reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    MUT             reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    FN              reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    TIMES           reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    $end            reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    COMMA           reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    PLUS            reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    MINUS           reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    DIVIDE          reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    RDIAMOND        reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LDIAMOND        reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    EQUAL_EQUAL     reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    NOT_EQUAL       reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LESS_EQUAL      reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    GREATER_EQUAL   reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    PLUS_EQUAL      reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LBRACKET        reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    RPAREN          reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    RBRACKET        reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    R_BRACKET       reduce using rule 165 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)


state 387

    (168) opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN . RPAREN

    RPAREN          shift and go to state 399


state 388

    (158) funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .

    PRINT           reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    LET             reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    IF              reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    FN              reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    $end            reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 158 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)


state 389

    (161) funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .

    PRINT           reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LET             reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    IF              reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FN              reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    $end            reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 161 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)


state 390

    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC . DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (171) opbasicas -> VEC . EXCLAMATION L_BRACKET numeros R_BRACKET

    DOUBLE_POINT    shift and go to state 400
    EXCLAMATION     shift and go to state 96


state 391

    (145) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 401

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 392

    (83) expresion -> VARIABLE .
    (107) operandos -> VARIABLE .
    (166) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (170) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (54) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (55) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (89) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 83 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 83 (expresion -> VARIABLE .)
    RPAREN          reduce using rule 83 (expresion -> VARIABLE .)
    COMMA           reduce using rule 83 (expresion -> VARIABLE .)
    PLUS            reduce using rule 107 (operandos -> VARIABLE .)
    MINUS           reduce using rule 107 (operandos -> VARIABLE .)
    TIMES           reduce using rule 107 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 107 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 107 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 107 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 107 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 107 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 107 (operandos -> VARIABLE .)
    DOT             shift and go to state 104
    LPAREN          shift and go to state 67
    EQUAL           shift and go to state 65

  ! RPAREN          [ reduce using rule 107 (operandos -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 107 (operandos -> VARIABLE .) ]


state 393

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo . RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    RDIAMOND        shift and go to state 402


state 394

    (147) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL . expresion SEMICOLON
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 61
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    LET             shift and go to state 64
    TIMES           shift and go to state 54
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    CONST           shift and go to state 52
    MUT             shift and go to state 35

    expresion                      shift and go to state 403
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    estructuracontrol              shift and go to state 62
    definicionvariable             shift and go to state 63
    llamarfuncion                  shift and go to state 28
    operandos                      shift and go to state 48
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37

state 395

    (148) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .

    PRINT           reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    RETURN          reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    NUMBER          reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FLOAT           reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRING          reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    TRUE            reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FALSE           reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    VARIABLE        reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    CONTINUE        reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    BREAK           reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LET             reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRUCT          reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FOR             reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    WHILE           reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    IF              reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LOOP            reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    ARRAY           reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    BITAND          reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LPAREN          reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    VEC             reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    CONST           reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    MUT             reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FN              reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    TIMES           reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    $end            reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    RBRACKET        reduce using rule 148 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)


state 396

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET . EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    EQUAL           shift and go to state 404


state 397

    (20) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET . program RBRACKET
    (21) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET . RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 406
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    program                        shift and go to state 405
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 398

    (143) if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .

    PRINT           reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    RETURN          reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    STRING          reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    TRUE            reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    FALSE           reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    BREAK           reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    LET             reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    FOR             reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    WHILE           reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    IF              reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    LOOP            reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    BITAND          reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    VEC             reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    CONST           reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    MUT             reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    FN              reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    TIMES           reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    $end            reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    COMMA           reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 143 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)


state 399

    (168) opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .

    SEMICOLON       reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    PRINT           reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    RETURN          reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    NUMBER          reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    FLOAT           reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    STRING          reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    TRUE            reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    FALSE           reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    VARIABLE        reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    CONTINUE        reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    BREAK           reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LET             reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    STRUCT          reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    FOR             reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    WHILE           reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    IF              reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LOOP            reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    ARRAY           reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    BITAND          reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LPAREN          reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    VEC             reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    CONST           reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    MUT             reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    FN              reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    TIMES           reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    $end            reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    COMMA           reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    PLUS            reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    MINUS           reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    DIVIDE          reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    RDIAMOND        reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LDIAMOND        reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LBRACKET        reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    RPAREN          reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    RBRACKET        reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    R_BRACKET       reduce using rule 168 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)


state 400

    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT . DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    DOUBLE_POINT    shift and go to state 407


state 401

    (145) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LET             reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    IF              reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FN              reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    $end            reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 145 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)


state 402

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND . EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    EQUAL           shift and go to state 408


state 403

    (147) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion . SEMICOLON
    (84) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 409

  ! SEMICOLON       [ reduce using rule 84 (expresion -> expresion .) ]


state 404

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL . L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    L_BRACKET       shift and go to state 410


state 405

    (20) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (24) definicion -> . definicionvariable
    (25) definicion -> . definicionestructura
    (26) definicion -> . definicionfuncion
    (27) definicion -> . definicionestructuradatos
    (14) estructuracontrol -> . for
    (15) estructuracontrol -> . while
    (16) estructuracontrol -> . if
    (17) estructuracontrol -> . loop
    (77) expresion -> . ops
    (78) expresion -> . NUMBER
    (79) expresion -> . FLOAT
    (80) expresion -> . STRING
    (81) expresion -> . TRUE
    (82) expresion -> . FALSE
    (83) expresion -> . VARIABLE
    (84) expresion -> . expresion
    (85) expresion -> . opbasicas
    (86) expresion -> . estructuracontrol
    (87) expresion -> . definicionvariable
    (88) expresion -> . llamarfuncion
    (132) continue -> . CONTINUE SEMICOLON
    (130) break -> . BREAK SEMICOLON
    (131) break -> . BREAK expresion SEMICOLON
    (150) funcionesesdata -> . funcionesvector
    (151) funcionesesdata -> . funcioneshashmap
    (152) funcionesesdata -> . funcionesarray
    (45) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (46) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (47) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (53) definicionvariable -> . LET VARIABLE SEMICOLON
    (54) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (55) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (56) definicionvariable -> . LET VARIABLE EQUAL expresion
    (57) definicionvariable -> . declaracion_constante
    (58) definicionvariable -> . declaracion_mutable
    (59) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (43) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (44) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (115) definicionfuncion -> . funciongenerica
    (28) definicionestructuradatos -> . hashmap
    (29) definicionestructuradatos -> . array
    (30) definicionestructuradatos -> . vector
    (31) definicionestructuradatos -> . list
    (18) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (19) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (20) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (119) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (120) while -> . WHILE expresion LBRACKET program RBRACKET
    (141) if -> . IF expresion LBRACKET program RBRACKET
    (142) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (143) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (144) loop -> . LOOP LBRACKET program RBRACKET
    (172) ops -> . operandos operaciones operandos
    (173) ops -> . operandos operaciones ops
    (164) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (165) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (166) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (167) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (168) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (169) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (170) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (171) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (89) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (90) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (91) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (92) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (153) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (154) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (155) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (156) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (157) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (158) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (159) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (36) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (37) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (38) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (121) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (122) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (123) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (124) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (133) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (134) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (135) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (136) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (137) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (138) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (139) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (140) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (116) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (35) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (117) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (118) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (145) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (146) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (147) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (148) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (149) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (32) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (105) operandos -> . NUMBER
    (106) operandos -> . FLOAT
    (107) operandos -> . VARIABLE
    (108) operandos -> . STRING
    (109) operandos -> . opbasicas
    (110) operandos -> . TIMES VARIABLE
    (111) operandos -> . BITAND VARIABLE
    (112) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 411
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 7
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    VARIABLE        shift and go to state 26
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    LET             shift and go to state 34
    STRUCT          shift and go to state 38
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    LOOP            shift and go to state 47
    ARRAY           shift and go to state 49
    BITAND          shift and go to state 50
    LPAREN          shift and go to state 6
    VEC             shift and go to state 51
    CONST           shift and go to state 52
    MUT             shift and go to state 35
    FN              shift and go to state 53
    TIMES           shift and go to state 54

    item                           shift and go to state 55
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    definicionvariable             shift and go to state 13
    definicionestructura           shift and go to state 14
    definicionfuncion              shift and go to state 15
    definicionestructuradatos      shift and go to state 16
    for                            shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    loop                           shift and go to state 20
    ops                            shift and go to state 21
    opbasicas                      shift and go to state 27
    llamarfuncion                  shift and go to state 28
    funcionesvector                shift and go to state 31
    funcioneshashmap               shift and go to state 32
    funcionesarray                 shift and go to state 33
    declaracion_constante          shift and go to state 36
    declaracion_mutable            shift and go to state 37
    funciongenerica                shift and go to state 39
    hashmap                        shift and go to state 40
    array                          shift and go to state 41
    vector                         shift and go to state 42
    list                           shift and go to state 43
    operandos                      shift and go to state 48

state 406

    (21) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .

    PRINT           reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    RETURN          reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    NUMBER          reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    FLOAT           reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    STRING          reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    TRUE            reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    FALSE           reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    CONTINUE        reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    BREAK           reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    LET             reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    STRUCT          reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    FOR             reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    WHILE           reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    IF              reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    LOOP            reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    ARRAY           reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    BITAND          reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    LPAREN          reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    VEC             reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    CONST           reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    MUT             reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    FN              reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    TIMES           reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    $end            reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    RPAREN          reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    COMMA           reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 21 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)


state 407

    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT . NEW LPAREN RPAREN SEMICOLON

    NEW             shift and go to state 412


state 408

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL . HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    HASHMAP         shift and go to state 413


state 409

    (147) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LET             reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    IF              reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FN              reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    $end            reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 147 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)


state 410

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET . NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    NUMBER          shift and go to state 414


state 411

    (20) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .

    PRINT           reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    RETURN          reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    STRING          reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    TRUE            reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    FALSE           reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    BREAK           reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    LET             reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    FOR             reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    WHILE           reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    IF              reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    LOOP            reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    BITAND          reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    VEC             reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    CONST           reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    MUT             reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    FN              reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    TIMES           reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    $end            reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    COMMA           reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 20 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)


state 412

    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 415


state 413

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP . DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    DOUBLE_POINT    shift and go to state 416


state 414

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER . SEMICOLON NUMBER R_BRACKET SEMICOLON

    SEMICOLON       shift and go to state 417


state 415

    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 418


state 416

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT . DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    DOUBLE_POINT    shift and go to state 419


state 417

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON . NUMBER R_BRACKET SEMICOLON

    NUMBER          shift and go to state 420


state 418

    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 421


state 419

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT . NEW LPAREN RPAREN SEMICOLON

    NEW             shift and go to state 422


state 420

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER . R_BRACKET SEMICOLON

    R_BRACKET       shift and go to state 423


state 421

    (149) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .

    PRINT           reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 149 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)


state 422

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 424


state 423

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 425


state 424

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 426


state 425

    (117) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .

    PRINT           reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    RETURN          reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    NUMBER          reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    STRING          reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    TRUE            reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    FALSE           reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    BREAK           reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    LET             reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    STRUCT          reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    FOR             reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    WHILE           reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    IF              reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    LOOP            reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    BITAND          reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    LPAREN          reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    VEC             reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    CONST           reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    MUT             reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    FN              reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    TIMES           reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    $end            reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    RBRACKET        reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 117 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)


state 426

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 427


state 427

    (35) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .

    PRINT           reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 35 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 8 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 26 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 60 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 61 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 70 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 77 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 78 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 107 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 108 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 121 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 121 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 124 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 124 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 140 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 145 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 145 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 149 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 152 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 187 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 205 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 205 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 213 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 216 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 218 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 230 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 238 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 239 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 243 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 244 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 246 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 248 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 250 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 254 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 263 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 290 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 292 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 309 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 310 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 322 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 330 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 333 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 341 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 343 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 344 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 353 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 354 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 391 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 403 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (item -> estructuracontrol)
WARNING: rejected rule (expresion -> estructuracontrol) in state 4
WARNING: reduce/reduce conflict in state 7 resolved using rule (expresion -> STRING)
WARNING: rejected rule (operandos -> STRING) in state 7
WARNING: reduce/reduce conflict in state 8 resolved using rule (item -> expresion)
WARNING: rejected rule (expresion -> expresion) in state 8
WARNING: reduce/reduce conflict in state 13 resolved using rule (definicion -> definicionvariable)
WARNING: rejected rule (expresion -> definicionvariable) in state 13
WARNING: reduce/reduce conflict in state 22 resolved using rule (expresion -> NUMBER)
WARNING: rejected rule (operandos -> NUMBER) in state 22
WARNING: reduce/reduce conflict in state 23 resolved using rule (expresion -> FLOAT)
WARNING: rejected rule (operandos -> FLOAT) in state 23
WARNING: reduce/reduce conflict in state 26 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (operandos -> VARIABLE) in state 26
WARNING: reduce/reduce conflict in state 27 resolved using rule (expresion -> opbasicas)
WARNING: rejected rule (operandos -> opbasicas) in state 27
WARNING: reduce/reduce conflict in state 61 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (operandos -> VARIABLE) in state 61
WARNING: reduce/reduce conflict in state 121 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (variables -> VARIABLE) in state 121
WARNING: reduce/reduce conflict in state 121 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (operandos -> VARIABLE) in state 121
WARNING: reduce/reduce conflict in state 126 resolved using rule (expresion -> STRING)
WARNING: rejected rule (operandos -> STRING) in state 126
WARNING: reduce/reduce conflict in state 205 resolved using rule (definicionvariable -> LET VARIABLE EQUAL expresion)
WARNING: rejected rule (expresion -> expresion) in state 205
WARNING: reduce/reduce conflict in state 238 resolved using rule (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN)
WARNING: rejected rule (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN) in state 238
WARNING: reduce/reduce conflict in state 292 resolved using rule (vars -> VARIABLE)
WARNING: rejected rule (expresion -> VARIABLE) in state 292
WARNING: reduce/reduce conflict in state 295 resolved using rule (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON)
WARNING: rejected rule (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON) in state 295
WARNING: reduce/reduce conflict in state 298 resolved using rule (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON)
WARNING: rejected rule (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON) in state 298
WARNING: reduce/reduce conflict in state 299 resolved using rule (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON)
WARNING: rejected rule (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON) in state 299
WARNING: reduce/reduce conflict in state 304 resolved using rule (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON)
WARNING: rejected rule (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON) in state 304
WARNING: reduce/reduce conflict in state 392 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (operandos -> VARIABLE) in state 392
WARNING: Rule (expresion -> expresion) is never reduced
WARNING: Rule (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON) is never reduced
WARNING: Rule (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON) is never reduced
WARNING: Rule (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON) is never reduced
WARNING: Rule (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON) is never reduced
