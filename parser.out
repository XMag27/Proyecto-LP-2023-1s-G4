Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    BITAND
    BITOR
    BITXOR
    CONTINUE
    DIVIDE
    ENUM
    EXCLAMATION
    FOR
    IMPL
    MAIN
    MATCH
    MINUS
    MOD
    PERCENTAGE
    PLUS
    POINT
    PRINT
    PUB
    REF
    RETURN
    STATIC
    TIMES
    TRAIT
    TYPE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> programa item
Rule 2     programa -> item
Rule 3     item -> declaracion
Rule 4     item -> importacion
Rule 5     item -> funcion
Rule 6     item -> error
Rule 7     declaracion -> declaracion_variable
Rule 8     declaracion -> declaracion_estructura
Rule 9     declaracion -> declaracion_constante
Rule 10    declaracion -> declaracion_mutable
Rule 11    declaracion -> declaracion_array
Rule 12    declaracion -> declaracion_struct_control
Rule 13    declaracion -> declaracion_vector
Rule 14    declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 15    declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 16    declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON
Rule 17    declaracion_variable -> LET VARIABLE SEMICOLON
Rule 18    declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON
Rule 19    declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
Rule 20    campos -> campos COMMA campo
Rule 21    campos -> campo
Rule 22    campo -> VARIABLE DOUBLE_POINT tipo
Rule 23    tipo -> tipo_simple
Rule 24    tipo_simple -> INT8
Rule 25    tipo_simple -> INT16
Rule 26    tipo_simple -> INT32
Rule 27    tipo_simple -> INT64
Rule 28    tipo_simple -> UINT8
Rule 29    tipo_simple -> UINT16
Rule 30    tipo_simple -> UINT32
Rule 31    tipo_simple -> UINT64
Rule 32    tipo_simple -> FLOAT32
Rule 33    tipo_simple -> FLOAT64
Rule 34    tipo_simple -> BOOL
Rule 35    tipo_simple -> CHAR
Rule 36    tipo_simple -> STR
Rule 37    importacion -> USE VARIABLE SEMICOLON
Rule 38    funcion -> funcion_generica
Rule 39    funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque
Rule 40    parametros -> parametros COMMA parametro
Rule 41    parametros -> parametro
Rule 42    parametros -> empty
Rule 43    empty -> <empty>
Rule 44    parametro -> VARIABLE DOUBLE_POINT tipo
Rule 45    bloque -> LBRACKET sentencias RBRACKET
Rule 46    sentencias -> sentencias sentencia
Rule 47    sentencias -> sentencia
Rule 48    sentencia -> expresion SEMICOLON
Rule 49    sentencia -> declaracion
Rule 50    sentencia -> asignacion
Rule 51    sentencia -> break
Rule 52    sentencia -> funciones_vector
Rule 53    asignacion -> VARIABLE EQUAL expresion SEMICOLON
Rule 54    expresion -> expresion_literal
Rule 55    expresion -> expresion_variable
Rule 56    expresion -> expresion_funcion
Rule 57    expresion -> expresion_estructura
Rule 58    expresion_literal -> literal
Rule 59    literal -> NUMBER
Rule 60    literal -> STRING
Rule 61    literal -> boolean
Rule 62    boolean -> TRUE
Rule 63    boolean -> FALSE
Rule 64    expresion_variable -> VARIABLE
Rule 65    expresion_funcion -> VARIABLE LPAREN argumentos RPAREN SEMICOLON
Rule 66    expresion_estructura -> hashmap
Rule 67    expresion_estructura -> array
Rule 68    hashmap -> LDIAMOND hashmap_types RDIAMOND
Rule 69    hashmap_types -> hashmap_types COMMA hashmap_type
Rule 70    hashmap_types -> hashmap_type
Rule 71    hashmap_type -> tipo
Rule 72    argumentos -> argumentos COMMA argumento
Rule 73    argumentos -> argumento
Rule 74    argumentos -> empty
Rule 75    argumento -> expresion
Rule 76    declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON
Rule 77    declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
Rule 78    array -> ARRAY L_BRACKET var_array R_BRACKET
Rule 79    var_array -> tipo SEMICOLON NUMBER
Rule 80    array_fill -> VARIABLE COMMA array_fill
Rule 81    array_fill -> VARIABLE
Rule 82    declaracion_struct_control -> while
Rule 83    declaracion_struct_control -> if
Rule 84    declaracion_struct_control -> loop
Rule 85    while -> WHILE expresion_condicion bloque
Rule 86    break -> BREAK SEMICOLON
Rule 87    declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 88    declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 89    declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON
Rule 90    declaracion_constante -> CONST VARIABLE SEMICOLON
Rule 91    declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 92    declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 93    declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON
Rule 94    declaracion_mutable -> MUT VARIABLE SEMICOLON
Rule 95    if -> IF condicion bloque
Rule 96    if -> IF condicion bloque ELSE bloque
Rule 97    condicion -> expresion_condicion
Rule 98    condicion -> expresion_condicion logic_operator expresion_condicion
Rule 99    logic_operator -> AND
Rule 100   logic_operator -> OR
Rule 101   comparacion -> EQUAL_EQUAL
Rule 102   comparacion -> NOT_EQUAL
Rule 103   comparacion -> GREATER
Rule 104   comparacion -> GREATER_EQUAL
Rule 105   comparacion -> LESS
Rule 106   comparacion -> LESS_EQUAL
Rule 107   expresion_condicion -> boolean
Rule 108   expresion_condicion -> expresion_variable comparacion expresion_variable
Rule 109   expresion_condicion -> expresion_variable comparacion expresion_literal
Rule 110   expresion_condicion -> expresion_literal comparacion expresion_variable
Rule 111   expresion_condicion -> expresion_literal comparacion expresion_literal
Rule 112   loop -> LOOP bloque
Rule 113   declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
Rule 114   declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
Rule 115   declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
Rule 116   declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
Rule 117   funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
Rule 118   funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON
Rule 119   funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
Rule 120   funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
Rule 121   funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
Rule 122   funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
Rule 123   funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
Rule 124   funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
Rule 125   funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
Rule 126   funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
Rule 127   funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON

Terminals, with rules where they appear

AND                  : 99
ARRAY                : 78
ARROW                : 39
AS                   : 
BITAND               : 
BITOR                : 
BITXOR               : 
BOOL                 : 34
BREAK                : 86
CHAR                 : 35
CLEAR                : 124
COMMA                : 20 40 69 72 80 122 125
CONST                : 87 88 89 90
CONTINUE             : 
DIVIDE               : 
DOT                  : 117 118 119 120 121 122 123 124 125 126 127
DOUBLE_POINT         : 14 15 22 44 76 77 87 88 91 92 113 114 115 116
ELSE                 : 96
ENUM                 : 
EQUAL                : 14 16 53 76 87 89 91 93 113 115
EQUAL_EQUAL          : 101
EXCLAMATION          : 
FALSE                : 63
FLOAT32              : 32
FLOAT64              : 33
FN                   : 39
FOR                  : 
GET                  : 121
GREATER              : 103
GREATER_EQUAL        : 104
IF                   : 95 96
IMPL                 : 
INT16                : 25
INT32                : 26
INT64                : 27
INT8                 : 24
IS_EMPTY             : 120
ITER                 : 127
LBRACKET             : 18 19 45
LDIAMOND             : 68 113 114 115 116
LEN                  : 119
LESS                 : 105
LESS_EQUAL           : 106
LET                  : 14 15 16 17 76 77 113 114 115 116
LOOP                 : 112
LPAREN               : 39 65 117 118 119 120 121 122 123 124 125 126 127
L_BRACKET            : 76 78
MAIN                 : 
MATCH                : 
MINUS                : 
MOD                  : 
MUT                  : 76 77 91 92 93 94 115 116
NOT_EQUAL            : 102
NUMBER               : 59 79 121 122
OR                   : 100
PERCENTAGE           : 
PLUS                 : 
POINT                : 
POP                  : 118
PRINT                : 
PUB                  : 
PUSH                 : 117
RBRACKET             : 18 19 45
RDIAMOND             : 68 113 114 115 116
REF                  : 
REMOVE               : 123
RETURN               : 
REVERSE              : 126
RPAREN               : 39 65 117 118 119 120 121 122 123 124 125 126 127
R_BRACKET            : 76 78
SEMICOLON            : 14 15 16 17 18 19 37 48 53 65 76 77 79 86 87 88 89 90 91 92 93 94 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127
SET                  : 122
STATIC               : 
STR                  : 36
STRING               : 60
STRUCT               : 18 19
SWAP                 : 125
TIMES                : 
TRAIT                : 
TRUE                 : 62
TYPE                 : 
UINT16               : 29
UINT32               : 30
UINT64               : 31
UINT8                : 28
USE                  : 37
VARIABLE             : 14 15 16 17 18 19 22 37 39 44 53 64 65 76 77 80 81 87 88 89 90 91 92 93 94 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127
VEC                  : 113 114 115 116
WHILE                : 85
error                : 6

Nonterminals, with rules where they appear

argumento            : 72 73
argumentos           : 65 72
array                : 67 76 77
array_fill           : 76 80
asignacion           : 50
bloque               : 39 85 95 96 96 112
boolean              : 61 107
break                : 51
campo                : 20 21
campos               : 18 20
comparacion          : 108 109 110 111
condicion            : 95 96
declaracion          : 3 49
declaracion_array    : 11
declaracion_constante : 9
declaracion_estructura : 8
declaracion_mutable  : 10
declaracion_struct_control : 12
declaracion_variable : 7
declaracion_vector   : 13
empty                : 42 74
expresion            : 14 16 48 53 75 87 89 91 93 113 115 117 122 123 125 125
expresion_condicion  : 85 97 98 98
expresion_estructura : 57
expresion_funcion    : 56
expresion_literal    : 54 109 110 111 111
expresion_variable   : 55 108 108 109 110
funcion              : 5
funcion_generica     : 38
funciones_vector     : 52
hashmap              : 66
hashmap_type         : 69 70
hashmap_types        : 68 69
if                   : 83
importacion          : 4
item                 : 1 2
literal              : 58
logic_operator       : 98
loop                 : 84
parametro            : 40 41
parametros           : 39 40
programa             : 1 0
sentencia            : 46 47
sentencias           : 45 46
tipo                 : 14 15 22 44 71 79 87 88 91 92 113 114 115 116
tipo_simple          : 23 39
var_array            : 78
while                : 82

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . programa item
    (2) programa -> . item
    (3) item -> . declaracion
    (4) item -> . importacion
    (5) item -> . funcion
    (6) item -> . error
    (7) declaracion -> . declaracion_variable
    (8) declaracion -> . declaracion_estructura
    (9) declaracion -> . declaracion_constante
    (10) declaracion -> . declaracion_mutable
    (11) declaracion -> . declaracion_array
    (12) declaracion -> . declaracion_struct_control
    (13) declaracion -> . declaracion_vector
    (37) importacion -> . USE VARIABLE SEMICOLON
    (38) funcion -> . funcion_generica
    (14) declaracion_variable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (15) declaracion_variable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (16) declaracion_variable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (17) declaracion_variable -> . LET VARIABLE SEMICOLON
    (18) declaracion_estructura -> . STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON
    (19) declaracion_estructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (87) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (88) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (89) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (90) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (91) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (92) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (93) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (94) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (76) declaracion_array -> . LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON
    (77) declaracion_array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (82) declaracion_struct_control -> . while
    (83) declaracion_struct_control -> . if
    (84) declaracion_struct_control -> . loop
    (113) declaracion_vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (114) declaracion_vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (115) declaracion_vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (39) funcion_generica -> . FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque
    (85) while -> . WHILE expresion_condicion bloque
    (95) if -> . IF condicion bloque
    (96) if -> . IF condicion bloque ELSE bloque
    (112) loop -> . LOOP bloque

    error           shift and go to state 6
    USE             shift and go to state 14
    LET             shift and go to state 16
    STRUCT          shift and go to state 17
    CONST           shift and go to state 18
    MUT             shift and go to state 19
    FN              shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    LOOP            shift and go to state 26

    programa                       shift and go to state 1
    item                           shift and go to state 2
    declaracion                    shift and go to state 3
    importacion                    shift and go to state 4
    funcion                        shift and go to state 5
    declaracion_variable           shift and go to state 7
    declaracion_estructura         shift and go to state 8
    declaracion_constante          shift and go to state 9
    declaracion_mutable            shift and go to state 10
    declaracion_array              shift and go to state 11
    declaracion_struct_control     shift and go to state 12
    declaracion_vector             shift and go to state 13
    funcion_generica               shift and go to state 15
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22

state 1

    (0) S' -> programa .
    (1) programa -> programa . item
    (3) item -> . declaracion
    (4) item -> . importacion
    (5) item -> . funcion
    (6) item -> . error
    (7) declaracion -> . declaracion_variable
    (8) declaracion -> . declaracion_estructura
    (9) declaracion -> . declaracion_constante
    (10) declaracion -> . declaracion_mutable
    (11) declaracion -> . declaracion_array
    (12) declaracion -> . declaracion_struct_control
    (13) declaracion -> . declaracion_vector
    (37) importacion -> . USE VARIABLE SEMICOLON
    (38) funcion -> . funcion_generica
    (14) declaracion_variable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (15) declaracion_variable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (16) declaracion_variable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (17) declaracion_variable -> . LET VARIABLE SEMICOLON
    (18) declaracion_estructura -> . STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON
    (19) declaracion_estructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (87) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (88) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (89) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (90) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (91) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (92) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (93) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (94) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (76) declaracion_array -> . LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON
    (77) declaracion_array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (82) declaracion_struct_control -> . while
    (83) declaracion_struct_control -> . if
    (84) declaracion_struct_control -> . loop
    (113) declaracion_vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (114) declaracion_vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (115) declaracion_vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (39) funcion_generica -> . FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque
    (85) while -> . WHILE expresion_condicion bloque
    (95) if -> . IF condicion bloque
    (96) if -> . IF condicion bloque ELSE bloque
    (112) loop -> . LOOP bloque

    error           shift and go to state 6
    USE             shift and go to state 14
    LET             shift and go to state 16
    STRUCT          shift and go to state 17
    CONST           shift and go to state 18
    MUT             shift and go to state 19
    FN              shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    LOOP            shift and go to state 26

    item                           shift and go to state 27
    declaracion                    shift and go to state 3
    importacion                    shift and go to state 4
    funcion                        shift and go to state 5
    declaracion_variable           shift and go to state 7
    declaracion_estructura         shift and go to state 8
    declaracion_constante          shift and go to state 9
    declaracion_mutable            shift and go to state 10
    declaracion_array              shift and go to state 11
    declaracion_struct_control     shift and go to state 12
    declaracion_vector             shift and go to state 13
    funcion_generica               shift and go to state 15
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22

state 2

    (2) programa -> item .

    error           reduce using rule 2 (programa -> item .)
    USE             reduce using rule 2 (programa -> item .)
    LET             reduce using rule 2 (programa -> item .)
    STRUCT          reduce using rule 2 (programa -> item .)
    CONST           reduce using rule 2 (programa -> item .)
    MUT             reduce using rule 2 (programa -> item .)
    FN              reduce using rule 2 (programa -> item .)
    WHILE           reduce using rule 2 (programa -> item .)
    IF              reduce using rule 2 (programa -> item .)
    LOOP            reduce using rule 2 (programa -> item .)
    $end            reduce using rule 2 (programa -> item .)


state 3

    (3) item -> declaracion .

    error           reduce using rule 3 (item -> declaracion .)
    USE             reduce using rule 3 (item -> declaracion .)
    LET             reduce using rule 3 (item -> declaracion .)
    STRUCT          reduce using rule 3 (item -> declaracion .)
    CONST           reduce using rule 3 (item -> declaracion .)
    MUT             reduce using rule 3 (item -> declaracion .)
    FN              reduce using rule 3 (item -> declaracion .)
    WHILE           reduce using rule 3 (item -> declaracion .)
    IF              reduce using rule 3 (item -> declaracion .)
    LOOP            reduce using rule 3 (item -> declaracion .)
    $end            reduce using rule 3 (item -> declaracion .)


state 4

    (4) item -> importacion .

    error           reduce using rule 4 (item -> importacion .)
    USE             reduce using rule 4 (item -> importacion .)
    LET             reduce using rule 4 (item -> importacion .)
    STRUCT          reduce using rule 4 (item -> importacion .)
    CONST           reduce using rule 4 (item -> importacion .)
    MUT             reduce using rule 4 (item -> importacion .)
    FN              reduce using rule 4 (item -> importacion .)
    WHILE           reduce using rule 4 (item -> importacion .)
    IF              reduce using rule 4 (item -> importacion .)
    LOOP            reduce using rule 4 (item -> importacion .)
    $end            reduce using rule 4 (item -> importacion .)


state 5

    (5) item -> funcion .

    error           reduce using rule 5 (item -> funcion .)
    USE             reduce using rule 5 (item -> funcion .)
    LET             reduce using rule 5 (item -> funcion .)
    STRUCT          reduce using rule 5 (item -> funcion .)
    CONST           reduce using rule 5 (item -> funcion .)
    MUT             reduce using rule 5 (item -> funcion .)
    FN              reduce using rule 5 (item -> funcion .)
    WHILE           reduce using rule 5 (item -> funcion .)
    IF              reduce using rule 5 (item -> funcion .)
    LOOP            reduce using rule 5 (item -> funcion .)
    $end            reduce using rule 5 (item -> funcion .)


state 6

    (6) item -> error .

    error           reduce using rule 6 (item -> error .)
    USE             reduce using rule 6 (item -> error .)
    LET             reduce using rule 6 (item -> error .)
    STRUCT          reduce using rule 6 (item -> error .)
    CONST           reduce using rule 6 (item -> error .)
    MUT             reduce using rule 6 (item -> error .)
    FN              reduce using rule 6 (item -> error .)
    WHILE           reduce using rule 6 (item -> error .)
    IF              reduce using rule 6 (item -> error .)
    LOOP            reduce using rule 6 (item -> error .)
    $end            reduce using rule 6 (item -> error .)


state 7

    (7) declaracion -> declaracion_variable .

    error           reduce using rule 7 (declaracion -> declaracion_variable .)
    USE             reduce using rule 7 (declaracion -> declaracion_variable .)
    LET             reduce using rule 7 (declaracion -> declaracion_variable .)
    STRUCT          reduce using rule 7 (declaracion -> declaracion_variable .)
    CONST           reduce using rule 7 (declaracion -> declaracion_variable .)
    MUT             reduce using rule 7 (declaracion -> declaracion_variable .)
    FN              reduce using rule 7 (declaracion -> declaracion_variable .)
    WHILE           reduce using rule 7 (declaracion -> declaracion_variable .)
    IF              reduce using rule 7 (declaracion -> declaracion_variable .)
    LOOP            reduce using rule 7 (declaracion -> declaracion_variable .)
    $end            reduce using rule 7 (declaracion -> declaracion_variable .)
    RBRACKET        reduce using rule 7 (declaracion -> declaracion_variable .)
    VARIABLE        reduce using rule 7 (declaracion -> declaracion_variable .)
    BREAK           reduce using rule 7 (declaracion -> declaracion_variable .)
    NUMBER          reduce using rule 7 (declaracion -> declaracion_variable .)
    STRING          reduce using rule 7 (declaracion -> declaracion_variable .)
    LDIAMOND        reduce using rule 7 (declaracion -> declaracion_variable .)
    ARRAY           reduce using rule 7 (declaracion -> declaracion_variable .)
    TRUE            reduce using rule 7 (declaracion -> declaracion_variable .)
    FALSE           reduce using rule 7 (declaracion -> declaracion_variable .)


state 8

    (8) declaracion -> declaracion_estructura .

    error           reduce using rule 8 (declaracion -> declaracion_estructura .)
    USE             reduce using rule 8 (declaracion -> declaracion_estructura .)
    LET             reduce using rule 8 (declaracion -> declaracion_estructura .)
    STRUCT          reduce using rule 8 (declaracion -> declaracion_estructura .)
    CONST           reduce using rule 8 (declaracion -> declaracion_estructura .)
    MUT             reduce using rule 8 (declaracion -> declaracion_estructura .)
    FN              reduce using rule 8 (declaracion -> declaracion_estructura .)
    WHILE           reduce using rule 8 (declaracion -> declaracion_estructura .)
    IF              reduce using rule 8 (declaracion -> declaracion_estructura .)
    LOOP            reduce using rule 8 (declaracion -> declaracion_estructura .)
    $end            reduce using rule 8 (declaracion -> declaracion_estructura .)
    RBRACKET        reduce using rule 8 (declaracion -> declaracion_estructura .)
    VARIABLE        reduce using rule 8 (declaracion -> declaracion_estructura .)
    BREAK           reduce using rule 8 (declaracion -> declaracion_estructura .)
    NUMBER          reduce using rule 8 (declaracion -> declaracion_estructura .)
    STRING          reduce using rule 8 (declaracion -> declaracion_estructura .)
    LDIAMOND        reduce using rule 8 (declaracion -> declaracion_estructura .)
    ARRAY           reduce using rule 8 (declaracion -> declaracion_estructura .)
    TRUE            reduce using rule 8 (declaracion -> declaracion_estructura .)
    FALSE           reduce using rule 8 (declaracion -> declaracion_estructura .)


state 9

    (9) declaracion -> declaracion_constante .

    error           reduce using rule 9 (declaracion -> declaracion_constante .)
    USE             reduce using rule 9 (declaracion -> declaracion_constante .)
    LET             reduce using rule 9 (declaracion -> declaracion_constante .)
    STRUCT          reduce using rule 9 (declaracion -> declaracion_constante .)
    CONST           reduce using rule 9 (declaracion -> declaracion_constante .)
    MUT             reduce using rule 9 (declaracion -> declaracion_constante .)
    FN              reduce using rule 9 (declaracion -> declaracion_constante .)
    WHILE           reduce using rule 9 (declaracion -> declaracion_constante .)
    IF              reduce using rule 9 (declaracion -> declaracion_constante .)
    LOOP            reduce using rule 9 (declaracion -> declaracion_constante .)
    $end            reduce using rule 9 (declaracion -> declaracion_constante .)
    RBRACKET        reduce using rule 9 (declaracion -> declaracion_constante .)
    VARIABLE        reduce using rule 9 (declaracion -> declaracion_constante .)
    BREAK           reduce using rule 9 (declaracion -> declaracion_constante .)
    NUMBER          reduce using rule 9 (declaracion -> declaracion_constante .)
    STRING          reduce using rule 9 (declaracion -> declaracion_constante .)
    LDIAMOND        reduce using rule 9 (declaracion -> declaracion_constante .)
    ARRAY           reduce using rule 9 (declaracion -> declaracion_constante .)
    TRUE            reduce using rule 9 (declaracion -> declaracion_constante .)
    FALSE           reduce using rule 9 (declaracion -> declaracion_constante .)


state 10

    (10) declaracion -> declaracion_mutable .

    error           reduce using rule 10 (declaracion -> declaracion_mutable .)
    USE             reduce using rule 10 (declaracion -> declaracion_mutable .)
    LET             reduce using rule 10 (declaracion -> declaracion_mutable .)
    STRUCT          reduce using rule 10 (declaracion -> declaracion_mutable .)
    CONST           reduce using rule 10 (declaracion -> declaracion_mutable .)
    MUT             reduce using rule 10 (declaracion -> declaracion_mutable .)
    FN              reduce using rule 10 (declaracion -> declaracion_mutable .)
    WHILE           reduce using rule 10 (declaracion -> declaracion_mutable .)
    IF              reduce using rule 10 (declaracion -> declaracion_mutable .)
    LOOP            reduce using rule 10 (declaracion -> declaracion_mutable .)
    $end            reduce using rule 10 (declaracion -> declaracion_mutable .)
    RBRACKET        reduce using rule 10 (declaracion -> declaracion_mutable .)
    VARIABLE        reduce using rule 10 (declaracion -> declaracion_mutable .)
    BREAK           reduce using rule 10 (declaracion -> declaracion_mutable .)
    NUMBER          reduce using rule 10 (declaracion -> declaracion_mutable .)
    STRING          reduce using rule 10 (declaracion -> declaracion_mutable .)
    LDIAMOND        reduce using rule 10 (declaracion -> declaracion_mutable .)
    ARRAY           reduce using rule 10 (declaracion -> declaracion_mutable .)
    TRUE            reduce using rule 10 (declaracion -> declaracion_mutable .)
    FALSE           reduce using rule 10 (declaracion -> declaracion_mutable .)


state 11

    (11) declaracion -> declaracion_array .

    error           reduce using rule 11 (declaracion -> declaracion_array .)
    USE             reduce using rule 11 (declaracion -> declaracion_array .)
    LET             reduce using rule 11 (declaracion -> declaracion_array .)
    STRUCT          reduce using rule 11 (declaracion -> declaracion_array .)
    CONST           reduce using rule 11 (declaracion -> declaracion_array .)
    MUT             reduce using rule 11 (declaracion -> declaracion_array .)
    FN              reduce using rule 11 (declaracion -> declaracion_array .)
    WHILE           reduce using rule 11 (declaracion -> declaracion_array .)
    IF              reduce using rule 11 (declaracion -> declaracion_array .)
    LOOP            reduce using rule 11 (declaracion -> declaracion_array .)
    $end            reduce using rule 11 (declaracion -> declaracion_array .)
    RBRACKET        reduce using rule 11 (declaracion -> declaracion_array .)
    VARIABLE        reduce using rule 11 (declaracion -> declaracion_array .)
    BREAK           reduce using rule 11 (declaracion -> declaracion_array .)
    NUMBER          reduce using rule 11 (declaracion -> declaracion_array .)
    STRING          reduce using rule 11 (declaracion -> declaracion_array .)
    LDIAMOND        reduce using rule 11 (declaracion -> declaracion_array .)
    ARRAY           reduce using rule 11 (declaracion -> declaracion_array .)
    TRUE            reduce using rule 11 (declaracion -> declaracion_array .)
    FALSE           reduce using rule 11 (declaracion -> declaracion_array .)


state 12

    (12) declaracion -> declaracion_struct_control .

    error           reduce using rule 12 (declaracion -> declaracion_struct_control .)
    USE             reduce using rule 12 (declaracion -> declaracion_struct_control .)
    LET             reduce using rule 12 (declaracion -> declaracion_struct_control .)
    STRUCT          reduce using rule 12 (declaracion -> declaracion_struct_control .)
    CONST           reduce using rule 12 (declaracion -> declaracion_struct_control .)
    MUT             reduce using rule 12 (declaracion -> declaracion_struct_control .)
    FN              reduce using rule 12 (declaracion -> declaracion_struct_control .)
    WHILE           reduce using rule 12 (declaracion -> declaracion_struct_control .)
    IF              reduce using rule 12 (declaracion -> declaracion_struct_control .)
    LOOP            reduce using rule 12 (declaracion -> declaracion_struct_control .)
    $end            reduce using rule 12 (declaracion -> declaracion_struct_control .)
    RBRACKET        reduce using rule 12 (declaracion -> declaracion_struct_control .)
    VARIABLE        reduce using rule 12 (declaracion -> declaracion_struct_control .)
    BREAK           reduce using rule 12 (declaracion -> declaracion_struct_control .)
    NUMBER          reduce using rule 12 (declaracion -> declaracion_struct_control .)
    STRING          reduce using rule 12 (declaracion -> declaracion_struct_control .)
    LDIAMOND        reduce using rule 12 (declaracion -> declaracion_struct_control .)
    ARRAY           reduce using rule 12 (declaracion -> declaracion_struct_control .)
    TRUE            reduce using rule 12 (declaracion -> declaracion_struct_control .)
    FALSE           reduce using rule 12 (declaracion -> declaracion_struct_control .)


state 13

    (13) declaracion -> declaracion_vector .

    error           reduce using rule 13 (declaracion -> declaracion_vector .)
    USE             reduce using rule 13 (declaracion -> declaracion_vector .)
    LET             reduce using rule 13 (declaracion -> declaracion_vector .)
    STRUCT          reduce using rule 13 (declaracion -> declaracion_vector .)
    CONST           reduce using rule 13 (declaracion -> declaracion_vector .)
    MUT             reduce using rule 13 (declaracion -> declaracion_vector .)
    FN              reduce using rule 13 (declaracion -> declaracion_vector .)
    WHILE           reduce using rule 13 (declaracion -> declaracion_vector .)
    IF              reduce using rule 13 (declaracion -> declaracion_vector .)
    LOOP            reduce using rule 13 (declaracion -> declaracion_vector .)
    $end            reduce using rule 13 (declaracion -> declaracion_vector .)
    RBRACKET        reduce using rule 13 (declaracion -> declaracion_vector .)
    VARIABLE        reduce using rule 13 (declaracion -> declaracion_vector .)
    BREAK           reduce using rule 13 (declaracion -> declaracion_vector .)
    NUMBER          reduce using rule 13 (declaracion -> declaracion_vector .)
    STRING          reduce using rule 13 (declaracion -> declaracion_vector .)
    LDIAMOND        reduce using rule 13 (declaracion -> declaracion_vector .)
    ARRAY           reduce using rule 13 (declaracion -> declaracion_vector .)
    TRUE            reduce using rule 13 (declaracion -> declaracion_vector .)
    FALSE           reduce using rule 13 (declaracion -> declaracion_vector .)


state 14

    (37) importacion -> USE . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 28


state 15

    (38) funcion -> funcion_generica .

    error           reduce using rule 38 (funcion -> funcion_generica .)
    USE             reduce using rule 38 (funcion -> funcion_generica .)
    LET             reduce using rule 38 (funcion -> funcion_generica .)
    STRUCT          reduce using rule 38 (funcion -> funcion_generica .)
    CONST           reduce using rule 38 (funcion -> funcion_generica .)
    MUT             reduce using rule 38 (funcion -> funcion_generica .)
    FN              reduce using rule 38 (funcion -> funcion_generica .)
    WHILE           reduce using rule 38 (funcion -> funcion_generica .)
    IF              reduce using rule 38 (funcion -> funcion_generica .)
    LOOP            reduce using rule 38 (funcion -> funcion_generica .)
    $end            reduce using rule 38 (funcion -> funcion_generica .)


state 16

    (14) declaracion_variable -> LET . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (15) declaracion_variable -> LET . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (16) declaracion_variable -> LET . VARIABLE EQUAL expresion SEMICOLON
    (17) declaracion_variable -> LET . VARIABLE SEMICOLON
    (76) declaracion_array -> LET . MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON
    (77) declaracion_array -> LET . MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (113) declaracion_vector -> LET . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (114) declaracion_vector -> LET . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (115) declaracion_vector -> LET . MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> LET . MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON

    VARIABLE        shift and go to state 29
    MUT             shift and go to state 30


state 17

    (18) declaracion_estructura -> STRUCT . VARIABLE LBRACKET campos RBRACKET SEMICOLON
    (19) declaracion_estructura -> STRUCT . VARIABLE LBRACKET RBRACKET SEMICOLON

    VARIABLE        shift and go to state 31


state 18

    (87) declaracion_constante -> CONST . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (88) declaracion_constante -> CONST . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (89) declaracion_constante -> CONST . VARIABLE EQUAL expresion SEMICOLON
    (90) declaracion_constante -> CONST . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 32


state 19

    (91) declaracion_mutable -> MUT . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (92) declaracion_mutable -> MUT . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (93) declaracion_mutable -> MUT . VARIABLE EQUAL expresion SEMICOLON
    (94) declaracion_mutable -> MUT . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 33


state 20

    (82) declaracion_struct_control -> while .

    error           reduce using rule 82 (declaracion_struct_control -> while .)
    USE             reduce using rule 82 (declaracion_struct_control -> while .)
    LET             reduce using rule 82 (declaracion_struct_control -> while .)
    STRUCT          reduce using rule 82 (declaracion_struct_control -> while .)
    CONST           reduce using rule 82 (declaracion_struct_control -> while .)
    MUT             reduce using rule 82 (declaracion_struct_control -> while .)
    FN              reduce using rule 82 (declaracion_struct_control -> while .)
    WHILE           reduce using rule 82 (declaracion_struct_control -> while .)
    IF              reduce using rule 82 (declaracion_struct_control -> while .)
    LOOP            reduce using rule 82 (declaracion_struct_control -> while .)
    $end            reduce using rule 82 (declaracion_struct_control -> while .)
    RBRACKET        reduce using rule 82 (declaracion_struct_control -> while .)
    VARIABLE        reduce using rule 82 (declaracion_struct_control -> while .)
    BREAK           reduce using rule 82 (declaracion_struct_control -> while .)
    NUMBER          reduce using rule 82 (declaracion_struct_control -> while .)
    STRING          reduce using rule 82 (declaracion_struct_control -> while .)
    LDIAMOND        reduce using rule 82 (declaracion_struct_control -> while .)
    ARRAY           reduce using rule 82 (declaracion_struct_control -> while .)
    TRUE            reduce using rule 82 (declaracion_struct_control -> while .)
    FALSE           reduce using rule 82 (declaracion_struct_control -> while .)


state 21

    (83) declaracion_struct_control -> if .

    error           reduce using rule 83 (declaracion_struct_control -> if .)
    USE             reduce using rule 83 (declaracion_struct_control -> if .)
    LET             reduce using rule 83 (declaracion_struct_control -> if .)
    STRUCT          reduce using rule 83 (declaracion_struct_control -> if .)
    CONST           reduce using rule 83 (declaracion_struct_control -> if .)
    MUT             reduce using rule 83 (declaracion_struct_control -> if .)
    FN              reduce using rule 83 (declaracion_struct_control -> if .)
    WHILE           reduce using rule 83 (declaracion_struct_control -> if .)
    IF              reduce using rule 83 (declaracion_struct_control -> if .)
    LOOP            reduce using rule 83 (declaracion_struct_control -> if .)
    $end            reduce using rule 83 (declaracion_struct_control -> if .)
    RBRACKET        reduce using rule 83 (declaracion_struct_control -> if .)
    VARIABLE        reduce using rule 83 (declaracion_struct_control -> if .)
    BREAK           reduce using rule 83 (declaracion_struct_control -> if .)
    NUMBER          reduce using rule 83 (declaracion_struct_control -> if .)
    STRING          reduce using rule 83 (declaracion_struct_control -> if .)
    LDIAMOND        reduce using rule 83 (declaracion_struct_control -> if .)
    ARRAY           reduce using rule 83 (declaracion_struct_control -> if .)
    TRUE            reduce using rule 83 (declaracion_struct_control -> if .)
    FALSE           reduce using rule 83 (declaracion_struct_control -> if .)


state 22

    (84) declaracion_struct_control -> loop .

    error           reduce using rule 84 (declaracion_struct_control -> loop .)
    USE             reduce using rule 84 (declaracion_struct_control -> loop .)
    LET             reduce using rule 84 (declaracion_struct_control -> loop .)
    STRUCT          reduce using rule 84 (declaracion_struct_control -> loop .)
    CONST           reduce using rule 84 (declaracion_struct_control -> loop .)
    MUT             reduce using rule 84 (declaracion_struct_control -> loop .)
    FN              reduce using rule 84 (declaracion_struct_control -> loop .)
    WHILE           reduce using rule 84 (declaracion_struct_control -> loop .)
    IF              reduce using rule 84 (declaracion_struct_control -> loop .)
    LOOP            reduce using rule 84 (declaracion_struct_control -> loop .)
    $end            reduce using rule 84 (declaracion_struct_control -> loop .)
    RBRACKET        reduce using rule 84 (declaracion_struct_control -> loop .)
    VARIABLE        reduce using rule 84 (declaracion_struct_control -> loop .)
    BREAK           reduce using rule 84 (declaracion_struct_control -> loop .)
    NUMBER          reduce using rule 84 (declaracion_struct_control -> loop .)
    STRING          reduce using rule 84 (declaracion_struct_control -> loop .)
    LDIAMOND        reduce using rule 84 (declaracion_struct_control -> loop .)
    ARRAY           reduce using rule 84 (declaracion_struct_control -> loop .)
    TRUE            reduce using rule 84 (declaracion_struct_control -> loop .)
    FALSE           reduce using rule 84 (declaracion_struct_control -> loop .)


state 23

    (39) funcion_generica -> FN . VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque

    VARIABLE        shift and go to state 34


state 24

    (85) while -> WHILE . expresion_condicion bloque
    (107) expresion_condicion -> . boolean
    (108) expresion_condicion -> . expresion_variable comparacion expresion_variable
    (109) expresion_condicion -> . expresion_variable comparacion expresion_literal
    (110) expresion_condicion -> . expresion_literal comparacion expresion_variable
    (111) expresion_condicion -> . expresion_literal comparacion expresion_literal
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE
    (64) expresion_variable -> . VARIABLE
    (58) expresion_literal -> . literal
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean

    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    VARIABLE        shift and go to state 41
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44

    expresion_condicion            shift and go to state 35
    boolean                        shift and go to state 36
    expresion_variable             shift and go to state 37
    expresion_literal              shift and go to state 38
    literal                        shift and go to state 42

state 25

    (95) if -> IF . condicion bloque
    (96) if -> IF . condicion bloque ELSE bloque
    (97) condicion -> . expresion_condicion
    (98) condicion -> . expresion_condicion logic_operator expresion_condicion
    (107) expresion_condicion -> . boolean
    (108) expresion_condicion -> . expresion_variable comparacion expresion_variable
    (109) expresion_condicion -> . expresion_variable comparacion expresion_literal
    (110) expresion_condicion -> . expresion_literal comparacion expresion_variable
    (111) expresion_condicion -> . expresion_literal comparacion expresion_literal
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE
    (64) expresion_variable -> . VARIABLE
    (58) expresion_literal -> . literal
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean

    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    VARIABLE        shift and go to state 41
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44

    condicion                      shift and go to state 45
    expresion_condicion            shift and go to state 46
    boolean                        shift and go to state 36
    expresion_variable             shift and go to state 37
    expresion_literal              shift and go to state 38
    literal                        shift and go to state 42

state 26

    (112) loop -> LOOP . bloque
    (45) bloque -> . LBRACKET sentencias RBRACKET

    LBRACKET        shift and go to state 48

    bloque                         shift and go to state 47

state 27

    (1) programa -> programa item .

    error           reduce using rule 1 (programa -> programa item .)
    USE             reduce using rule 1 (programa -> programa item .)
    LET             reduce using rule 1 (programa -> programa item .)
    STRUCT          reduce using rule 1 (programa -> programa item .)
    CONST           reduce using rule 1 (programa -> programa item .)
    MUT             reduce using rule 1 (programa -> programa item .)
    FN              reduce using rule 1 (programa -> programa item .)
    WHILE           reduce using rule 1 (programa -> programa item .)
    IF              reduce using rule 1 (programa -> programa item .)
    LOOP            reduce using rule 1 (programa -> programa item .)
    $end            reduce using rule 1 (programa -> programa item .)


state 28

    (37) importacion -> USE VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 49


state 29

    (14) declaracion_variable -> LET VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (15) declaracion_variable -> LET VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (16) declaracion_variable -> LET VARIABLE . EQUAL expresion SEMICOLON
    (17) declaracion_variable -> LET VARIABLE . SEMICOLON
    (113) declaracion_vector -> LET VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (114) declaracion_vector -> LET VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON

    DOUBLE_POINT    shift and go to state 50
    EQUAL           shift and go to state 51
    SEMICOLON       shift and go to state 52


state 30

    (76) declaracion_array -> LET MUT . VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON
    (77) declaracion_array -> LET MUT . VARIABLE DOUBLE_POINT array SEMICOLON
    (115) declaracion_vector -> LET MUT . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> LET MUT . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON

    VARIABLE        shift and go to state 53


state 31

    (18) declaracion_estructura -> STRUCT VARIABLE . LBRACKET campos RBRACKET SEMICOLON
    (19) declaracion_estructura -> STRUCT VARIABLE . LBRACKET RBRACKET SEMICOLON

    LBRACKET        shift and go to state 54


state 32

    (87) declaracion_constante -> CONST VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (88) declaracion_constante -> CONST VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (89) declaracion_constante -> CONST VARIABLE . EQUAL expresion SEMICOLON
    (90) declaracion_constante -> CONST VARIABLE . SEMICOLON

    DOUBLE_POINT    shift and go to state 55
    EQUAL           shift and go to state 56
    SEMICOLON       shift and go to state 57


state 33

    (91) declaracion_mutable -> MUT VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (92) declaracion_mutable -> MUT VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (93) declaracion_mutable -> MUT VARIABLE . EQUAL expresion SEMICOLON
    (94) declaracion_mutable -> MUT VARIABLE . SEMICOLON

    DOUBLE_POINT    shift and go to state 58
    EQUAL           shift and go to state 59
    SEMICOLON       shift and go to state 60


state 34

    (39) funcion_generica -> FN VARIABLE . LPAREN parametros RPAREN ARROW tipo_simple bloque

    LPAREN          shift and go to state 61


state 35

    (85) while -> WHILE expresion_condicion . bloque
    (45) bloque -> . LBRACKET sentencias RBRACKET

    LBRACKET        shift and go to state 48

    bloque                         shift and go to state 62

state 36

    (107) expresion_condicion -> boolean .
    (61) literal -> boolean .

    LBRACKET        reduce using rule 107 (expresion_condicion -> boolean .)
    AND             reduce using rule 107 (expresion_condicion -> boolean .)
    OR              reduce using rule 107 (expresion_condicion -> boolean .)
    EQUAL_EQUAL     reduce using rule 61 (literal -> boolean .)
    NOT_EQUAL       reduce using rule 61 (literal -> boolean .)
    GREATER         reduce using rule 61 (literal -> boolean .)
    GREATER_EQUAL   reduce using rule 61 (literal -> boolean .)
    LESS            reduce using rule 61 (literal -> boolean .)
    LESS_EQUAL      reduce using rule 61 (literal -> boolean .)


state 37

    (108) expresion_condicion -> expresion_variable . comparacion expresion_variable
    (109) expresion_condicion -> expresion_variable . comparacion expresion_literal
    (101) comparacion -> . EQUAL_EQUAL
    (102) comparacion -> . NOT_EQUAL
    (103) comparacion -> . GREATER
    (104) comparacion -> . GREATER_EQUAL
    (105) comparacion -> . LESS
    (106) comparacion -> . LESS_EQUAL

    EQUAL_EQUAL     shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    GREATER         shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    LESS_EQUAL      shift and go to state 69

    comparacion                    shift and go to state 63

state 38

    (110) expresion_condicion -> expresion_literal . comparacion expresion_variable
    (111) expresion_condicion -> expresion_literal . comparacion expresion_literal
    (101) comparacion -> . EQUAL_EQUAL
    (102) comparacion -> . NOT_EQUAL
    (103) comparacion -> . GREATER
    (104) comparacion -> . GREATER_EQUAL
    (105) comparacion -> . LESS
    (106) comparacion -> . LESS_EQUAL

    EQUAL_EQUAL     shift and go to state 64
    NOT_EQUAL       shift and go to state 65
    GREATER         shift and go to state 66
    GREATER_EQUAL   shift and go to state 67
    LESS            shift and go to state 68
    LESS_EQUAL      shift and go to state 69

    comparacion                    shift and go to state 70

state 39

    (62) boolean -> TRUE .

    LBRACKET        reduce using rule 62 (boolean -> TRUE .)
    EQUAL_EQUAL     reduce using rule 62 (boolean -> TRUE .)
    NOT_EQUAL       reduce using rule 62 (boolean -> TRUE .)
    GREATER         reduce using rule 62 (boolean -> TRUE .)
    GREATER_EQUAL   reduce using rule 62 (boolean -> TRUE .)
    LESS            reduce using rule 62 (boolean -> TRUE .)
    LESS_EQUAL      reduce using rule 62 (boolean -> TRUE .)
    AND             reduce using rule 62 (boolean -> TRUE .)
    OR              reduce using rule 62 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 62 (boolean -> TRUE .)
    RPAREN          reduce using rule 62 (boolean -> TRUE .)
    COMMA           reduce using rule 62 (boolean -> TRUE .)


state 40

    (63) boolean -> FALSE .

    LBRACKET        reduce using rule 63 (boolean -> FALSE .)
    EQUAL_EQUAL     reduce using rule 63 (boolean -> FALSE .)
    NOT_EQUAL       reduce using rule 63 (boolean -> FALSE .)
    GREATER         reduce using rule 63 (boolean -> FALSE .)
    GREATER_EQUAL   reduce using rule 63 (boolean -> FALSE .)
    LESS            reduce using rule 63 (boolean -> FALSE .)
    LESS_EQUAL      reduce using rule 63 (boolean -> FALSE .)
    AND             reduce using rule 63 (boolean -> FALSE .)
    OR              reduce using rule 63 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 63 (boolean -> FALSE .)
    RPAREN          reduce using rule 63 (boolean -> FALSE .)
    COMMA           reduce using rule 63 (boolean -> FALSE .)


state 41

    (64) expresion_variable -> VARIABLE .

    EQUAL_EQUAL     reduce using rule 64 (expresion_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 64 (expresion_variable -> VARIABLE .)
    GREATER         reduce using rule 64 (expresion_variable -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 64 (expresion_variable -> VARIABLE .)
    LESS            reduce using rule 64 (expresion_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 64 (expresion_variable -> VARIABLE .)
    LBRACKET        reduce using rule 64 (expresion_variable -> VARIABLE .)
    AND             reduce using rule 64 (expresion_variable -> VARIABLE .)
    OR              reduce using rule 64 (expresion_variable -> VARIABLE .)


state 42

    (58) expresion_literal -> literal .

    EQUAL_EQUAL     reduce using rule 58 (expresion_literal -> literal .)
    NOT_EQUAL       reduce using rule 58 (expresion_literal -> literal .)
    GREATER         reduce using rule 58 (expresion_literal -> literal .)
    GREATER_EQUAL   reduce using rule 58 (expresion_literal -> literal .)
    LESS            reduce using rule 58 (expresion_literal -> literal .)
    LESS_EQUAL      reduce using rule 58 (expresion_literal -> literal .)
    SEMICOLON       reduce using rule 58 (expresion_literal -> literal .)
    LBRACKET        reduce using rule 58 (expresion_literal -> literal .)
    AND             reduce using rule 58 (expresion_literal -> literal .)
    OR              reduce using rule 58 (expresion_literal -> literal .)
    RPAREN          reduce using rule 58 (expresion_literal -> literal .)
    COMMA           reduce using rule 58 (expresion_literal -> literal .)


state 43

    (59) literal -> NUMBER .

    EQUAL_EQUAL     reduce using rule 59 (literal -> NUMBER .)
    NOT_EQUAL       reduce using rule 59 (literal -> NUMBER .)
    GREATER         reduce using rule 59 (literal -> NUMBER .)
    GREATER_EQUAL   reduce using rule 59 (literal -> NUMBER .)
    LESS            reduce using rule 59 (literal -> NUMBER .)
    LESS_EQUAL      reduce using rule 59 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 59 (literal -> NUMBER .)
    LBRACKET        reduce using rule 59 (literal -> NUMBER .)
    AND             reduce using rule 59 (literal -> NUMBER .)
    OR              reduce using rule 59 (literal -> NUMBER .)
    RPAREN          reduce using rule 59 (literal -> NUMBER .)
    COMMA           reduce using rule 59 (literal -> NUMBER .)


state 44

    (60) literal -> STRING .

    EQUAL_EQUAL     reduce using rule 60 (literal -> STRING .)
    NOT_EQUAL       reduce using rule 60 (literal -> STRING .)
    GREATER         reduce using rule 60 (literal -> STRING .)
    GREATER_EQUAL   reduce using rule 60 (literal -> STRING .)
    LESS            reduce using rule 60 (literal -> STRING .)
    LESS_EQUAL      reduce using rule 60 (literal -> STRING .)
    SEMICOLON       reduce using rule 60 (literal -> STRING .)
    LBRACKET        reduce using rule 60 (literal -> STRING .)
    AND             reduce using rule 60 (literal -> STRING .)
    OR              reduce using rule 60 (literal -> STRING .)
    RPAREN          reduce using rule 60 (literal -> STRING .)
    COMMA           reduce using rule 60 (literal -> STRING .)


state 45

    (95) if -> IF condicion . bloque
    (96) if -> IF condicion . bloque ELSE bloque
    (45) bloque -> . LBRACKET sentencias RBRACKET

    LBRACKET        shift and go to state 48

    bloque                         shift and go to state 71

state 46

    (97) condicion -> expresion_condicion .
    (98) condicion -> expresion_condicion . logic_operator expresion_condicion
    (99) logic_operator -> . AND
    (100) logic_operator -> . OR

    LBRACKET        reduce using rule 97 (condicion -> expresion_condicion .)
    AND             shift and go to state 73
    OR              shift and go to state 74

    logic_operator                 shift and go to state 72

state 47

    (112) loop -> LOOP bloque .

    error           reduce using rule 112 (loop -> LOOP bloque .)
    USE             reduce using rule 112 (loop -> LOOP bloque .)
    LET             reduce using rule 112 (loop -> LOOP bloque .)
    STRUCT          reduce using rule 112 (loop -> LOOP bloque .)
    CONST           reduce using rule 112 (loop -> LOOP bloque .)
    MUT             reduce using rule 112 (loop -> LOOP bloque .)
    FN              reduce using rule 112 (loop -> LOOP bloque .)
    WHILE           reduce using rule 112 (loop -> LOOP bloque .)
    IF              reduce using rule 112 (loop -> LOOP bloque .)
    LOOP            reduce using rule 112 (loop -> LOOP bloque .)
    $end            reduce using rule 112 (loop -> LOOP bloque .)
    RBRACKET        reduce using rule 112 (loop -> LOOP bloque .)
    VARIABLE        reduce using rule 112 (loop -> LOOP bloque .)
    BREAK           reduce using rule 112 (loop -> LOOP bloque .)
    NUMBER          reduce using rule 112 (loop -> LOOP bloque .)
    STRING          reduce using rule 112 (loop -> LOOP bloque .)
    LDIAMOND        reduce using rule 112 (loop -> LOOP bloque .)
    ARRAY           reduce using rule 112 (loop -> LOOP bloque .)
    TRUE            reduce using rule 112 (loop -> LOOP bloque .)
    FALSE           reduce using rule 112 (loop -> LOOP bloque .)


state 48

    (45) bloque -> LBRACKET . sentencias RBRACKET
    (46) sentencias -> . sentencias sentencia
    (47) sentencias -> . sentencia
    (48) sentencia -> . expresion SEMICOLON
    (49) sentencia -> . declaracion
    (50) sentencia -> . asignacion
    (51) sentencia -> . break
    (52) sentencia -> . funciones_vector
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (7) declaracion -> . declaracion_variable
    (8) declaracion -> . declaracion_estructura
    (9) declaracion -> . declaracion_constante
    (10) declaracion -> . declaracion_mutable
    (11) declaracion -> . declaracion_array
    (12) declaracion -> . declaracion_struct_control
    (13) declaracion -> . declaracion_vector
    (53) asignacion -> . VARIABLE EQUAL expresion SEMICOLON
    (86) break -> . BREAK SEMICOLON
    (117) funciones_vector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (118) funciones_vector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (119) funciones_vector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (120) funciones_vector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (121) funciones_vector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (122) funciones_vector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (123) funciones_vector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (124) funciones_vector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (125) funciones_vector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (126) funciones_vector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (127) funciones_vector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (14) declaracion_variable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (15) declaracion_variable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (16) declaracion_variable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (17) declaracion_variable -> . LET VARIABLE SEMICOLON
    (18) declaracion_estructura -> . STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON
    (19) declaracion_estructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (87) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (88) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (89) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (90) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (91) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (92) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (93) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (94) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (76) declaracion_array -> . LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON
    (77) declaracion_array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (82) declaracion_struct_control -> . while
    (83) declaracion_struct_control -> . if
    (84) declaracion_struct_control -> . loop
    (113) declaracion_vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (114) declaracion_vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (115) declaracion_vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (85) while -> . WHILE expresion_condicion bloque
    (95) if -> . IF condicion bloque
    (96) if -> . IF condicion bloque ELSE bloque
    (112) loop -> . LOOP bloque
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 86
    BREAK           shift and go to state 87
    LET             shift and go to state 16
    STRUCT          shift and go to state 17
    CONST           shift and go to state 18
    MUT             shift and go to state 19
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    LOOP            shift and go to state 26
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    sentencias                     shift and go to state 75
    sentencia                      shift and go to state 76
    expresion                      shift and go to state 77
    declaracion                    shift and go to state 78
    asignacion                     shift and go to state 79
    break                          shift and go to state 80
    funciones_vector               shift and go to state 81
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    declaracion_variable           shift and go to state 7
    declaracion_estructura         shift and go to state 8
    declaracion_constante          shift and go to state 9
    declaracion_mutable            shift and go to state 10
    declaracion_array              shift and go to state 11
    declaracion_struct_control     shift and go to state 12
    declaracion_vector             shift and go to state 13
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    boolean                        shift and go to state 91

state 49

    (37) importacion -> USE VARIABLE SEMICOLON .

    error           reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)
    USE             reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)
    LET             reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)
    CONST           reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)
    MUT             reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)
    FN              reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)
    WHILE           reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)
    IF              reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)
    LOOP            reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)
    $end            reduce using rule 37 (importacion -> USE VARIABLE SEMICOLON .)


state 50

    (14) declaracion_variable -> LET VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (15) declaracion_variable -> LET VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (113) declaracion_vector -> LET VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (114) declaracion_vector -> LET VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (23) tipo -> . tipo_simple
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    VEC             shift and go to state 94
    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    tipo                           shift and go to state 93
    tipo_simple                    shift and go to state 95

state 51

    (16) declaracion_variable -> LET VARIABLE EQUAL . expresion SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 110
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 52

    (17) declaracion_variable -> LET VARIABLE SEMICOLON .

    error           reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    USE             reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    LET             reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    CONST           reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    MUT             reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    FN              reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    WHILE           reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    IF              reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    LOOP            reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    $end            reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    RBRACKET        reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    BREAK           reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    STRING          reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    LDIAMOND        reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    TRUE            reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)
    FALSE           reduce using rule 17 (declaracion_variable -> LET VARIABLE SEMICOLON .)


state 53

    (76) declaracion_array -> LET MUT VARIABLE . DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON
    (77) declaracion_array -> LET MUT VARIABLE . DOUBLE_POINT array SEMICOLON
    (115) declaracion_vector -> LET MUT VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> LET MUT VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON

    DOUBLE_POINT    shift and go to state 111


state 54

    (18) declaracion_estructura -> STRUCT VARIABLE LBRACKET . campos RBRACKET SEMICOLON
    (19) declaracion_estructura -> STRUCT VARIABLE LBRACKET . RBRACKET SEMICOLON
    (20) campos -> . campos COMMA campo
    (21) campos -> . campo
    (22) campo -> . VARIABLE DOUBLE_POINT tipo

    RBRACKET        shift and go to state 114
    VARIABLE        shift and go to state 112

    campos                         shift and go to state 113
    campo                          shift and go to state 115

state 55

    (87) declaracion_constante -> CONST VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (88) declaracion_constante -> CONST VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (23) tipo -> . tipo_simple
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    tipo                           shift and go to state 116
    tipo_simple                    shift and go to state 95

state 56

    (89) declaracion_constante -> CONST VARIABLE EQUAL . expresion SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 117
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 57

    (90) declaracion_constante -> CONST VARIABLE SEMICOLON .

    error           reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    USE             reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LET             reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    CONST           reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    MUT             reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    FN              reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    WHILE           reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    IF              reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LOOP            reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    $end            reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    RBRACKET        reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    BREAK           reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    STRING          reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LDIAMOND        reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    TRUE            reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    FALSE           reduce using rule 90 (declaracion_constante -> CONST VARIABLE SEMICOLON .)


state 58

    (91) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (92) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (23) tipo -> . tipo_simple
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    tipo                           shift and go to state 118
    tipo_simple                    shift and go to state 95

state 59

    (93) declaracion_mutable -> MUT VARIABLE EQUAL . expresion SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 119
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 60

    (94) declaracion_mutable -> MUT VARIABLE SEMICOLON .

    error           reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    USE             reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LET             reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    CONST           reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    MUT             reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    FN              reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    WHILE           reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    IF              reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LOOP            reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    $end            reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    RBRACKET        reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    BREAK           reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    STRING          reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LDIAMOND        reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    TRUE            reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    FALSE           reduce using rule 94 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)


state 61

    (39) funcion_generica -> FN VARIABLE LPAREN . parametros RPAREN ARROW tipo_simple bloque
    (40) parametros -> . parametros COMMA parametro
    (41) parametros -> . parametro
    (42) parametros -> . empty
    (44) parametro -> . VARIABLE DOUBLE_POINT tipo
    (43) empty -> .

    VARIABLE        shift and go to state 120
    RPAREN          reduce using rule 43 (empty -> .)
    COMMA           reduce using rule 43 (empty -> .)

    parametros                     shift and go to state 121
    parametro                      shift and go to state 122
    empty                          shift and go to state 123

state 62

    (85) while -> WHILE expresion_condicion bloque .

    error           reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    USE             reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    LET             reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    STRUCT          reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    CONST           reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    MUT             reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    FN              reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    WHILE           reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    IF              reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    LOOP            reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    $end            reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    RBRACKET        reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    VARIABLE        reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    BREAK           reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    NUMBER          reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    STRING          reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    LDIAMOND        reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    ARRAY           reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    TRUE            reduce using rule 85 (while -> WHILE expresion_condicion bloque .)
    FALSE           reduce using rule 85 (while -> WHILE expresion_condicion bloque .)


state 63

    (108) expresion_condicion -> expresion_variable comparacion . expresion_variable
    (109) expresion_condicion -> expresion_variable comparacion . expresion_literal
    (64) expresion_variable -> . VARIABLE
    (58) expresion_literal -> . literal
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 41
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion_variable             shift and go to state 124
    expresion_literal              shift and go to state 125
    literal                        shift and go to state 42
    boolean                        shift and go to state 91

state 64

    (101) comparacion -> EQUAL_EQUAL .

    VARIABLE        reduce using rule 101 (comparacion -> EQUAL_EQUAL .)
    NUMBER          reduce using rule 101 (comparacion -> EQUAL_EQUAL .)
    STRING          reduce using rule 101 (comparacion -> EQUAL_EQUAL .)
    TRUE            reduce using rule 101 (comparacion -> EQUAL_EQUAL .)
    FALSE           reduce using rule 101 (comparacion -> EQUAL_EQUAL .)


state 65

    (102) comparacion -> NOT_EQUAL .

    VARIABLE        reduce using rule 102 (comparacion -> NOT_EQUAL .)
    NUMBER          reduce using rule 102 (comparacion -> NOT_EQUAL .)
    STRING          reduce using rule 102 (comparacion -> NOT_EQUAL .)
    TRUE            reduce using rule 102 (comparacion -> NOT_EQUAL .)
    FALSE           reduce using rule 102 (comparacion -> NOT_EQUAL .)


state 66

    (103) comparacion -> GREATER .

    VARIABLE        reduce using rule 103 (comparacion -> GREATER .)
    NUMBER          reduce using rule 103 (comparacion -> GREATER .)
    STRING          reduce using rule 103 (comparacion -> GREATER .)
    TRUE            reduce using rule 103 (comparacion -> GREATER .)
    FALSE           reduce using rule 103 (comparacion -> GREATER .)


state 67

    (104) comparacion -> GREATER_EQUAL .

    VARIABLE        reduce using rule 104 (comparacion -> GREATER_EQUAL .)
    NUMBER          reduce using rule 104 (comparacion -> GREATER_EQUAL .)
    STRING          reduce using rule 104 (comparacion -> GREATER_EQUAL .)
    TRUE            reduce using rule 104 (comparacion -> GREATER_EQUAL .)
    FALSE           reduce using rule 104 (comparacion -> GREATER_EQUAL .)


state 68

    (105) comparacion -> LESS .

    VARIABLE        reduce using rule 105 (comparacion -> LESS .)
    NUMBER          reduce using rule 105 (comparacion -> LESS .)
    STRING          reduce using rule 105 (comparacion -> LESS .)
    TRUE            reduce using rule 105 (comparacion -> LESS .)
    FALSE           reduce using rule 105 (comparacion -> LESS .)


state 69

    (106) comparacion -> LESS_EQUAL .

    VARIABLE        reduce using rule 106 (comparacion -> LESS_EQUAL .)
    NUMBER          reduce using rule 106 (comparacion -> LESS_EQUAL .)
    STRING          reduce using rule 106 (comparacion -> LESS_EQUAL .)
    TRUE            reduce using rule 106 (comparacion -> LESS_EQUAL .)
    FALSE           reduce using rule 106 (comparacion -> LESS_EQUAL .)


state 70

    (110) expresion_condicion -> expresion_literal comparacion . expresion_variable
    (111) expresion_condicion -> expresion_literal comparacion . expresion_literal
    (64) expresion_variable -> . VARIABLE
    (58) expresion_literal -> . literal
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 41
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion_literal              shift and go to state 126
    expresion_variable             shift and go to state 127
    literal                        shift and go to state 42
    boolean                        shift and go to state 91

state 71

    (95) if -> IF condicion bloque .
    (96) if -> IF condicion bloque . ELSE bloque

    error           reduce using rule 95 (if -> IF condicion bloque .)
    USE             reduce using rule 95 (if -> IF condicion bloque .)
    LET             reduce using rule 95 (if -> IF condicion bloque .)
    STRUCT          reduce using rule 95 (if -> IF condicion bloque .)
    CONST           reduce using rule 95 (if -> IF condicion bloque .)
    MUT             reduce using rule 95 (if -> IF condicion bloque .)
    FN              reduce using rule 95 (if -> IF condicion bloque .)
    WHILE           reduce using rule 95 (if -> IF condicion bloque .)
    IF              reduce using rule 95 (if -> IF condicion bloque .)
    LOOP            reduce using rule 95 (if -> IF condicion bloque .)
    $end            reduce using rule 95 (if -> IF condicion bloque .)
    RBRACKET        reduce using rule 95 (if -> IF condicion bloque .)
    VARIABLE        reduce using rule 95 (if -> IF condicion bloque .)
    BREAK           reduce using rule 95 (if -> IF condicion bloque .)
    NUMBER          reduce using rule 95 (if -> IF condicion bloque .)
    STRING          reduce using rule 95 (if -> IF condicion bloque .)
    LDIAMOND        reduce using rule 95 (if -> IF condicion bloque .)
    ARRAY           reduce using rule 95 (if -> IF condicion bloque .)
    TRUE            reduce using rule 95 (if -> IF condicion bloque .)
    FALSE           reduce using rule 95 (if -> IF condicion bloque .)
    ELSE            shift and go to state 128


state 72

    (98) condicion -> expresion_condicion logic_operator . expresion_condicion
    (107) expresion_condicion -> . boolean
    (108) expresion_condicion -> . expresion_variable comparacion expresion_variable
    (109) expresion_condicion -> . expresion_variable comparacion expresion_literal
    (110) expresion_condicion -> . expresion_literal comparacion expresion_variable
    (111) expresion_condicion -> . expresion_literal comparacion expresion_literal
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE
    (64) expresion_variable -> . VARIABLE
    (58) expresion_literal -> . literal
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean

    TRUE            shift and go to state 39
    FALSE           shift and go to state 40
    VARIABLE        shift and go to state 41
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44

    expresion_condicion            shift and go to state 129
    boolean                        shift and go to state 36
    expresion_variable             shift and go to state 37
    expresion_literal              shift and go to state 38
    literal                        shift and go to state 42

state 73

    (99) logic_operator -> AND .

    TRUE            reduce using rule 99 (logic_operator -> AND .)
    FALSE           reduce using rule 99 (logic_operator -> AND .)
    VARIABLE        reduce using rule 99 (logic_operator -> AND .)
    NUMBER          reduce using rule 99 (logic_operator -> AND .)
    STRING          reduce using rule 99 (logic_operator -> AND .)


state 74

    (100) logic_operator -> OR .

    TRUE            reduce using rule 100 (logic_operator -> OR .)
    FALSE           reduce using rule 100 (logic_operator -> OR .)
    VARIABLE        reduce using rule 100 (logic_operator -> OR .)
    NUMBER          reduce using rule 100 (logic_operator -> OR .)
    STRING          reduce using rule 100 (logic_operator -> OR .)


state 75

    (45) bloque -> LBRACKET sentencias . RBRACKET
    (46) sentencias -> sentencias . sentencia
    (48) sentencia -> . expresion SEMICOLON
    (49) sentencia -> . declaracion
    (50) sentencia -> . asignacion
    (51) sentencia -> . break
    (52) sentencia -> . funciones_vector
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (7) declaracion -> . declaracion_variable
    (8) declaracion -> . declaracion_estructura
    (9) declaracion -> . declaracion_constante
    (10) declaracion -> . declaracion_mutable
    (11) declaracion -> . declaracion_array
    (12) declaracion -> . declaracion_struct_control
    (13) declaracion -> . declaracion_vector
    (53) asignacion -> . VARIABLE EQUAL expresion SEMICOLON
    (86) break -> . BREAK SEMICOLON
    (117) funciones_vector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (118) funciones_vector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (119) funciones_vector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (120) funciones_vector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (121) funciones_vector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (122) funciones_vector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (123) funciones_vector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (124) funciones_vector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (125) funciones_vector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (126) funciones_vector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (127) funciones_vector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (14) declaracion_variable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (15) declaracion_variable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (16) declaracion_variable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (17) declaracion_variable -> . LET VARIABLE SEMICOLON
    (18) declaracion_estructura -> . STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON
    (19) declaracion_estructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (87) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (88) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (89) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (90) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (91) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (92) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (93) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (94) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (76) declaracion_array -> . LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON
    (77) declaracion_array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (82) declaracion_struct_control -> . while
    (83) declaracion_struct_control -> . if
    (84) declaracion_struct_control -> . loop
    (113) declaracion_vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (114) declaracion_vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (115) declaracion_vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (85) while -> . WHILE expresion_condicion bloque
    (95) if -> . IF condicion bloque
    (96) if -> . IF condicion bloque ELSE bloque
    (112) loop -> . LOOP bloque
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    RBRACKET        shift and go to state 130
    VARIABLE        shift and go to state 86
    BREAK           shift and go to state 87
    LET             shift and go to state 16
    STRUCT          shift and go to state 17
    CONST           shift and go to state 18
    MUT             shift and go to state 19
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    LOOP            shift and go to state 26
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    sentencia                      shift and go to state 131
    expresion                      shift and go to state 77
    declaracion                    shift and go to state 78
    asignacion                     shift and go to state 79
    break                          shift and go to state 80
    funciones_vector               shift and go to state 81
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    declaracion_variable           shift and go to state 7
    declaracion_estructura         shift and go to state 8
    declaracion_constante          shift and go to state 9
    declaracion_mutable            shift and go to state 10
    declaracion_array              shift and go to state 11
    declaracion_struct_control     shift and go to state 12
    declaracion_vector             shift and go to state 13
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    boolean                        shift and go to state 91

state 76

    (47) sentencias -> sentencia .

    RBRACKET        reduce using rule 47 (sentencias -> sentencia .)
    VARIABLE        reduce using rule 47 (sentencias -> sentencia .)
    BREAK           reduce using rule 47 (sentencias -> sentencia .)
    LET             reduce using rule 47 (sentencias -> sentencia .)
    STRUCT          reduce using rule 47 (sentencias -> sentencia .)
    CONST           reduce using rule 47 (sentencias -> sentencia .)
    MUT             reduce using rule 47 (sentencias -> sentencia .)
    NUMBER          reduce using rule 47 (sentencias -> sentencia .)
    STRING          reduce using rule 47 (sentencias -> sentencia .)
    LDIAMOND        reduce using rule 47 (sentencias -> sentencia .)
    ARRAY           reduce using rule 47 (sentencias -> sentencia .)
    WHILE           reduce using rule 47 (sentencias -> sentencia .)
    IF              reduce using rule 47 (sentencias -> sentencia .)
    LOOP            reduce using rule 47 (sentencias -> sentencia .)
    TRUE            reduce using rule 47 (sentencias -> sentencia .)
    FALSE           reduce using rule 47 (sentencias -> sentencia .)


state 77

    (48) sentencia -> expresion . SEMICOLON

    SEMICOLON       shift and go to state 132


state 78

    (49) sentencia -> declaracion .

    RBRACKET        reduce using rule 49 (sentencia -> declaracion .)
    VARIABLE        reduce using rule 49 (sentencia -> declaracion .)
    BREAK           reduce using rule 49 (sentencia -> declaracion .)
    LET             reduce using rule 49 (sentencia -> declaracion .)
    STRUCT          reduce using rule 49 (sentencia -> declaracion .)
    CONST           reduce using rule 49 (sentencia -> declaracion .)
    MUT             reduce using rule 49 (sentencia -> declaracion .)
    NUMBER          reduce using rule 49 (sentencia -> declaracion .)
    STRING          reduce using rule 49 (sentencia -> declaracion .)
    LDIAMOND        reduce using rule 49 (sentencia -> declaracion .)
    ARRAY           reduce using rule 49 (sentencia -> declaracion .)
    WHILE           reduce using rule 49 (sentencia -> declaracion .)
    IF              reduce using rule 49 (sentencia -> declaracion .)
    LOOP            reduce using rule 49 (sentencia -> declaracion .)
    TRUE            reduce using rule 49 (sentencia -> declaracion .)
    FALSE           reduce using rule 49 (sentencia -> declaracion .)


state 79

    (50) sentencia -> asignacion .

    RBRACKET        reduce using rule 50 (sentencia -> asignacion .)
    VARIABLE        reduce using rule 50 (sentencia -> asignacion .)
    BREAK           reduce using rule 50 (sentencia -> asignacion .)
    LET             reduce using rule 50 (sentencia -> asignacion .)
    STRUCT          reduce using rule 50 (sentencia -> asignacion .)
    CONST           reduce using rule 50 (sentencia -> asignacion .)
    MUT             reduce using rule 50 (sentencia -> asignacion .)
    NUMBER          reduce using rule 50 (sentencia -> asignacion .)
    STRING          reduce using rule 50 (sentencia -> asignacion .)
    LDIAMOND        reduce using rule 50 (sentencia -> asignacion .)
    ARRAY           reduce using rule 50 (sentencia -> asignacion .)
    WHILE           reduce using rule 50 (sentencia -> asignacion .)
    IF              reduce using rule 50 (sentencia -> asignacion .)
    LOOP            reduce using rule 50 (sentencia -> asignacion .)
    TRUE            reduce using rule 50 (sentencia -> asignacion .)
    FALSE           reduce using rule 50 (sentencia -> asignacion .)


state 80

    (51) sentencia -> break .

    RBRACKET        reduce using rule 51 (sentencia -> break .)
    VARIABLE        reduce using rule 51 (sentencia -> break .)
    BREAK           reduce using rule 51 (sentencia -> break .)
    LET             reduce using rule 51 (sentencia -> break .)
    STRUCT          reduce using rule 51 (sentencia -> break .)
    CONST           reduce using rule 51 (sentencia -> break .)
    MUT             reduce using rule 51 (sentencia -> break .)
    NUMBER          reduce using rule 51 (sentencia -> break .)
    STRING          reduce using rule 51 (sentencia -> break .)
    LDIAMOND        reduce using rule 51 (sentencia -> break .)
    ARRAY           reduce using rule 51 (sentencia -> break .)
    WHILE           reduce using rule 51 (sentencia -> break .)
    IF              reduce using rule 51 (sentencia -> break .)
    LOOP            reduce using rule 51 (sentencia -> break .)
    TRUE            reduce using rule 51 (sentencia -> break .)
    FALSE           reduce using rule 51 (sentencia -> break .)


state 81

    (52) sentencia -> funciones_vector .

    RBRACKET        reduce using rule 52 (sentencia -> funciones_vector .)
    VARIABLE        reduce using rule 52 (sentencia -> funciones_vector .)
    BREAK           reduce using rule 52 (sentencia -> funciones_vector .)
    LET             reduce using rule 52 (sentencia -> funciones_vector .)
    STRUCT          reduce using rule 52 (sentencia -> funciones_vector .)
    CONST           reduce using rule 52 (sentencia -> funciones_vector .)
    MUT             reduce using rule 52 (sentencia -> funciones_vector .)
    NUMBER          reduce using rule 52 (sentencia -> funciones_vector .)
    STRING          reduce using rule 52 (sentencia -> funciones_vector .)
    LDIAMOND        reduce using rule 52 (sentencia -> funciones_vector .)
    ARRAY           reduce using rule 52 (sentencia -> funciones_vector .)
    WHILE           reduce using rule 52 (sentencia -> funciones_vector .)
    IF              reduce using rule 52 (sentencia -> funciones_vector .)
    LOOP            reduce using rule 52 (sentencia -> funciones_vector .)
    TRUE            reduce using rule 52 (sentencia -> funciones_vector .)
    FALSE           reduce using rule 52 (sentencia -> funciones_vector .)


state 82

    (54) expresion -> expresion_literal .

    SEMICOLON       reduce using rule 54 (expresion -> expresion_literal .)
    RPAREN          reduce using rule 54 (expresion -> expresion_literal .)
    COMMA           reduce using rule 54 (expresion -> expresion_literal .)


state 83

    (55) expresion -> expresion_variable .

    SEMICOLON       reduce using rule 55 (expresion -> expresion_variable .)
    RPAREN          reduce using rule 55 (expresion -> expresion_variable .)
    COMMA           reduce using rule 55 (expresion -> expresion_variable .)


state 84

    (56) expresion -> expresion_funcion .

    SEMICOLON       reduce using rule 56 (expresion -> expresion_funcion .)
    RPAREN          reduce using rule 56 (expresion -> expresion_funcion .)
    COMMA           reduce using rule 56 (expresion -> expresion_funcion .)


state 85

    (57) expresion -> expresion_estructura .

    SEMICOLON       reduce using rule 57 (expresion -> expresion_estructura .)
    RPAREN          reduce using rule 57 (expresion -> expresion_estructura .)
    COMMA           reduce using rule 57 (expresion -> expresion_estructura .)


state 86

    (53) asignacion -> VARIABLE . EQUAL expresion SEMICOLON
    (117) funciones_vector -> VARIABLE . DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (118) funciones_vector -> VARIABLE . DOT POP LPAREN RPAREN SEMICOLON
    (119) funciones_vector -> VARIABLE . DOT LEN LPAREN RPAREN SEMICOLON
    (120) funciones_vector -> VARIABLE . DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (121) funciones_vector -> VARIABLE . DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (122) funciones_vector -> VARIABLE . DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (123) funciones_vector -> VARIABLE . DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (124) funciones_vector -> VARIABLE . DOT CLEAR LPAREN RPAREN SEMICOLON
    (125) funciones_vector -> VARIABLE . DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (126) funciones_vector -> VARIABLE . DOT REVERSE LPAREN RPAREN SEMICOLON
    (127) funciones_vector -> VARIABLE . DOT ITER LPAREN RPAREN SEMICOLON
    (64) expresion_variable -> VARIABLE .
    (65) expresion_funcion -> VARIABLE . LPAREN argumentos RPAREN SEMICOLON

    EQUAL           shift and go to state 133
    DOT             shift and go to state 134
    SEMICOLON       reduce using rule 64 (expresion_variable -> VARIABLE .)
    LPAREN          shift and go to state 135


state 87

    (86) break -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 136


state 88

    (66) expresion_estructura -> hashmap .

    SEMICOLON       reduce using rule 66 (expresion_estructura -> hashmap .)
    RPAREN          reduce using rule 66 (expresion_estructura -> hashmap .)
    COMMA           reduce using rule 66 (expresion_estructura -> hashmap .)


state 89

    (67) expresion_estructura -> array .

    SEMICOLON       reduce using rule 67 (expresion_estructura -> array .)
    RPAREN          reduce using rule 67 (expresion_estructura -> array .)
    COMMA           reduce using rule 67 (expresion_estructura -> array .)


state 90

    (68) hashmap -> LDIAMOND . hashmap_types RDIAMOND
    (69) hashmap_types -> . hashmap_types COMMA hashmap_type
    (70) hashmap_types -> . hashmap_type
    (71) hashmap_type -> . tipo
    (23) tipo -> . tipo_simple
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    hashmap_types                  shift and go to state 137
    hashmap_type                   shift and go to state 138
    tipo                           shift and go to state 139
    tipo_simple                    shift and go to state 95

state 91

    (61) literal -> boolean .

    SEMICOLON       reduce using rule 61 (literal -> boolean .)
    LBRACKET        reduce using rule 61 (literal -> boolean .)
    AND             reduce using rule 61 (literal -> boolean .)
    OR              reduce using rule 61 (literal -> boolean .)
    RPAREN          reduce using rule 61 (literal -> boolean .)
    COMMA           reduce using rule 61 (literal -> boolean .)


state 92

    (78) array -> ARRAY . L_BRACKET var_array R_BRACKET

    L_BRACKET       shift and go to state 140


state 93

    (14) declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (15) declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 141
    SEMICOLON       shift and go to state 142


state 94

    (113) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (114) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND SEMICOLON

    LDIAMOND        shift and go to state 143


state 95

    (23) tipo -> tipo_simple .

    EQUAL           reduce using rule 23 (tipo -> tipo_simple .)
    SEMICOLON       reduce using rule 23 (tipo -> tipo_simple .)
    RDIAMOND        reduce using rule 23 (tipo -> tipo_simple .)
    COMMA           reduce using rule 23 (tipo -> tipo_simple .)
    RBRACKET        reduce using rule 23 (tipo -> tipo_simple .)
    RPAREN          reduce using rule 23 (tipo -> tipo_simple .)


state 96

    (24) tipo_simple -> INT8 .

    EQUAL           reduce using rule 24 (tipo_simple -> INT8 .)
    SEMICOLON       reduce using rule 24 (tipo_simple -> INT8 .)
    RDIAMOND        reduce using rule 24 (tipo_simple -> INT8 .)
    COMMA           reduce using rule 24 (tipo_simple -> INT8 .)
    RBRACKET        reduce using rule 24 (tipo_simple -> INT8 .)
    RPAREN          reduce using rule 24 (tipo_simple -> INT8 .)
    LBRACKET        reduce using rule 24 (tipo_simple -> INT8 .)


state 97

    (25) tipo_simple -> INT16 .

    EQUAL           reduce using rule 25 (tipo_simple -> INT16 .)
    SEMICOLON       reduce using rule 25 (tipo_simple -> INT16 .)
    RDIAMOND        reduce using rule 25 (tipo_simple -> INT16 .)
    COMMA           reduce using rule 25 (tipo_simple -> INT16 .)
    RBRACKET        reduce using rule 25 (tipo_simple -> INT16 .)
    RPAREN          reduce using rule 25 (tipo_simple -> INT16 .)
    LBRACKET        reduce using rule 25 (tipo_simple -> INT16 .)


state 98

    (26) tipo_simple -> INT32 .

    EQUAL           reduce using rule 26 (tipo_simple -> INT32 .)
    SEMICOLON       reduce using rule 26 (tipo_simple -> INT32 .)
    RDIAMOND        reduce using rule 26 (tipo_simple -> INT32 .)
    COMMA           reduce using rule 26 (tipo_simple -> INT32 .)
    RBRACKET        reduce using rule 26 (tipo_simple -> INT32 .)
    RPAREN          reduce using rule 26 (tipo_simple -> INT32 .)
    LBRACKET        reduce using rule 26 (tipo_simple -> INT32 .)


state 99

    (27) tipo_simple -> INT64 .

    EQUAL           reduce using rule 27 (tipo_simple -> INT64 .)
    SEMICOLON       reduce using rule 27 (tipo_simple -> INT64 .)
    RDIAMOND        reduce using rule 27 (tipo_simple -> INT64 .)
    COMMA           reduce using rule 27 (tipo_simple -> INT64 .)
    RBRACKET        reduce using rule 27 (tipo_simple -> INT64 .)
    RPAREN          reduce using rule 27 (tipo_simple -> INT64 .)
    LBRACKET        reduce using rule 27 (tipo_simple -> INT64 .)


state 100

    (28) tipo_simple -> UINT8 .

    EQUAL           reduce using rule 28 (tipo_simple -> UINT8 .)
    SEMICOLON       reduce using rule 28 (tipo_simple -> UINT8 .)
    RDIAMOND        reduce using rule 28 (tipo_simple -> UINT8 .)
    COMMA           reduce using rule 28 (tipo_simple -> UINT8 .)
    RBRACKET        reduce using rule 28 (tipo_simple -> UINT8 .)
    RPAREN          reduce using rule 28 (tipo_simple -> UINT8 .)
    LBRACKET        reduce using rule 28 (tipo_simple -> UINT8 .)


state 101

    (29) tipo_simple -> UINT16 .

    EQUAL           reduce using rule 29 (tipo_simple -> UINT16 .)
    SEMICOLON       reduce using rule 29 (tipo_simple -> UINT16 .)
    RDIAMOND        reduce using rule 29 (tipo_simple -> UINT16 .)
    COMMA           reduce using rule 29 (tipo_simple -> UINT16 .)
    RBRACKET        reduce using rule 29 (tipo_simple -> UINT16 .)
    RPAREN          reduce using rule 29 (tipo_simple -> UINT16 .)
    LBRACKET        reduce using rule 29 (tipo_simple -> UINT16 .)


state 102

    (30) tipo_simple -> UINT32 .

    EQUAL           reduce using rule 30 (tipo_simple -> UINT32 .)
    SEMICOLON       reduce using rule 30 (tipo_simple -> UINT32 .)
    RDIAMOND        reduce using rule 30 (tipo_simple -> UINT32 .)
    COMMA           reduce using rule 30 (tipo_simple -> UINT32 .)
    RBRACKET        reduce using rule 30 (tipo_simple -> UINT32 .)
    RPAREN          reduce using rule 30 (tipo_simple -> UINT32 .)
    LBRACKET        reduce using rule 30 (tipo_simple -> UINT32 .)


state 103

    (31) tipo_simple -> UINT64 .

    EQUAL           reduce using rule 31 (tipo_simple -> UINT64 .)
    SEMICOLON       reduce using rule 31 (tipo_simple -> UINT64 .)
    RDIAMOND        reduce using rule 31 (tipo_simple -> UINT64 .)
    COMMA           reduce using rule 31 (tipo_simple -> UINT64 .)
    RBRACKET        reduce using rule 31 (tipo_simple -> UINT64 .)
    RPAREN          reduce using rule 31 (tipo_simple -> UINT64 .)
    LBRACKET        reduce using rule 31 (tipo_simple -> UINT64 .)


state 104

    (32) tipo_simple -> FLOAT32 .

    EQUAL           reduce using rule 32 (tipo_simple -> FLOAT32 .)
    SEMICOLON       reduce using rule 32 (tipo_simple -> FLOAT32 .)
    RDIAMOND        reduce using rule 32 (tipo_simple -> FLOAT32 .)
    COMMA           reduce using rule 32 (tipo_simple -> FLOAT32 .)
    RBRACKET        reduce using rule 32 (tipo_simple -> FLOAT32 .)
    RPAREN          reduce using rule 32 (tipo_simple -> FLOAT32 .)
    LBRACKET        reduce using rule 32 (tipo_simple -> FLOAT32 .)


state 105

    (33) tipo_simple -> FLOAT64 .

    EQUAL           reduce using rule 33 (tipo_simple -> FLOAT64 .)
    SEMICOLON       reduce using rule 33 (tipo_simple -> FLOAT64 .)
    RDIAMOND        reduce using rule 33 (tipo_simple -> FLOAT64 .)
    COMMA           reduce using rule 33 (tipo_simple -> FLOAT64 .)
    RBRACKET        reduce using rule 33 (tipo_simple -> FLOAT64 .)
    RPAREN          reduce using rule 33 (tipo_simple -> FLOAT64 .)
    LBRACKET        reduce using rule 33 (tipo_simple -> FLOAT64 .)


state 106

    (34) tipo_simple -> BOOL .

    EQUAL           reduce using rule 34 (tipo_simple -> BOOL .)
    SEMICOLON       reduce using rule 34 (tipo_simple -> BOOL .)
    RDIAMOND        reduce using rule 34 (tipo_simple -> BOOL .)
    COMMA           reduce using rule 34 (tipo_simple -> BOOL .)
    RBRACKET        reduce using rule 34 (tipo_simple -> BOOL .)
    RPAREN          reduce using rule 34 (tipo_simple -> BOOL .)
    LBRACKET        reduce using rule 34 (tipo_simple -> BOOL .)


state 107

    (35) tipo_simple -> CHAR .

    EQUAL           reduce using rule 35 (tipo_simple -> CHAR .)
    SEMICOLON       reduce using rule 35 (tipo_simple -> CHAR .)
    RDIAMOND        reduce using rule 35 (tipo_simple -> CHAR .)
    COMMA           reduce using rule 35 (tipo_simple -> CHAR .)
    RBRACKET        reduce using rule 35 (tipo_simple -> CHAR .)
    RPAREN          reduce using rule 35 (tipo_simple -> CHAR .)
    LBRACKET        reduce using rule 35 (tipo_simple -> CHAR .)


state 108

    (36) tipo_simple -> STR .

    EQUAL           reduce using rule 36 (tipo_simple -> STR .)
    SEMICOLON       reduce using rule 36 (tipo_simple -> STR .)
    RDIAMOND        reduce using rule 36 (tipo_simple -> STR .)
    COMMA           reduce using rule 36 (tipo_simple -> STR .)
    RBRACKET        reduce using rule 36 (tipo_simple -> STR .)
    RPAREN          reduce using rule 36 (tipo_simple -> STR .)
    LBRACKET        reduce using rule 36 (tipo_simple -> STR .)


state 109

    (64) expresion_variable -> VARIABLE .
    (65) expresion_funcion -> VARIABLE . LPAREN argumentos RPAREN SEMICOLON

    SEMICOLON       reduce using rule 64 (expresion_variable -> VARIABLE .)
    RPAREN          reduce using rule 64 (expresion_variable -> VARIABLE .)
    COMMA           reduce using rule 64 (expresion_variable -> VARIABLE .)
    LPAREN          shift and go to state 135


state 110

    (16) declaracion_variable -> LET VARIABLE EQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 144


state 111

    (76) declaracion_array -> LET MUT VARIABLE DOUBLE_POINT . array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON
    (77) declaracion_array -> LET MUT VARIABLE DOUBLE_POINT . array SEMICOLON
    (115) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET

    VEC             shift and go to state 146
    ARRAY           shift and go to state 92

    array                          shift and go to state 145

state 112

    (22) campo -> VARIABLE . DOUBLE_POINT tipo

    DOUBLE_POINT    shift and go to state 147


state 113

    (18) declaracion_estructura -> STRUCT VARIABLE LBRACKET campos . RBRACKET SEMICOLON
    (20) campos -> campos . COMMA campo

    RBRACKET        shift and go to state 148
    COMMA           shift and go to state 149


state 114

    (19) declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 150


state 115

    (21) campos -> campo .

    RBRACKET        reduce using rule 21 (campos -> campo .)
    COMMA           reduce using rule 21 (campos -> campo .)


state 116

    (87) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (88) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 151
    SEMICOLON       shift and go to state 152


state 117

    (89) declaracion_constante -> CONST VARIABLE EQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 153


state 118

    (91) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (92) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 154
    SEMICOLON       shift and go to state 155


state 119

    (93) declaracion_mutable -> MUT VARIABLE EQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 156


state 120

    (44) parametro -> VARIABLE . DOUBLE_POINT tipo

    DOUBLE_POINT    shift and go to state 157


state 121

    (39) funcion_generica -> FN VARIABLE LPAREN parametros . RPAREN ARROW tipo_simple bloque
    (40) parametros -> parametros . COMMA parametro

    RPAREN          shift and go to state 158
    COMMA           shift and go to state 159


state 122

    (41) parametros -> parametro .

    RPAREN          reduce using rule 41 (parametros -> parametro .)
    COMMA           reduce using rule 41 (parametros -> parametro .)


state 123

    (42) parametros -> empty .

    RPAREN          reduce using rule 42 (parametros -> empty .)
    COMMA           reduce using rule 42 (parametros -> empty .)


state 124

    (108) expresion_condicion -> expresion_variable comparacion expresion_variable .

    LBRACKET        reduce using rule 108 (expresion_condicion -> expresion_variable comparacion expresion_variable .)
    AND             reduce using rule 108 (expresion_condicion -> expresion_variable comparacion expresion_variable .)
    OR              reduce using rule 108 (expresion_condicion -> expresion_variable comparacion expresion_variable .)


state 125

    (109) expresion_condicion -> expresion_variable comparacion expresion_literal .

    LBRACKET        reduce using rule 109 (expresion_condicion -> expresion_variable comparacion expresion_literal .)
    AND             reduce using rule 109 (expresion_condicion -> expresion_variable comparacion expresion_literal .)
    OR              reduce using rule 109 (expresion_condicion -> expresion_variable comparacion expresion_literal .)


state 126

    (111) expresion_condicion -> expresion_literal comparacion expresion_literal .

    LBRACKET        reduce using rule 111 (expresion_condicion -> expresion_literal comparacion expresion_literal .)
    AND             reduce using rule 111 (expresion_condicion -> expresion_literal comparacion expresion_literal .)
    OR              reduce using rule 111 (expresion_condicion -> expresion_literal comparacion expresion_literal .)


state 127

    (110) expresion_condicion -> expresion_literal comparacion expresion_variable .

    LBRACKET        reduce using rule 110 (expresion_condicion -> expresion_literal comparacion expresion_variable .)
    AND             reduce using rule 110 (expresion_condicion -> expresion_literal comparacion expresion_variable .)
    OR              reduce using rule 110 (expresion_condicion -> expresion_literal comparacion expresion_variable .)


state 128

    (96) if -> IF condicion bloque ELSE . bloque
    (45) bloque -> . LBRACKET sentencias RBRACKET

    LBRACKET        shift and go to state 48

    bloque                         shift and go to state 160

state 129

    (98) condicion -> expresion_condicion logic_operator expresion_condicion .

    LBRACKET        reduce using rule 98 (condicion -> expresion_condicion logic_operator expresion_condicion .)


state 130

    (45) bloque -> LBRACKET sentencias RBRACKET .

    error           reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    USE             reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    LET             reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    STRUCT          reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    CONST           reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    MUT             reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    FN              reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    WHILE           reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    IF              reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    LOOP            reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    $end            reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    RBRACKET        reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    VARIABLE        reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    BREAK           reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    NUMBER          reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    STRING          reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    LDIAMOND        reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    ARRAY           reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    TRUE            reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    FALSE           reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)
    ELSE            reduce using rule 45 (bloque -> LBRACKET sentencias RBRACKET .)


state 131

    (46) sentencias -> sentencias sentencia .

    RBRACKET        reduce using rule 46 (sentencias -> sentencias sentencia .)
    VARIABLE        reduce using rule 46 (sentencias -> sentencias sentencia .)
    BREAK           reduce using rule 46 (sentencias -> sentencias sentencia .)
    LET             reduce using rule 46 (sentencias -> sentencias sentencia .)
    STRUCT          reduce using rule 46 (sentencias -> sentencias sentencia .)
    CONST           reduce using rule 46 (sentencias -> sentencias sentencia .)
    MUT             reduce using rule 46 (sentencias -> sentencias sentencia .)
    NUMBER          reduce using rule 46 (sentencias -> sentencias sentencia .)
    STRING          reduce using rule 46 (sentencias -> sentencias sentencia .)
    LDIAMOND        reduce using rule 46 (sentencias -> sentencias sentencia .)
    ARRAY           reduce using rule 46 (sentencias -> sentencias sentencia .)
    WHILE           reduce using rule 46 (sentencias -> sentencias sentencia .)
    IF              reduce using rule 46 (sentencias -> sentencias sentencia .)
    LOOP            reduce using rule 46 (sentencias -> sentencias sentencia .)
    TRUE            reduce using rule 46 (sentencias -> sentencias sentencia .)
    FALSE           reduce using rule 46 (sentencias -> sentencias sentencia .)


state 132

    (48) sentencia -> expresion SEMICOLON .

    RBRACKET        reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    VARIABLE        reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    BREAK           reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    LET             reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    STRUCT          reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    CONST           reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    MUT             reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    NUMBER          reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    STRING          reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    LDIAMOND        reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    ARRAY           reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    WHILE           reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    IF              reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    LOOP            reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    TRUE            reduce using rule 48 (sentencia -> expresion SEMICOLON .)
    FALSE           reduce using rule 48 (sentencia -> expresion SEMICOLON .)


state 133

    (53) asignacion -> VARIABLE EQUAL . expresion SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 161
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 134

    (117) funciones_vector -> VARIABLE DOT . PUSH LPAREN expresion RPAREN SEMICOLON
    (118) funciones_vector -> VARIABLE DOT . POP LPAREN RPAREN SEMICOLON
    (119) funciones_vector -> VARIABLE DOT . LEN LPAREN RPAREN SEMICOLON
    (120) funciones_vector -> VARIABLE DOT . IS_EMPTY LPAREN RPAREN SEMICOLON
    (121) funciones_vector -> VARIABLE DOT . GET LPAREN NUMBER RPAREN SEMICOLON
    (122) funciones_vector -> VARIABLE DOT . SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (123) funciones_vector -> VARIABLE DOT . REMOVE LPAREN expresion RPAREN SEMICOLON
    (124) funciones_vector -> VARIABLE DOT . CLEAR LPAREN RPAREN SEMICOLON
    (125) funciones_vector -> VARIABLE DOT . SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (126) funciones_vector -> VARIABLE DOT . REVERSE LPAREN RPAREN SEMICOLON
    (127) funciones_vector -> VARIABLE DOT . ITER LPAREN RPAREN SEMICOLON

    PUSH            shift and go to state 162
    POP             shift and go to state 163
    LEN             shift and go to state 164
    IS_EMPTY        shift and go to state 165
    GET             shift and go to state 166
    SET             shift and go to state 167
    REMOVE          shift and go to state 168
    CLEAR           shift and go to state 169
    SWAP            shift and go to state 170
    REVERSE         shift and go to state 171
    ITER            shift and go to state 172


state 135

    (65) expresion_funcion -> VARIABLE LPAREN . argumentos RPAREN SEMICOLON
    (72) argumentos -> . argumentos COMMA argumento
    (73) argumentos -> . argumento
    (74) argumentos -> . empty
    (75) argumento -> . expresion
    (43) empty -> .
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    RPAREN          reduce using rule 43 (empty -> .)
    COMMA           reduce using rule 43 (empty -> .)
    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    argumentos                     shift and go to state 173
    argumento                      shift and go to state 174
    empty                          shift and go to state 175
    expresion                      shift and go to state 176
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 136

    (86) break -> BREAK SEMICOLON .

    RBRACKET        reduce using rule 86 (break -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 86 (break -> BREAK SEMICOLON .)
    BREAK           reduce using rule 86 (break -> BREAK SEMICOLON .)
    LET             reduce using rule 86 (break -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 86 (break -> BREAK SEMICOLON .)
    CONST           reduce using rule 86 (break -> BREAK SEMICOLON .)
    MUT             reduce using rule 86 (break -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 86 (break -> BREAK SEMICOLON .)
    STRING          reduce using rule 86 (break -> BREAK SEMICOLON .)
    LDIAMOND        reduce using rule 86 (break -> BREAK SEMICOLON .)
    ARRAY           reduce using rule 86 (break -> BREAK SEMICOLON .)
    WHILE           reduce using rule 86 (break -> BREAK SEMICOLON .)
    IF              reduce using rule 86 (break -> BREAK SEMICOLON .)
    LOOP            reduce using rule 86 (break -> BREAK SEMICOLON .)
    TRUE            reduce using rule 86 (break -> BREAK SEMICOLON .)
    FALSE           reduce using rule 86 (break -> BREAK SEMICOLON .)


state 137

    (68) hashmap -> LDIAMOND hashmap_types . RDIAMOND
    (69) hashmap_types -> hashmap_types . COMMA hashmap_type

    RDIAMOND        shift and go to state 177
    COMMA           shift and go to state 178


state 138

    (70) hashmap_types -> hashmap_type .

    RDIAMOND        reduce using rule 70 (hashmap_types -> hashmap_type .)
    COMMA           reduce using rule 70 (hashmap_types -> hashmap_type .)


state 139

    (71) hashmap_type -> tipo .

    RDIAMOND        reduce using rule 71 (hashmap_type -> tipo .)
    COMMA           reduce using rule 71 (hashmap_type -> tipo .)


state 140

    (78) array -> ARRAY L_BRACKET . var_array R_BRACKET
    (79) var_array -> . tipo SEMICOLON NUMBER
    (23) tipo -> . tipo_simple
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    var_array                      shift and go to state 179
    tipo                           shift and go to state 180
    tipo_simple                    shift and go to state 95

state 141

    (14) declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 181
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 142

    (15) declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .

    error           reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    USE             reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LDIAMOND        reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 15 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 143

    (113) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND EQUAL expresion SEMICOLON
    (114) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND SEMICOLON
    (23) tipo -> . tipo_simple
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    tipo                           shift and go to state 182
    tipo_simple                    shift and go to state 95

state 144

    (16) declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .

    error           reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    USE             reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LDIAMOND        reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 16 (declaracion_variable -> LET VARIABLE EQUAL expresion SEMICOLON .)


state 145

    (76) declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array . EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON
    (77) declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array . SEMICOLON

    EQUAL           shift and go to state 183
    SEMICOLON       shift and go to state 184


state 146

    (115) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND SEMICOLON

    LDIAMOND        shift and go to state 185


state 147

    (22) campo -> VARIABLE DOUBLE_POINT . tipo
    (23) tipo -> . tipo_simple
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    tipo                           shift and go to state 186
    tipo_simple                    shift and go to state 95

state 148

    (18) declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 187


state 149

    (20) campos -> campos COMMA . campo
    (22) campo -> . VARIABLE DOUBLE_POINT tipo

    VARIABLE        shift and go to state 112

    campo                          shift and go to state 188

state 150

    (19) declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .

    error           reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    USE             reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    LET             reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    STRUCT          reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    CONST           reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    MUT             reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    FN              reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    WHILE           reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    IF              reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    LOOP            reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    $end            reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    VARIABLE        reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    BREAK           reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    STRING          reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    LDIAMOND        reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    TRUE            reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    FALSE           reduce using rule 19 (declaracion_estructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)


state 151

    (87) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 189
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 152

    (88) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .

    error           reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    USE             reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LDIAMOND        reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 88 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 153

    (89) declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .

    error           reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    USE             reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LDIAMOND        reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 89 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)


state 154

    (91) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 190
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 155

    (92) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .

    error           reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    USE             reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LDIAMOND        reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 92 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 156

    (93) declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .

    error           reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    USE             reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LDIAMOND        reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 93 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)


state 157

    (44) parametro -> VARIABLE DOUBLE_POINT . tipo
    (23) tipo -> . tipo_simple
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    tipo                           shift and go to state 191
    tipo_simple                    shift and go to state 95

state 158

    (39) funcion_generica -> FN VARIABLE LPAREN parametros RPAREN . ARROW tipo_simple bloque

    ARROW           shift and go to state 192


state 159

    (40) parametros -> parametros COMMA . parametro
    (44) parametro -> . VARIABLE DOUBLE_POINT tipo

    VARIABLE        shift and go to state 120

    parametro                      shift and go to state 193

state 160

    (96) if -> IF condicion bloque ELSE bloque .

    error           reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    USE             reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    LET             reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    STRUCT          reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    CONST           reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    MUT             reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    FN              reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    WHILE           reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    IF              reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    LOOP            reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    $end            reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    RBRACKET        reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    VARIABLE        reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    BREAK           reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    NUMBER          reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    STRING          reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    LDIAMOND        reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    ARRAY           reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    TRUE            reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)
    FALSE           reduce using rule 96 (if -> IF condicion bloque ELSE bloque .)


state 161

    (53) asignacion -> VARIABLE EQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 194


state 162

    (117) funciones_vector -> VARIABLE DOT PUSH . LPAREN expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 195


state 163

    (118) funciones_vector -> VARIABLE DOT POP . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 196


state 164

    (119) funciones_vector -> VARIABLE DOT LEN . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 197


state 165

    (120) funciones_vector -> VARIABLE DOT IS_EMPTY . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 198


state 166

    (121) funciones_vector -> VARIABLE DOT GET . LPAREN NUMBER RPAREN SEMICOLON

    LPAREN          shift and go to state 199


state 167

    (122) funciones_vector -> VARIABLE DOT SET . LPAREN NUMBER COMMA expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 200


state 168

    (123) funciones_vector -> VARIABLE DOT REMOVE . LPAREN expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 201


state 169

    (124) funciones_vector -> VARIABLE DOT CLEAR . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 202


state 170

    (125) funciones_vector -> VARIABLE DOT SWAP . LPAREN expresion COMMA expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 203


state 171

    (126) funciones_vector -> VARIABLE DOT REVERSE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 204


state 172

    (127) funciones_vector -> VARIABLE DOT ITER . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 205


state 173

    (65) expresion_funcion -> VARIABLE LPAREN argumentos . RPAREN SEMICOLON
    (72) argumentos -> argumentos . COMMA argumento

    RPAREN          shift and go to state 206
    COMMA           shift and go to state 207


state 174

    (73) argumentos -> argumento .

    RPAREN          reduce using rule 73 (argumentos -> argumento .)
    COMMA           reduce using rule 73 (argumentos -> argumento .)


state 175

    (74) argumentos -> empty .

    RPAREN          reduce using rule 74 (argumentos -> empty .)
    COMMA           reduce using rule 74 (argumentos -> empty .)


state 176

    (75) argumento -> expresion .

    RPAREN          reduce using rule 75 (argumento -> expresion .)
    COMMA           reduce using rule 75 (argumento -> expresion .)


state 177

    (68) hashmap -> LDIAMOND hashmap_types RDIAMOND .

    SEMICOLON       reduce using rule 68 (hashmap -> LDIAMOND hashmap_types RDIAMOND .)
    RPAREN          reduce using rule 68 (hashmap -> LDIAMOND hashmap_types RDIAMOND .)
    COMMA           reduce using rule 68 (hashmap -> LDIAMOND hashmap_types RDIAMOND .)


state 178

    (69) hashmap_types -> hashmap_types COMMA . hashmap_type
    (71) hashmap_type -> . tipo
    (23) tipo -> . tipo_simple
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    hashmap_type                   shift and go to state 208
    tipo                           shift and go to state 139
    tipo_simple                    shift and go to state 95

state 179

    (78) array -> ARRAY L_BRACKET var_array . R_BRACKET

    R_BRACKET       shift and go to state 209


state 180

    (79) var_array -> tipo . SEMICOLON NUMBER

    SEMICOLON       shift and go to state 210


state 181

    (14) declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 211


state 182

    (113) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND EQUAL expresion SEMICOLON
    (114) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND SEMICOLON

    RDIAMOND        shift and go to state 212


state 183

    (76) declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL . L_BRACKET array_fill R_BRACKET SEMICOLON

    L_BRACKET       shift and go to state 213


state 184

    (77) declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .

    error           reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    USE             reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    LET             reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    STRUCT          reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    CONST           reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    MUT             reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    FN              reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    WHILE           reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    IF              reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    LOOP            reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    $end            reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    RBRACKET        reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    VARIABLE        reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    BREAK           reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    NUMBER          reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    STRING          reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    LDIAMOND        reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    ARRAY           reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    TRUE            reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    FALSE           reduce using rule 77 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)


state 185

    (115) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND SEMICOLON
    (23) tipo -> . tipo_simple
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    tipo                           shift and go to state 214
    tipo_simple                    shift and go to state 95

state 186

    (22) campo -> VARIABLE DOUBLE_POINT tipo .

    RBRACKET        reduce using rule 22 (campo -> VARIABLE DOUBLE_POINT tipo .)
    COMMA           reduce using rule 22 (campo -> VARIABLE DOUBLE_POINT tipo .)


state 187

    (18) declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .

    error           reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    USE             reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    LET             reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    STRUCT          reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    CONST           reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    MUT             reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    FN              reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    WHILE           reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    IF              reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    LOOP            reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    $end            reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    VARIABLE        reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    BREAK           reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    STRING          reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    LDIAMOND        reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    TRUE            reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)
    FALSE           reduce using rule 18 (declaracion_estructura -> STRUCT VARIABLE LBRACKET campos RBRACKET SEMICOLON .)


state 188

    (20) campos -> campos COMMA campo .

    RBRACKET        reduce using rule 20 (campos -> campos COMMA campo .)
    COMMA           reduce using rule 20 (campos -> campos COMMA campo .)


state 189

    (87) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 215


state 190

    (91) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 216


state 191

    (44) parametro -> VARIABLE DOUBLE_POINT tipo .

    RPAREN          reduce using rule 44 (parametro -> VARIABLE DOUBLE_POINT tipo .)
    COMMA           reduce using rule 44 (parametro -> VARIABLE DOUBLE_POINT tipo .)


state 192

    (39) funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW . tipo_simple bloque
    (24) tipo_simple -> . INT8
    (25) tipo_simple -> . INT16
    (26) tipo_simple -> . INT32
    (27) tipo_simple -> . INT64
    (28) tipo_simple -> . UINT8
    (29) tipo_simple -> . UINT16
    (30) tipo_simple -> . UINT32
    (31) tipo_simple -> . UINT64
    (32) tipo_simple -> . FLOAT32
    (33) tipo_simple -> . FLOAT64
    (34) tipo_simple -> . BOOL
    (35) tipo_simple -> . CHAR
    (36) tipo_simple -> . STR

    INT8            shift and go to state 96
    INT16           shift and go to state 97
    INT32           shift and go to state 98
    INT64           shift and go to state 99
    UINT8           shift and go to state 100
    UINT16          shift and go to state 101
    UINT32          shift and go to state 102
    UINT64          shift and go to state 103
    FLOAT32         shift and go to state 104
    FLOAT64         shift and go to state 105
    BOOL            shift and go to state 106
    CHAR            shift and go to state 107
    STR             shift and go to state 108

    tipo_simple                    shift and go to state 217

state 193

    (40) parametros -> parametros COMMA parametro .

    RPAREN          reduce using rule 40 (parametros -> parametros COMMA parametro .)
    COMMA           reduce using rule 40 (parametros -> parametros COMMA parametro .)


state 194

    (53) asignacion -> VARIABLE EQUAL expresion SEMICOLON .

    RBRACKET        reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    LDIAMOND        reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 53 (asignacion -> VARIABLE EQUAL expresion SEMICOLON .)


state 195

    (117) funciones_vector -> VARIABLE DOT PUSH LPAREN . expresion RPAREN SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 218
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 196

    (118) funciones_vector -> VARIABLE DOT POP LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 219


state 197

    (119) funciones_vector -> VARIABLE DOT LEN LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 220


state 198

    (120) funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 221


state 199

    (121) funciones_vector -> VARIABLE DOT GET LPAREN . NUMBER RPAREN SEMICOLON

    NUMBER          shift and go to state 222


state 200

    (122) funciones_vector -> VARIABLE DOT SET LPAREN . NUMBER COMMA expresion RPAREN SEMICOLON

    NUMBER          shift and go to state 223


state 201

    (123) funciones_vector -> VARIABLE DOT REMOVE LPAREN . expresion RPAREN SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 224
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 202

    (124) funciones_vector -> VARIABLE DOT CLEAR LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 225


state 203

    (125) funciones_vector -> VARIABLE DOT SWAP LPAREN . expresion COMMA expresion RPAREN SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 226
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 204

    (126) funciones_vector -> VARIABLE DOT REVERSE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 227


state 205

    (127) funciones_vector -> VARIABLE DOT ITER LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 228


state 206

    (65) expresion_funcion -> VARIABLE LPAREN argumentos RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 229


state 207

    (72) argumentos -> argumentos COMMA . argumento
    (75) argumento -> . expresion
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    argumento                      shift and go to state 230
    expresion                      shift and go to state 176
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 208

    (69) hashmap_types -> hashmap_types COMMA hashmap_type .

    RDIAMOND        reduce using rule 69 (hashmap_types -> hashmap_types COMMA hashmap_type .)
    COMMA           reduce using rule 69 (hashmap_types -> hashmap_types COMMA hashmap_type .)


state 209

    (78) array -> ARRAY L_BRACKET var_array R_BRACKET .

    SEMICOLON       reduce using rule 78 (array -> ARRAY L_BRACKET var_array R_BRACKET .)
    EQUAL           reduce using rule 78 (array -> ARRAY L_BRACKET var_array R_BRACKET .)
    RPAREN          reduce using rule 78 (array -> ARRAY L_BRACKET var_array R_BRACKET .)
    COMMA           reduce using rule 78 (array -> ARRAY L_BRACKET var_array R_BRACKET .)


state 210

    (79) var_array -> tipo SEMICOLON . NUMBER

    NUMBER          shift and go to state 231


state 211

    (14) declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    error           reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    USE             reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LDIAMOND        reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 14 (declaracion_variable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 212

    (113) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . EQUAL expresion SEMICOLON
    (114) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . SEMICOLON

    EQUAL           shift and go to state 232
    SEMICOLON       shift and go to state 233


state 213

    (76) declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET . array_fill R_BRACKET SEMICOLON
    (80) array_fill -> . VARIABLE COMMA array_fill
    (81) array_fill -> . VARIABLE

    VARIABLE        shift and go to state 234

    array_fill                     shift and go to state 235

state 214

    (115) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND EQUAL expresion SEMICOLON
    (116) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND SEMICOLON

    RDIAMOND        shift and go to state 236


state 215

    (87) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    error           reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    USE             reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LDIAMOND        reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 87 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 216

    (91) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    error           reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    USE             reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LDIAMOND        reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 91 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 217

    (39) funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple . bloque
    (45) bloque -> . LBRACKET sentencias RBRACKET

    LBRACKET        shift and go to state 48

    bloque                         shift and go to state 237

state 218

    (117) funciones_vector -> VARIABLE DOT PUSH LPAREN expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 238


state 219

    (118) funciones_vector -> VARIABLE DOT POP LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 239


state 220

    (119) funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 240


state 221

    (120) funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 241


state 222

    (121) funciones_vector -> VARIABLE DOT GET LPAREN NUMBER . RPAREN SEMICOLON

    RPAREN          shift and go to state 242


state 223

    (122) funciones_vector -> VARIABLE DOT SET LPAREN NUMBER . COMMA expresion RPAREN SEMICOLON

    COMMA           shift and go to state 243


state 224

    (123) funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 244


state 225

    (124) funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 245


state 226

    (125) funciones_vector -> VARIABLE DOT SWAP LPAREN expresion . COMMA expresion RPAREN SEMICOLON

    COMMA           shift and go to state 246


state 227

    (126) funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 247


state 228

    (127) funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 248


state 229

    (65) expresion_funcion -> VARIABLE LPAREN argumentos RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 65 (expresion_funcion -> VARIABLE LPAREN argumentos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 65 (expresion_funcion -> VARIABLE LPAREN argumentos RPAREN SEMICOLON .)
    COMMA           reduce using rule 65 (expresion_funcion -> VARIABLE LPAREN argumentos RPAREN SEMICOLON .)


state 230

    (72) argumentos -> argumentos COMMA argumento .

    RPAREN          reduce using rule 72 (argumentos -> argumentos COMMA argumento .)
    COMMA           reduce using rule 72 (argumentos -> argumentos COMMA argumento .)


state 231

    (79) var_array -> tipo SEMICOLON NUMBER .

    R_BRACKET       reduce using rule 79 (var_array -> tipo SEMICOLON NUMBER .)


state 232

    (113) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL . expresion SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 249
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 233

    (114) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .

    error           reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    USE             reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LET             reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRUCT          reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    CONST           reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    MUT             reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FN              reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    WHILE           reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    IF              reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LOOP            reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    $end            reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    RBRACKET        reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    VARIABLE        reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    BREAK           reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    NUMBER          reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRING          reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LDIAMOND        reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    ARRAY           reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    TRUE            reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FALSE           reduce using rule 114 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)


state 234

    (80) array_fill -> VARIABLE . COMMA array_fill
    (81) array_fill -> VARIABLE .

    COMMA           shift and go to state 250
    R_BRACKET       reduce using rule 81 (array_fill -> VARIABLE .)


state 235

    (76) declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill . R_BRACKET SEMICOLON

    R_BRACKET       shift and go to state 251


state 236

    (115) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . EQUAL expresion SEMICOLON
    (116) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . SEMICOLON

    EQUAL           shift and go to state 252
    SEMICOLON       shift and go to state 253


state 237

    (39) funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .

    error           reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)
    USE             reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)
    LET             reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)
    STRUCT          reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)
    CONST           reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)
    MUT             reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)
    FN              reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)
    WHILE           reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)
    IF              reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)
    LOOP            reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)
    $end            reduce using rule 39 (funcion_generica -> FN VARIABLE LPAREN parametros RPAREN ARROW tipo_simple bloque .)


state 238

    (117) funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 254


state 239

    (118) funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .

    RBRACKET        reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 118 (funciones_vector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)


state 240

    (119) funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .

    RBRACKET        reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 119 (funciones_vector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)


state 241

    (120) funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .

    RBRACKET        reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 120 (funciones_vector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)


state 242

    (121) funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 255


state 243

    (122) funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA . expresion RPAREN SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 256
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 244

    (123) funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 257


state 245

    (124) funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .

    RBRACKET        reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 124 (funciones_vector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)


state 246

    (125) funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA . expresion RPAREN SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 258
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 247

    (126) funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .

    RBRACKET        reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 126 (funciones_vector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)


state 248

    (127) funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .

    RBRACKET        reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 127 (funciones_vector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)


state 249

    (113) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 259


state 250

    (80) array_fill -> VARIABLE COMMA . array_fill
    (80) array_fill -> . VARIABLE COMMA array_fill
    (81) array_fill -> . VARIABLE

    VARIABLE        shift and go to state 234

    array_fill                     shift and go to state 260

state 251

    (76) declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 261


state 252

    (115) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL . expresion SEMICOLON
    (54) expresion -> . expresion_literal
    (55) expresion -> . expresion_variable
    (56) expresion -> . expresion_funcion
    (57) expresion -> . expresion_estructura
    (58) expresion_literal -> . literal
    (64) expresion_variable -> . VARIABLE
    (65) expresion_funcion -> . VARIABLE LPAREN argumentos RPAREN SEMICOLON
    (66) expresion_estructura -> . hashmap
    (67) expresion_estructura -> . array
    (59) literal -> . NUMBER
    (60) literal -> . STRING
    (61) literal -> . boolean
    (68) hashmap -> . LDIAMOND hashmap_types RDIAMOND
    (78) array -> . ARRAY L_BRACKET var_array R_BRACKET
    (62) boolean -> . TRUE
    (63) boolean -> . FALSE

    VARIABLE        shift and go to state 109
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    LDIAMOND        shift and go to state 90
    ARRAY           shift and go to state 92
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expresion                      shift and go to state 262
    expresion_literal              shift and go to state 82
    expresion_variable             shift and go to state 83
    expresion_funcion              shift and go to state 84
    expresion_estructura           shift and go to state 85
    literal                        shift and go to state 42
    hashmap                        shift and go to state 88
    array                          shift and go to state 89
    boolean                        shift and go to state 91

state 253

    (116) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .

    error           reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    USE             reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LET             reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRUCT          reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    CONST           reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    MUT             reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FN              reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    WHILE           reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    IF              reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LOOP            reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    $end            reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    RBRACKET        reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    VARIABLE        reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    BREAK           reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    NUMBER          reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRING          reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LDIAMOND        reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    ARRAY           reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    TRUE            reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FALSE           reduce using rule 116 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)


state 254

    (117) funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .

    RBRACKET        reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    LET             reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    IF              reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 117 (funciones_vector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)


state 255

    (121) funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .

    RBRACKET        reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    BREAK           reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    LET             reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    STRUCT          reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    CONST           reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    MUT             reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    NUMBER          reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    STRING          reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    ARRAY           reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    WHILE           reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    IF              reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    LOOP            reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    TRUE            reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    FALSE           reduce using rule 121 (funciones_vector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)


state 256

    (122) funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 263


state 257

    (123) funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .

    RBRACKET        reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    LET             reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    IF              reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 123 (funciones_vector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)


state 258

    (125) funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 264


state 259

    (113) declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .

    error           reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    USE             reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LET             reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FN              reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    IF              reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    $end            reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LDIAMOND        reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 113 (declaracion_vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)


state 260

    (80) array_fill -> VARIABLE COMMA array_fill .

    R_BRACKET       reduce using rule 80 (array_fill -> VARIABLE COMMA array_fill .)


state 261

    (76) declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .

    error           reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    USE             reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    LET             reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    STRUCT          reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    CONST           reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    MUT             reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    FN              reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    WHILE           reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    IF              reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    LOOP            reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    $end            reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    RBRACKET        reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    BREAK           reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    NUMBER          reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    STRING          reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    LDIAMOND        reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    TRUE            reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)
    FALSE           reduce using rule 76 (declaracion_array -> LET MUT VARIABLE DOUBLE_POINT array EQUAL L_BRACKET array_fill R_BRACKET SEMICOLON .)


state 262

    (115) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion . SEMICOLON

    SEMICOLON       shift and go to state 265


state 263

    (122) funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 266


state 264

    (125) funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 267


state 265

    (115) declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .

    error           reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    USE             reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LET             reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FN              reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    IF              reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    $end            reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LDIAMOND        reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 115 (declaracion_vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)


state 266

    (122) funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .

    RBRACKET        reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    LET             reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    IF              reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 122 (funciones_vector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)


state 267

    (125) funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .

    RBRACKET        reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LET             reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LDIAMOND        reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    IF              reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 125 (funciones_vector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)

