Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    AS
    BITOR
    BITXOR
    CONTAINS_KEY
    ENUM
    GREATER
    IMPL
    LESS
    MATCH
    MOD
    PERCENTAGE
    PUB
    REF
    STATIC
    TRAIT
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> program item
Rule 2     program -> item
Rule 3     item -> definicion
Rule 4     item -> estructuracontrol
Rule 5     item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
Rule 6     item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
Rule 7     item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
Rule 8     item -> expresion
Rule 9     item -> expresion SEMICOLON
Rule 10    item -> continue
Rule 11    item -> break
Rule 12    item -> funcionesesdata
Rule 13    item -> RETURN expresion SEMICOLON
Rule 14    item -> import
Rule 15    item -> llamadarandom
Rule 16    estructuracontrol -> for
Rule 17    estructuracontrol -> while
Rule 18    estructuracontrol -> if
Rule 19    estructuracontrol -> loop
Rule 20    for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
Rule 21    for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
Rule 22    for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
Rule 23    for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
Rule 24    for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET
Rule 25    for -> FOR VARIABLE IN expresion LBRACKET RBRACKET
Rule 26    definicion -> definicionvariable
Rule 27    definicion -> definicionestructura
Rule 28    definicion -> definicionfuncion
Rule 29    definicion -> definicionestructuradatos
Rule 30    definicionestructuradatos -> hashmap
Rule 31    definicionestructuradatos -> array
Rule 32    definicionestructuradatos -> vector
Rule 33    definicionestructuradatos -> list
Rule 34    list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
Rule 35    numeros -> NUMBER
Rule 36    numeros -> NUMBER COMMA numeros
Rule 37    hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
Rule 38    funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
Rule 39    funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN
Rule 40    funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN
Rule 41    funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN
Rule 42    funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN
Rule 43    funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN
Rule 44    funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN
Rule 45    definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
Rule 46    definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
Rule 47    definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 48    definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON
Rule 49    definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON
Rule 50    definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 51    definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
Rule 52    definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
Rule 53    definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 54    definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 55    definicionvariable -> LET VARIABLE SEMICOLON
Rule 56    definicionvariable -> VARIABLE EQUAL expresion SEMICOLON
Rule 57    definicionvariable -> VARIABLE EQUAL STRING SEMICOLON
Rule 58    definicionvariable -> LET VARIABLE EQUAL expresion
Rule 59    definicionvariable -> declaracion_constante
Rule 60    definicionvariable -> declaracion_mutable
Rule 61    definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
Rule 62    definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom
Rule 63    vars -> VARIABLE
Rule 64    vars -> VARIABLE COMMA vars
Rule 65    tipo -> INT8
Rule 66    tipo -> INT16
Rule 67    tipo -> INT32
Rule 68    tipo -> INT64
Rule 69    tipo -> UINT8
Rule 70    tipo -> UINT16
Rule 71    tipo -> UINT32
Rule 72    tipo -> UINT64
Rule 73    tipo -> FLOAT32
Rule 74    tipo -> FLOAT64
Rule 75    tipo -> BOOL
Rule 76    tipo -> CHAR
Rule 77    tipo -> STR
Rule 78    tipo -> VARIABLE
Rule 79    tipo -> VEC tipo
Rule 80    expresion -> ops
Rule 81    expresion -> NUMBER
Rule 82    expresion -> FLOAT
Rule 83    expresion -> STRING
Rule 84    expresion -> TRUE
Rule 85    expresion -> FALSE
Rule 86    expresion -> VARIABLE
Rule 87    expresion -> expresion
Rule 88    expresion -> opbasicas
Rule 89    expresion -> estructuracontrol
Rule 90    expresion -> definicionvariable
Rule 91    expresion -> llamarfuncion
Rule 92    llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON
Rule 93    llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON
Rule 94    llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
Rule 95    llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON
Rule 96    llamarfuncion -> VARIABLE LPAREN operandos RPAREN
Rule 97    operaciones -> PLUS
Rule 98    operaciones -> MINUS
Rule 99    operaciones -> TIMES
Rule 100   operaciones -> DIVIDE
Rule 101   operaciones -> RDIAMOND
Rule 102   operaciones -> LDIAMOND
Rule 103   operaciones -> EQUAL_EQUAL
Rule 104   operaciones -> NOT_EQUAL
Rule 105   operaciones -> LESS_EQUAL
Rule 106   operaciones -> GREATER_EQUAL
Rule 107   operaciones -> PLUS_EQUAL
Rule 108   operandos -> NUMBER
Rule 109   operandos -> FLOAT
Rule 110   operandos -> VARIABLE
Rule 111   operandos -> STRING
Rule 112   operandos -> opbasicas
Rule 113   operandos -> TIMES VARIABLE
Rule 114   operandos -> BITAND VARIABLE
Rule 115   operandos -> operandos COMMA operandos
Rule 116   variables -> VARIABLE
Rule 117   variables -> VARIABLE COMMA variables
Rule 118   definicionfuncion -> funciongenerica
Rule 119   funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
Rule 120   funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
Rule 121   array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
Rule 122   array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
Rule 123   while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
Rule 124   while -> WHILE expresion LBRACKET program RBRACKET
Rule 125   funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
Rule 126   funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
Rule 127   funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
Rule 128   funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
Rule 129   import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
Rule 130   llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
Rule 131   expresionlogica -> operandos AND operandos
Rule 132   expresionlogica -> operandos OR operandos
Rule 133   expresionlogica -> operandos
Rule 134   expresionlogica -> TRUE
Rule 135   expresionlogica -> FALSE
Rule 136   break -> BREAK SEMICOLON
Rule 137   break -> BREAK expresion SEMICOLON
Rule 138   continue -> CONTINUE SEMICOLON
Rule 139   declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 140   declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 141   declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON
Rule 142   declaracion_constante -> CONST VARIABLE SEMICOLON
Rule 143   declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
Rule 144   declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
Rule 145   declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON
Rule 146   declaracion_mutable -> MUT VARIABLE SEMICOLON
Rule 147   if -> IF expresion LBRACKET program RBRACKET
Rule 148   if -> IF expresion LBRACKET program RBRACKET ELSE
Rule 149   if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
Rule 150   loop -> LOOP LBRACKET program RBRACKET
Rule 151   vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
Rule 152   vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
Rule 153   vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
Rule 154   vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
Rule 155   vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
Rule 156   funcionesesdata -> funcionesvector
Rule 157   funcionesesdata -> funcioneshashmap
Rule 158   funcionesesdata -> funcionesarray
Rule 159   funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
Rule 160   funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON
Rule 161   funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
Rule 162   funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
Rule 163   funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
Rule 164   funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
Rule 165   funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
Rule 166   funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
Rule 167   funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
Rule 168   funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
Rule 169   funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
Rule 170   opbasicas -> ARRAY DOT LEN LPAREN RPAREN
Rule 171   opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
Rule 172   opbasicas -> VARIABLE DOT ITER LPAREN RPAREN
Rule 173   opbasicas -> ARRAY L_BRACKET operandos R_BRACKET
Rule 174   opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
Rule 175   opbasicas -> STRING DOT TO_STRING LPAREN RPAREN
Rule 176   opbasicas -> VARIABLE LPAREN variables RPAREN
Rule 177   opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET
Rule 178   opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN
Rule 179   ops -> operandos operaciones operandos
Rule 180   ops -> operandos operaciones ops

Terminals, with rules where they appear

AND                  : 131
ARRAY                : 121 170 173
ARROW                : 
AS                   : 
BITAND               : 114 171
BITOR                : 
BITXOR               : 
BOOL                 : 75
BREAK                : 136 137
CHAR                 : 76
CLEAR                : 43 127 166
COMMA                : 6 7 36 37 38 64 94 115 117 164 167
CONST                : 139 140 141 142
CONTAINS_KEY         : 
CONTINUE             : 138
DIVIDE               : 100
DOT                  : 22 22 23 23 38 39 40 41 42 43 44 125 126 127 128 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 174 174 174 175 178
DOUBLE_POINT         : 37 37 37 47 50 51 52 53 54 121 122 129 129 130 130 139 140 143 144 151 152 153 154 155 155 155
ELSE                 : 148 149
ENUM                 : 
EQUAL                : 22 23 34 37 47 48 49 50 51 52 56 57 58 61 62 121 139 141 143 145 151 153 155
EQUAL_EQUAL          : 103
EXCLAMATION          : 5 6 7 177
FALSE                : 85 135
FLOAT                : 82 109
FLOAT32              : 73
FLOAT64              : 74
FN                   : 119 120
FOR                  : 20 21 22 23 24 25
GET                  : 40 163
GREATER              : 
GREATER_EQUAL        : 106
HASHMAP              : 37 37
IF                   : 147 148 149
IMPL                 : 
IN                   : 20 21 22 23 24 25
INSERT               : 38
INT16                : 66
INT32                : 67
INT64                : 68
INT8                 : 65
IS_EMPTY             : 42 126 162
ITER                 : 44 128 169 172
LBRACKET             : 20 21 22 23 24 25 45 46 119 120 123 124 147 148 149 149 150
LDIAMOND             : 37 102 151 152 153 154 155
LEN                  : 41 125 161 170
LESS                 : 
LESS_EQUAL           : 105
LET                  : 34 37 47 48 49 50 51 52 53 54 55 58 61 62 121 122 151 152 153 154 155
LOOP                 : 150
LPAREN               : 5 6 7 37 38 39 40 41 42 43 44 61 92 93 94 95 96 119 120 123 125 126 127 128 130 155 159 160 161 162 163 164 165 166 167 168 169 170 172 174 174 175 176 178
L_BRACKET            : 34 121 121 171 173 177
MAIN                 : 120
MATCH                : 
MINUS                : 98
MOD                  : 
MUT                  : 37 49 50 52 54 62 121 122 143 144 145 146 153 154
NEW                  : 37 155
NOT_EQUAL            : 104
NUMBER               : 22 22 23 23 35 36 81 108 121 121 121 163 164 171 171 174 174
OR                   : 132
PERCENTAGE           : 
PLUS                 : 97
PLUS_EQUAL           : 107
POP                  : 160
PRINT                : 5 6 7
PUB                  : 
PUSH                 : 159
RBRACKET             : 20 21 22 23 24 25 45 46 119 120 123 124 147 148 149 149 150
RDIAMOND             : 37 101 151 152 153 154 155
REF                  : 
REMOVE               : 39 165
RETURN               : 13
REV                  : 174
REVERSE              : 168
RPAREN               : 5 6 7 37 38 39 40 41 42 43 44 61 92 93 94 95 96 119 120 123 125 126 127 128 130 155 159 160 161 162 163 164 165 166 167 168 169 170 172 174 174 175 176 178
R_BRACKET            : 34 121 121 171 173 177
SEMICOLON            : 5 6 7 9 13 34 37 45 46 47 48 49 50 51 52 53 54 55 56 57 92 93 94 95 121 121 121 122 125 126 127 128 129 130 136 137 138 139 140 141 142 143 144 145 146 151 152 153 154 155 159 160 161 162 163 164 165 166 167 168 169
SET                  : 164
STATIC               : 
STR                  : 77
STRING               : 5 6 7 51 52 57 83 111 175
STRUCT               : 45 46
SWAP                 : 167
TIMES                : 99 113
TO_STRING            : 175
TRAIT                : 
TRUE                 : 84 134
TYPE                 : 
UINT16               : 70
UINT32               : 71
UINT64               : 72
UINT8                : 69
USE                  : 129
VARIABLE             : 20 20 21 21 22 23 24 25 34 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 61 61 62 63 64 78 86 92 93 94 95 96 110 113 114 116 117 119 122 125 126 127 128 129 129 130 130 139 140 141 142 143 144 145 146 151 152 153 154 155 159 160 161 162 163 164 165 166 167 168 169 171 172 176 178 178
VEC                  : 79 151 152 153 154 155 155 177
WHILE                : 123 124
error                : 

Nonterminals, with rules where they appear

array                : 31 122
break                : 11
continue             : 10
declaracion_constante : 59
declaracion_mutable  : 60
definicion           : 3
definicionestructura : 27
definicionestructuradatos : 29
definicionfuncion    : 28
definicionvariable   : 26 90
estructuracontrol    : 4 89
expresion            : 6 8 9 13 24 25 38 38 39 40 47 48 49 50 56 58 87 93 94 94 123 124 137 139 141 143 145 147 148 149 151 153 159 164 165 167 167
expresionlogica      : 
for                  : 16
funcionesarray       : 158
funcionesesdata      : 12
funcioneshashmap     : 157
funcionesvector      : 156
funciongenerica      : 118
hashmap              : 30
if                   : 18
import               : 14
item                 : 1 2 45
list                 : 33
llamadarandom        : 15 62
llamarfuncion        : 61 91
loop                 : 19
numeros              : 34 36 177
opbasicas            : 88 112
operaciones          : 179 180
operandos            : 95 96 115 115 131 131 132 132 133 173 179 179 180
ops                  : 80 180
program              : 1 20 22 24 119 120 123 124 147 148 149 149 150 0
tipo                 : 37 37 47 50 51 52 53 54 79 121 139 140 143 144 151 152 153 154 155
variables            : 117 176
vars                 : 7 64
vector               : 32
while                : 17

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    program                        shift and go to state 1
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 1

    (0) S' -> program .
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 2

    (2) program -> item .

    PRINT           reduce using rule 2 (program -> item .)
    RETURN          reduce using rule 2 (program -> item .)
    NUMBER          reduce using rule 2 (program -> item .)
    FLOAT           reduce using rule 2 (program -> item .)
    STRING          reduce using rule 2 (program -> item .)
    TRUE            reduce using rule 2 (program -> item .)
    FALSE           reduce using rule 2 (program -> item .)
    VARIABLE        reduce using rule 2 (program -> item .)
    CONTINUE        reduce using rule 2 (program -> item .)
    BREAK           reduce using rule 2 (program -> item .)
    USE             reduce using rule 2 (program -> item .)
    LET             reduce using rule 2 (program -> item .)
    STRUCT          reduce using rule 2 (program -> item .)
    FOR             reduce using rule 2 (program -> item .)
    WHILE           reduce using rule 2 (program -> item .)
    IF              reduce using rule 2 (program -> item .)
    LOOP            reduce using rule 2 (program -> item .)
    ARRAY           reduce using rule 2 (program -> item .)
    BITAND          reduce using rule 2 (program -> item .)
    LPAREN          reduce using rule 2 (program -> item .)
    VEC             reduce using rule 2 (program -> item .)
    CONST           reduce using rule 2 (program -> item .)
    MUT             reduce using rule 2 (program -> item .)
    FN              reduce using rule 2 (program -> item .)
    TIMES           reduce using rule 2 (program -> item .)
    $end            reduce using rule 2 (program -> item .)
    RBRACKET        reduce using rule 2 (program -> item .)


state 3

    (3) item -> definicion .

    PRINT           reduce using rule 3 (item -> definicion .)
    RETURN          reduce using rule 3 (item -> definicion .)
    NUMBER          reduce using rule 3 (item -> definicion .)
    FLOAT           reduce using rule 3 (item -> definicion .)
    STRING          reduce using rule 3 (item -> definicion .)
    TRUE            reduce using rule 3 (item -> definicion .)
    FALSE           reduce using rule 3 (item -> definicion .)
    VARIABLE        reduce using rule 3 (item -> definicion .)
    CONTINUE        reduce using rule 3 (item -> definicion .)
    BREAK           reduce using rule 3 (item -> definicion .)
    USE             reduce using rule 3 (item -> definicion .)
    LET             reduce using rule 3 (item -> definicion .)
    STRUCT          reduce using rule 3 (item -> definicion .)
    FOR             reduce using rule 3 (item -> definicion .)
    WHILE           reduce using rule 3 (item -> definicion .)
    IF              reduce using rule 3 (item -> definicion .)
    LOOP            reduce using rule 3 (item -> definicion .)
    ARRAY           reduce using rule 3 (item -> definicion .)
    BITAND          reduce using rule 3 (item -> definicion .)
    LPAREN          reduce using rule 3 (item -> definicion .)
    VEC             reduce using rule 3 (item -> definicion .)
    CONST           reduce using rule 3 (item -> definicion .)
    MUT             reduce using rule 3 (item -> definicion .)
    FN              reduce using rule 3 (item -> definicion .)
    TIMES           reduce using rule 3 (item -> definicion .)
    $end            reduce using rule 3 (item -> definicion .)
    RBRACKET        reduce using rule 3 (item -> definicion .)


state 4

    (4) item -> estructuracontrol .
    (89) expresion -> estructuracontrol .

  ! reduce/reduce conflict for PRINT resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for RETURN resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for NUMBER resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for FLOAT resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for STRING resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for TRUE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for FALSE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for BREAK resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for USE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for LET resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for STRUCT resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for FOR resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for WHILE resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for IF resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for LOOP resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for ARRAY resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for BITAND resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for LPAREN resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for VEC resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for CONST resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for MUT resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for FN resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for TIMES resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for $end resolved using rule 4 (item -> estructuracontrol .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 4 (item -> estructuracontrol .)
    PRINT           reduce using rule 4 (item -> estructuracontrol .)
    RETURN          reduce using rule 4 (item -> estructuracontrol .)
    NUMBER          reduce using rule 4 (item -> estructuracontrol .)
    FLOAT           reduce using rule 4 (item -> estructuracontrol .)
    STRING          reduce using rule 4 (item -> estructuracontrol .)
    TRUE            reduce using rule 4 (item -> estructuracontrol .)
    FALSE           reduce using rule 4 (item -> estructuracontrol .)
    VARIABLE        reduce using rule 4 (item -> estructuracontrol .)
    CONTINUE        reduce using rule 4 (item -> estructuracontrol .)
    BREAK           reduce using rule 4 (item -> estructuracontrol .)
    USE             reduce using rule 4 (item -> estructuracontrol .)
    LET             reduce using rule 4 (item -> estructuracontrol .)
    STRUCT          reduce using rule 4 (item -> estructuracontrol .)
    FOR             reduce using rule 4 (item -> estructuracontrol .)
    WHILE           reduce using rule 4 (item -> estructuracontrol .)
    IF              reduce using rule 4 (item -> estructuracontrol .)
    LOOP            reduce using rule 4 (item -> estructuracontrol .)
    ARRAY           reduce using rule 4 (item -> estructuracontrol .)
    BITAND          reduce using rule 4 (item -> estructuracontrol .)
    LPAREN          reduce using rule 4 (item -> estructuracontrol .)
    VEC             reduce using rule 4 (item -> estructuracontrol .)
    CONST           reduce using rule 4 (item -> estructuracontrol .)
    MUT             reduce using rule 4 (item -> estructuracontrol .)
    FN              reduce using rule 4 (item -> estructuracontrol .)
    TIMES           reduce using rule 4 (item -> estructuracontrol .)
    $end            reduce using rule 4 (item -> estructuracontrol .)
    RBRACKET        reduce using rule 4 (item -> estructuracontrol .)
    SEMICOLON       reduce using rule 89 (expresion -> estructuracontrol .)

  ! PRINT           [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! RETURN          [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! NUMBER          [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! FLOAT           [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! STRING          [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! TRUE            [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! FALSE           [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! VARIABLE        [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! CONTINUE        [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! BREAK           [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! USE             [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! LET             [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! STRUCT          [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! FOR             [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! WHILE           [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! IF              [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! LOOP            [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! ARRAY           [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! BITAND          [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! LPAREN          [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! VEC             [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! CONST           [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! MUT             [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! FN              [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! TIMES           [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! $end            [ reduce using rule 89 (expresion -> estructuracontrol .) ]
  ! RBRACKET        [ reduce using rule 89 (expresion -> estructuracontrol .) ]


state 5

    (5) item -> PRINT . EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> PRINT . EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> PRINT . EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON

    EXCLAMATION     shift and go to state 59


state 6

    (174) opbasicas -> LPAREN . NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN

    NUMBER          shift and go to state 60


state 7

    (83) expresion -> STRING .
    (175) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN
    (111) operandos -> STRING .

  ! reduce/reduce conflict for COMMA resolved using rule 83 (expresion -> STRING .)
  ! reduce/reduce conflict for TIMES resolved using rule 83 (expresion -> STRING .)
    SEMICOLON       reduce using rule 83 (expresion -> STRING .)
    PRINT           reduce using rule 83 (expresion -> STRING .)
    RETURN          reduce using rule 83 (expresion -> STRING .)
    NUMBER          reduce using rule 83 (expresion -> STRING .)
    FLOAT           reduce using rule 83 (expresion -> STRING .)
    STRING          reduce using rule 83 (expresion -> STRING .)
    TRUE            reduce using rule 83 (expresion -> STRING .)
    FALSE           reduce using rule 83 (expresion -> STRING .)
    VARIABLE        reduce using rule 83 (expresion -> STRING .)
    CONTINUE        reduce using rule 83 (expresion -> STRING .)
    BREAK           reduce using rule 83 (expresion -> STRING .)
    USE             reduce using rule 83 (expresion -> STRING .)
    LET             reduce using rule 83 (expresion -> STRING .)
    STRUCT          reduce using rule 83 (expresion -> STRING .)
    FOR             reduce using rule 83 (expresion -> STRING .)
    WHILE           reduce using rule 83 (expresion -> STRING .)
    IF              reduce using rule 83 (expresion -> STRING .)
    LOOP            reduce using rule 83 (expresion -> STRING .)
    ARRAY           reduce using rule 83 (expresion -> STRING .)
    BITAND          reduce using rule 83 (expresion -> STRING .)
    LPAREN          reduce using rule 83 (expresion -> STRING .)
    VEC             reduce using rule 83 (expresion -> STRING .)
    CONST           reduce using rule 83 (expresion -> STRING .)
    MUT             reduce using rule 83 (expresion -> STRING .)
    FN              reduce using rule 83 (expresion -> STRING .)
    TIMES           reduce using rule 83 (expresion -> STRING .)
    $end            reduce using rule 83 (expresion -> STRING .)
    LBRACKET        reduce using rule 83 (expresion -> STRING .)
    RPAREN          reduce using rule 83 (expresion -> STRING .)
    RBRACKET        reduce using rule 83 (expresion -> STRING .)
    COMMA           reduce using rule 83 (expresion -> STRING .)
    DOT             shift and go to state 61
    PLUS            reduce using rule 111 (operandos -> STRING .)
    MINUS           reduce using rule 111 (operandos -> STRING .)
    DIVIDE          reduce using rule 111 (operandos -> STRING .)
    RDIAMOND        reduce using rule 111 (operandos -> STRING .)
    LDIAMOND        reduce using rule 111 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 111 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 111 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 111 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 111 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 111 (operandos -> STRING .)

  ! COMMA           [ reduce using rule 111 (operandos -> STRING .) ]
  ! TIMES           [ reduce using rule 111 (operandos -> STRING .) ]


state 8

    (8) item -> expresion .
    (9) item -> expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for RETURN resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for NUMBER resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for FLOAT resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for STRING resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for TRUE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for FALSE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for BREAK resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for USE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for LET resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for STRUCT resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for IF resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for LOOP resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for ARRAY resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for BITAND resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for LPAREN resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for VEC resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for CONST resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for MUT resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for FN resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for TIMES resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for $end resolved using rule 8 (item -> expresion .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 8 (item -> expresion .)
    PRINT           reduce using rule 8 (item -> expresion .)
    RETURN          reduce using rule 8 (item -> expresion .)
    NUMBER          reduce using rule 8 (item -> expresion .)
    FLOAT           reduce using rule 8 (item -> expresion .)
    STRING          reduce using rule 8 (item -> expresion .)
    TRUE            reduce using rule 8 (item -> expresion .)
    FALSE           reduce using rule 8 (item -> expresion .)
    VARIABLE        reduce using rule 8 (item -> expresion .)
    CONTINUE        reduce using rule 8 (item -> expresion .)
    BREAK           reduce using rule 8 (item -> expresion .)
    USE             reduce using rule 8 (item -> expresion .)
    LET             reduce using rule 8 (item -> expresion .)
    STRUCT          reduce using rule 8 (item -> expresion .)
    FOR             reduce using rule 8 (item -> expresion .)
    WHILE           reduce using rule 8 (item -> expresion .)
    IF              reduce using rule 8 (item -> expresion .)
    LOOP            reduce using rule 8 (item -> expresion .)
    ARRAY           reduce using rule 8 (item -> expresion .)
    BITAND          reduce using rule 8 (item -> expresion .)
    LPAREN          reduce using rule 8 (item -> expresion .)
    VEC             reduce using rule 8 (item -> expresion .)
    CONST           reduce using rule 8 (item -> expresion .)
    MUT             reduce using rule 8 (item -> expresion .)
    FN              reduce using rule 8 (item -> expresion .)
    TIMES           reduce using rule 8 (item -> expresion .)
    $end            reduce using rule 8 (item -> expresion .)
    RBRACKET        reduce using rule 8 (item -> expresion .)
    SEMICOLON       shift and go to state 62

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]
  ! PRINT           [ reduce using rule 87 (expresion -> expresion .) ]
  ! RETURN          [ reduce using rule 87 (expresion -> expresion .) ]
  ! NUMBER          [ reduce using rule 87 (expresion -> expresion .) ]
  ! FLOAT           [ reduce using rule 87 (expresion -> expresion .) ]
  ! STRING          [ reduce using rule 87 (expresion -> expresion .) ]
  ! TRUE            [ reduce using rule 87 (expresion -> expresion .) ]
  ! FALSE           [ reduce using rule 87 (expresion -> expresion .) ]
  ! VARIABLE        [ reduce using rule 87 (expresion -> expresion .) ]
  ! CONTINUE        [ reduce using rule 87 (expresion -> expresion .) ]
  ! BREAK           [ reduce using rule 87 (expresion -> expresion .) ]
  ! USE             [ reduce using rule 87 (expresion -> expresion .) ]
  ! LET             [ reduce using rule 87 (expresion -> expresion .) ]
  ! STRUCT          [ reduce using rule 87 (expresion -> expresion .) ]
  ! FOR             [ reduce using rule 87 (expresion -> expresion .) ]
  ! WHILE           [ reduce using rule 87 (expresion -> expresion .) ]
  ! IF              [ reduce using rule 87 (expresion -> expresion .) ]
  ! LOOP            [ reduce using rule 87 (expresion -> expresion .) ]
  ! ARRAY           [ reduce using rule 87 (expresion -> expresion .) ]
  ! BITAND          [ reduce using rule 87 (expresion -> expresion .) ]
  ! LPAREN          [ reduce using rule 87 (expresion -> expresion .) ]
  ! VEC             [ reduce using rule 87 (expresion -> expresion .) ]
  ! CONST           [ reduce using rule 87 (expresion -> expresion .) ]
  ! MUT             [ reduce using rule 87 (expresion -> expresion .) ]
  ! FN              [ reduce using rule 87 (expresion -> expresion .) ]
  ! TIMES           [ reduce using rule 87 (expresion -> expresion .) ]
  ! $end            [ reduce using rule 87 (expresion -> expresion .) ]
  ! RBRACKET        [ reduce using rule 87 (expresion -> expresion .) ]


state 9

    (10) item -> continue .

    PRINT           reduce using rule 10 (item -> continue .)
    RETURN          reduce using rule 10 (item -> continue .)
    NUMBER          reduce using rule 10 (item -> continue .)
    FLOAT           reduce using rule 10 (item -> continue .)
    STRING          reduce using rule 10 (item -> continue .)
    TRUE            reduce using rule 10 (item -> continue .)
    FALSE           reduce using rule 10 (item -> continue .)
    VARIABLE        reduce using rule 10 (item -> continue .)
    CONTINUE        reduce using rule 10 (item -> continue .)
    BREAK           reduce using rule 10 (item -> continue .)
    USE             reduce using rule 10 (item -> continue .)
    LET             reduce using rule 10 (item -> continue .)
    STRUCT          reduce using rule 10 (item -> continue .)
    FOR             reduce using rule 10 (item -> continue .)
    WHILE           reduce using rule 10 (item -> continue .)
    IF              reduce using rule 10 (item -> continue .)
    LOOP            reduce using rule 10 (item -> continue .)
    ARRAY           reduce using rule 10 (item -> continue .)
    BITAND          reduce using rule 10 (item -> continue .)
    LPAREN          reduce using rule 10 (item -> continue .)
    VEC             reduce using rule 10 (item -> continue .)
    CONST           reduce using rule 10 (item -> continue .)
    MUT             reduce using rule 10 (item -> continue .)
    FN              reduce using rule 10 (item -> continue .)
    TIMES           reduce using rule 10 (item -> continue .)
    $end            reduce using rule 10 (item -> continue .)
    RBRACKET        reduce using rule 10 (item -> continue .)


state 10

    (11) item -> break .

    PRINT           reduce using rule 11 (item -> break .)
    RETURN          reduce using rule 11 (item -> break .)
    NUMBER          reduce using rule 11 (item -> break .)
    FLOAT           reduce using rule 11 (item -> break .)
    STRING          reduce using rule 11 (item -> break .)
    TRUE            reduce using rule 11 (item -> break .)
    FALSE           reduce using rule 11 (item -> break .)
    VARIABLE        reduce using rule 11 (item -> break .)
    CONTINUE        reduce using rule 11 (item -> break .)
    BREAK           reduce using rule 11 (item -> break .)
    USE             reduce using rule 11 (item -> break .)
    LET             reduce using rule 11 (item -> break .)
    STRUCT          reduce using rule 11 (item -> break .)
    FOR             reduce using rule 11 (item -> break .)
    WHILE           reduce using rule 11 (item -> break .)
    IF              reduce using rule 11 (item -> break .)
    LOOP            reduce using rule 11 (item -> break .)
    ARRAY           reduce using rule 11 (item -> break .)
    BITAND          reduce using rule 11 (item -> break .)
    LPAREN          reduce using rule 11 (item -> break .)
    VEC             reduce using rule 11 (item -> break .)
    CONST           reduce using rule 11 (item -> break .)
    MUT             reduce using rule 11 (item -> break .)
    FN              reduce using rule 11 (item -> break .)
    TIMES           reduce using rule 11 (item -> break .)
    $end            reduce using rule 11 (item -> break .)
    RBRACKET        reduce using rule 11 (item -> break .)


state 11

    (12) item -> funcionesesdata .

    PRINT           reduce using rule 12 (item -> funcionesesdata .)
    RETURN          reduce using rule 12 (item -> funcionesesdata .)
    NUMBER          reduce using rule 12 (item -> funcionesesdata .)
    FLOAT           reduce using rule 12 (item -> funcionesesdata .)
    STRING          reduce using rule 12 (item -> funcionesesdata .)
    TRUE            reduce using rule 12 (item -> funcionesesdata .)
    FALSE           reduce using rule 12 (item -> funcionesesdata .)
    VARIABLE        reduce using rule 12 (item -> funcionesesdata .)
    CONTINUE        reduce using rule 12 (item -> funcionesesdata .)
    BREAK           reduce using rule 12 (item -> funcionesesdata .)
    USE             reduce using rule 12 (item -> funcionesesdata .)
    LET             reduce using rule 12 (item -> funcionesesdata .)
    STRUCT          reduce using rule 12 (item -> funcionesesdata .)
    FOR             reduce using rule 12 (item -> funcionesesdata .)
    WHILE           reduce using rule 12 (item -> funcionesesdata .)
    IF              reduce using rule 12 (item -> funcionesesdata .)
    LOOP            reduce using rule 12 (item -> funcionesesdata .)
    ARRAY           reduce using rule 12 (item -> funcionesesdata .)
    BITAND          reduce using rule 12 (item -> funcionesesdata .)
    LPAREN          reduce using rule 12 (item -> funcionesesdata .)
    VEC             reduce using rule 12 (item -> funcionesesdata .)
    CONST           reduce using rule 12 (item -> funcionesesdata .)
    MUT             reduce using rule 12 (item -> funcionesesdata .)
    FN              reduce using rule 12 (item -> funcionesesdata .)
    TIMES           reduce using rule 12 (item -> funcionesesdata .)
    $end            reduce using rule 12 (item -> funcionesesdata .)
    RBRACKET        reduce using rule 12 (item -> funcionesesdata .)


state 12

    (13) item -> RETURN . expresion SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 63
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 13

    (14) item -> import .

    PRINT           reduce using rule 14 (item -> import .)
    RETURN          reduce using rule 14 (item -> import .)
    NUMBER          reduce using rule 14 (item -> import .)
    FLOAT           reduce using rule 14 (item -> import .)
    STRING          reduce using rule 14 (item -> import .)
    TRUE            reduce using rule 14 (item -> import .)
    FALSE           reduce using rule 14 (item -> import .)
    VARIABLE        reduce using rule 14 (item -> import .)
    CONTINUE        reduce using rule 14 (item -> import .)
    BREAK           reduce using rule 14 (item -> import .)
    USE             reduce using rule 14 (item -> import .)
    LET             reduce using rule 14 (item -> import .)
    STRUCT          reduce using rule 14 (item -> import .)
    FOR             reduce using rule 14 (item -> import .)
    WHILE           reduce using rule 14 (item -> import .)
    IF              reduce using rule 14 (item -> import .)
    LOOP            reduce using rule 14 (item -> import .)
    ARRAY           reduce using rule 14 (item -> import .)
    BITAND          reduce using rule 14 (item -> import .)
    LPAREN          reduce using rule 14 (item -> import .)
    VEC             reduce using rule 14 (item -> import .)
    CONST           reduce using rule 14 (item -> import .)
    MUT             reduce using rule 14 (item -> import .)
    FN              reduce using rule 14 (item -> import .)
    TIMES           reduce using rule 14 (item -> import .)
    $end            reduce using rule 14 (item -> import .)
    RBRACKET        reduce using rule 14 (item -> import .)


state 14

    (15) item -> llamadarandom .

    PRINT           reduce using rule 15 (item -> llamadarandom .)
    RETURN          reduce using rule 15 (item -> llamadarandom .)
    NUMBER          reduce using rule 15 (item -> llamadarandom .)
    FLOAT           reduce using rule 15 (item -> llamadarandom .)
    STRING          reduce using rule 15 (item -> llamadarandom .)
    TRUE            reduce using rule 15 (item -> llamadarandom .)
    FALSE           reduce using rule 15 (item -> llamadarandom .)
    VARIABLE        reduce using rule 15 (item -> llamadarandom .)
    CONTINUE        reduce using rule 15 (item -> llamadarandom .)
    BREAK           reduce using rule 15 (item -> llamadarandom .)
    USE             reduce using rule 15 (item -> llamadarandom .)
    LET             reduce using rule 15 (item -> llamadarandom .)
    STRUCT          reduce using rule 15 (item -> llamadarandom .)
    FOR             reduce using rule 15 (item -> llamadarandom .)
    WHILE           reduce using rule 15 (item -> llamadarandom .)
    IF              reduce using rule 15 (item -> llamadarandom .)
    LOOP            reduce using rule 15 (item -> llamadarandom .)
    ARRAY           reduce using rule 15 (item -> llamadarandom .)
    BITAND          reduce using rule 15 (item -> llamadarandom .)
    LPAREN          reduce using rule 15 (item -> llamadarandom .)
    VEC             reduce using rule 15 (item -> llamadarandom .)
    CONST           reduce using rule 15 (item -> llamadarandom .)
    MUT             reduce using rule 15 (item -> llamadarandom .)
    FN              reduce using rule 15 (item -> llamadarandom .)
    TIMES           reduce using rule 15 (item -> llamadarandom .)
    $end            reduce using rule 15 (item -> llamadarandom .)
    RBRACKET        reduce using rule 15 (item -> llamadarandom .)


state 15

    (26) definicion -> definicionvariable .
    (90) expresion -> definicionvariable .

  ! reduce/reduce conflict for PRINT resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for RETURN resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for NUMBER resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for FLOAT resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for STRING resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for TRUE resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for FALSE resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for BREAK resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for USE resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for LET resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for STRUCT resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for FOR resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for WHILE resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for IF resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for LOOP resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for ARRAY resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for BITAND resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for LPAREN resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for VEC resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for CONST resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for MUT resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for FN resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for TIMES resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for $end resolved using rule 26 (definicion -> definicionvariable .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 26 (definicion -> definicionvariable .)
    PRINT           reduce using rule 26 (definicion -> definicionvariable .)
    RETURN          reduce using rule 26 (definicion -> definicionvariable .)
    NUMBER          reduce using rule 26 (definicion -> definicionvariable .)
    FLOAT           reduce using rule 26 (definicion -> definicionvariable .)
    STRING          reduce using rule 26 (definicion -> definicionvariable .)
    TRUE            reduce using rule 26 (definicion -> definicionvariable .)
    FALSE           reduce using rule 26 (definicion -> definicionvariable .)
    VARIABLE        reduce using rule 26 (definicion -> definicionvariable .)
    CONTINUE        reduce using rule 26 (definicion -> definicionvariable .)
    BREAK           reduce using rule 26 (definicion -> definicionvariable .)
    USE             reduce using rule 26 (definicion -> definicionvariable .)
    LET             reduce using rule 26 (definicion -> definicionvariable .)
    STRUCT          reduce using rule 26 (definicion -> definicionvariable .)
    FOR             reduce using rule 26 (definicion -> definicionvariable .)
    WHILE           reduce using rule 26 (definicion -> definicionvariable .)
    IF              reduce using rule 26 (definicion -> definicionvariable .)
    LOOP            reduce using rule 26 (definicion -> definicionvariable .)
    ARRAY           reduce using rule 26 (definicion -> definicionvariable .)
    BITAND          reduce using rule 26 (definicion -> definicionvariable .)
    LPAREN          reduce using rule 26 (definicion -> definicionvariable .)
    VEC             reduce using rule 26 (definicion -> definicionvariable .)
    CONST           reduce using rule 26 (definicion -> definicionvariable .)
    MUT             reduce using rule 26 (definicion -> definicionvariable .)
    FN              reduce using rule 26 (definicion -> definicionvariable .)
    TIMES           reduce using rule 26 (definicion -> definicionvariable .)
    $end            reduce using rule 26 (definicion -> definicionvariable .)
    RBRACKET        reduce using rule 26 (definicion -> definicionvariable .)
    SEMICOLON       reduce using rule 90 (expresion -> definicionvariable .)

  ! PRINT           [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! RETURN          [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! NUMBER          [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! FLOAT           [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! STRING          [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! TRUE            [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! FALSE           [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! VARIABLE        [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! CONTINUE        [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! BREAK           [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! USE             [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! LET             [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! STRUCT          [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! FOR             [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! WHILE           [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! IF              [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! LOOP            [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! ARRAY           [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! BITAND          [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! LPAREN          [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! VEC             [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! CONST           [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! MUT             [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! FN              [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! TIMES           [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! $end            [ reduce using rule 90 (expresion -> definicionvariable .) ]
  ! RBRACKET        [ reduce using rule 90 (expresion -> definicionvariable .) ]


state 16

    (27) definicion -> definicionestructura .

    PRINT           reduce using rule 27 (definicion -> definicionestructura .)
    RETURN          reduce using rule 27 (definicion -> definicionestructura .)
    NUMBER          reduce using rule 27 (definicion -> definicionestructura .)
    FLOAT           reduce using rule 27 (definicion -> definicionestructura .)
    STRING          reduce using rule 27 (definicion -> definicionestructura .)
    TRUE            reduce using rule 27 (definicion -> definicionestructura .)
    FALSE           reduce using rule 27 (definicion -> definicionestructura .)
    VARIABLE        reduce using rule 27 (definicion -> definicionestructura .)
    CONTINUE        reduce using rule 27 (definicion -> definicionestructura .)
    BREAK           reduce using rule 27 (definicion -> definicionestructura .)
    USE             reduce using rule 27 (definicion -> definicionestructura .)
    LET             reduce using rule 27 (definicion -> definicionestructura .)
    STRUCT          reduce using rule 27 (definicion -> definicionestructura .)
    FOR             reduce using rule 27 (definicion -> definicionestructura .)
    WHILE           reduce using rule 27 (definicion -> definicionestructura .)
    IF              reduce using rule 27 (definicion -> definicionestructura .)
    LOOP            reduce using rule 27 (definicion -> definicionestructura .)
    ARRAY           reduce using rule 27 (definicion -> definicionestructura .)
    BITAND          reduce using rule 27 (definicion -> definicionestructura .)
    LPAREN          reduce using rule 27 (definicion -> definicionestructura .)
    VEC             reduce using rule 27 (definicion -> definicionestructura .)
    CONST           reduce using rule 27 (definicion -> definicionestructura .)
    MUT             reduce using rule 27 (definicion -> definicionestructura .)
    FN              reduce using rule 27 (definicion -> definicionestructura .)
    TIMES           reduce using rule 27 (definicion -> definicionestructura .)
    $end            reduce using rule 27 (definicion -> definicionestructura .)
    RBRACKET        reduce using rule 27 (definicion -> definicionestructura .)


state 17

    (28) definicion -> definicionfuncion .

    PRINT           reduce using rule 28 (definicion -> definicionfuncion .)
    RETURN          reduce using rule 28 (definicion -> definicionfuncion .)
    NUMBER          reduce using rule 28 (definicion -> definicionfuncion .)
    FLOAT           reduce using rule 28 (definicion -> definicionfuncion .)
    STRING          reduce using rule 28 (definicion -> definicionfuncion .)
    TRUE            reduce using rule 28 (definicion -> definicionfuncion .)
    FALSE           reduce using rule 28 (definicion -> definicionfuncion .)
    VARIABLE        reduce using rule 28 (definicion -> definicionfuncion .)
    CONTINUE        reduce using rule 28 (definicion -> definicionfuncion .)
    BREAK           reduce using rule 28 (definicion -> definicionfuncion .)
    USE             reduce using rule 28 (definicion -> definicionfuncion .)
    LET             reduce using rule 28 (definicion -> definicionfuncion .)
    STRUCT          reduce using rule 28 (definicion -> definicionfuncion .)
    FOR             reduce using rule 28 (definicion -> definicionfuncion .)
    WHILE           reduce using rule 28 (definicion -> definicionfuncion .)
    IF              reduce using rule 28 (definicion -> definicionfuncion .)
    LOOP            reduce using rule 28 (definicion -> definicionfuncion .)
    ARRAY           reduce using rule 28 (definicion -> definicionfuncion .)
    BITAND          reduce using rule 28 (definicion -> definicionfuncion .)
    LPAREN          reduce using rule 28 (definicion -> definicionfuncion .)
    VEC             reduce using rule 28 (definicion -> definicionfuncion .)
    CONST           reduce using rule 28 (definicion -> definicionfuncion .)
    MUT             reduce using rule 28 (definicion -> definicionfuncion .)
    FN              reduce using rule 28 (definicion -> definicionfuncion .)
    TIMES           reduce using rule 28 (definicion -> definicionfuncion .)
    $end            reduce using rule 28 (definicion -> definicionfuncion .)
    RBRACKET        reduce using rule 28 (definicion -> definicionfuncion .)


state 18

    (29) definicion -> definicionestructuradatos .

    PRINT           reduce using rule 29 (definicion -> definicionestructuradatos .)
    RETURN          reduce using rule 29 (definicion -> definicionestructuradatos .)
    NUMBER          reduce using rule 29 (definicion -> definicionestructuradatos .)
    FLOAT           reduce using rule 29 (definicion -> definicionestructuradatos .)
    STRING          reduce using rule 29 (definicion -> definicionestructuradatos .)
    TRUE            reduce using rule 29 (definicion -> definicionestructuradatos .)
    FALSE           reduce using rule 29 (definicion -> definicionestructuradatos .)
    VARIABLE        reduce using rule 29 (definicion -> definicionestructuradatos .)
    CONTINUE        reduce using rule 29 (definicion -> definicionestructuradatos .)
    BREAK           reduce using rule 29 (definicion -> definicionestructuradatos .)
    USE             reduce using rule 29 (definicion -> definicionestructuradatos .)
    LET             reduce using rule 29 (definicion -> definicionestructuradatos .)
    STRUCT          reduce using rule 29 (definicion -> definicionestructuradatos .)
    FOR             reduce using rule 29 (definicion -> definicionestructuradatos .)
    WHILE           reduce using rule 29 (definicion -> definicionestructuradatos .)
    IF              reduce using rule 29 (definicion -> definicionestructuradatos .)
    LOOP            reduce using rule 29 (definicion -> definicionestructuradatos .)
    ARRAY           reduce using rule 29 (definicion -> definicionestructuradatos .)
    BITAND          reduce using rule 29 (definicion -> definicionestructuradatos .)
    LPAREN          reduce using rule 29 (definicion -> definicionestructuradatos .)
    VEC             reduce using rule 29 (definicion -> definicionestructuradatos .)
    CONST           reduce using rule 29 (definicion -> definicionestructuradatos .)
    MUT             reduce using rule 29 (definicion -> definicionestructuradatos .)
    FN              reduce using rule 29 (definicion -> definicionestructuradatos .)
    TIMES           reduce using rule 29 (definicion -> definicionestructuradatos .)
    $end            reduce using rule 29 (definicion -> definicionestructuradatos .)
    RBRACKET        reduce using rule 29 (definicion -> definicionestructuradatos .)


state 19

    (16) estructuracontrol -> for .

    PRINT           reduce using rule 16 (estructuracontrol -> for .)
    RETURN          reduce using rule 16 (estructuracontrol -> for .)
    NUMBER          reduce using rule 16 (estructuracontrol -> for .)
    FLOAT           reduce using rule 16 (estructuracontrol -> for .)
    STRING          reduce using rule 16 (estructuracontrol -> for .)
    TRUE            reduce using rule 16 (estructuracontrol -> for .)
    FALSE           reduce using rule 16 (estructuracontrol -> for .)
    VARIABLE        reduce using rule 16 (estructuracontrol -> for .)
    CONTINUE        reduce using rule 16 (estructuracontrol -> for .)
    BREAK           reduce using rule 16 (estructuracontrol -> for .)
    USE             reduce using rule 16 (estructuracontrol -> for .)
    LET             reduce using rule 16 (estructuracontrol -> for .)
    STRUCT          reduce using rule 16 (estructuracontrol -> for .)
    FOR             reduce using rule 16 (estructuracontrol -> for .)
    WHILE           reduce using rule 16 (estructuracontrol -> for .)
    IF              reduce using rule 16 (estructuracontrol -> for .)
    LOOP            reduce using rule 16 (estructuracontrol -> for .)
    ARRAY           reduce using rule 16 (estructuracontrol -> for .)
    BITAND          reduce using rule 16 (estructuracontrol -> for .)
    LPAREN          reduce using rule 16 (estructuracontrol -> for .)
    VEC             reduce using rule 16 (estructuracontrol -> for .)
    CONST           reduce using rule 16 (estructuracontrol -> for .)
    MUT             reduce using rule 16 (estructuracontrol -> for .)
    FN              reduce using rule 16 (estructuracontrol -> for .)
    TIMES           reduce using rule 16 (estructuracontrol -> for .)
    $end            reduce using rule 16 (estructuracontrol -> for .)
    SEMICOLON       reduce using rule 16 (estructuracontrol -> for .)
    LBRACKET        reduce using rule 16 (estructuracontrol -> for .)
    RPAREN          reduce using rule 16 (estructuracontrol -> for .)
    COMMA           reduce using rule 16 (estructuracontrol -> for .)
    RBRACKET        reduce using rule 16 (estructuracontrol -> for .)


state 20

    (17) estructuracontrol -> while .

    PRINT           reduce using rule 17 (estructuracontrol -> while .)
    RETURN          reduce using rule 17 (estructuracontrol -> while .)
    NUMBER          reduce using rule 17 (estructuracontrol -> while .)
    FLOAT           reduce using rule 17 (estructuracontrol -> while .)
    STRING          reduce using rule 17 (estructuracontrol -> while .)
    TRUE            reduce using rule 17 (estructuracontrol -> while .)
    FALSE           reduce using rule 17 (estructuracontrol -> while .)
    VARIABLE        reduce using rule 17 (estructuracontrol -> while .)
    CONTINUE        reduce using rule 17 (estructuracontrol -> while .)
    BREAK           reduce using rule 17 (estructuracontrol -> while .)
    USE             reduce using rule 17 (estructuracontrol -> while .)
    LET             reduce using rule 17 (estructuracontrol -> while .)
    STRUCT          reduce using rule 17 (estructuracontrol -> while .)
    FOR             reduce using rule 17 (estructuracontrol -> while .)
    WHILE           reduce using rule 17 (estructuracontrol -> while .)
    IF              reduce using rule 17 (estructuracontrol -> while .)
    LOOP            reduce using rule 17 (estructuracontrol -> while .)
    ARRAY           reduce using rule 17 (estructuracontrol -> while .)
    BITAND          reduce using rule 17 (estructuracontrol -> while .)
    LPAREN          reduce using rule 17 (estructuracontrol -> while .)
    VEC             reduce using rule 17 (estructuracontrol -> while .)
    CONST           reduce using rule 17 (estructuracontrol -> while .)
    MUT             reduce using rule 17 (estructuracontrol -> while .)
    FN              reduce using rule 17 (estructuracontrol -> while .)
    TIMES           reduce using rule 17 (estructuracontrol -> while .)
    $end            reduce using rule 17 (estructuracontrol -> while .)
    SEMICOLON       reduce using rule 17 (estructuracontrol -> while .)
    LBRACKET        reduce using rule 17 (estructuracontrol -> while .)
    RPAREN          reduce using rule 17 (estructuracontrol -> while .)
    COMMA           reduce using rule 17 (estructuracontrol -> while .)
    RBRACKET        reduce using rule 17 (estructuracontrol -> while .)


state 21

    (18) estructuracontrol -> if .

    PRINT           reduce using rule 18 (estructuracontrol -> if .)
    RETURN          reduce using rule 18 (estructuracontrol -> if .)
    NUMBER          reduce using rule 18 (estructuracontrol -> if .)
    FLOAT           reduce using rule 18 (estructuracontrol -> if .)
    STRING          reduce using rule 18 (estructuracontrol -> if .)
    TRUE            reduce using rule 18 (estructuracontrol -> if .)
    FALSE           reduce using rule 18 (estructuracontrol -> if .)
    VARIABLE        reduce using rule 18 (estructuracontrol -> if .)
    CONTINUE        reduce using rule 18 (estructuracontrol -> if .)
    BREAK           reduce using rule 18 (estructuracontrol -> if .)
    USE             reduce using rule 18 (estructuracontrol -> if .)
    LET             reduce using rule 18 (estructuracontrol -> if .)
    STRUCT          reduce using rule 18 (estructuracontrol -> if .)
    FOR             reduce using rule 18 (estructuracontrol -> if .)
    WHILE           reduce using rule 18 (estructuracontrol -> if .)
    IF              reduce using rule 18 (estructuracontrol -> if .)
    LOOP            reduce using rule 18 (estructuracontrol -> if .)
    ARRAY           reduce using rule 18 (estructuracontrol -> if .)
    BITAND          reduce using rule 18 (estructuracontrol -> if .)
    LPAREN          reduce using rule 18 (estructuracontrol -> if .)
    VEC             reduce using rule 18 (estructuracontrol -> if .)
    CONST           reduce using rule 18 (estructuracontrol -> if .)
    MUT             reduce using rule 18 (estructuracontrol -> if .)
    FN              reduce using rule 18 (estructuracontrol -> if .)
    TIMES           reduce using rule 18 (estructuracontrol -> if .)
    $end            reduce using rule 18 (estructuracontrol -> if .)
    SEMICOLON       reduce using rule 18 (estructuracontrol -> if .)
    LBRACKET        reduce using rule 18 (estructuracontrol -> if .)
    RPAREN          reduce using rule 18 (estructuracontrol -> if .)
    COMMA           reduce using rule 18 (estructuracontrol -> if .)
    RBRACKET        reduce using rule 18 (estructuracontrol -> if .)


state 22

    (19) estructuracontrol -> loop .

    PRINT           reduce using rule 19 (estructuracontrol -> loop .)
    RETURN          reduce using rule 19 (estructuracontrol -> loop .)
    NUMBER          reduce using rule 19 (estructuracontrol -> loop .)
    FLOAT           reduce using rule 19 (estructuracontrol -> loop .)
    STRING          reduce using rule 19 (estructuracontrol -> loop .)
    TRUE            reduce using rule 19 (estructuracontrol -> loop .)
    FALSE           reduce using rule 19 (estructuracontrol -> loop .)
    VARIABLE        reduce using rule 19 (estructuracontrol -> loop .)
    CONTINUE        reduce using rule 19 (estructuracontrol -> loop .)
    BREAK           reduce using rule 19 (estructuracontrol -> loop .)
    USE             reduce using rule 19 (estructuracontrol -> loop .)
    LET             reduce using rule 19 (estructuracontrol -> loop .)
    STRUCT          reduce using rule 19 (estructuracontrol -> loop .)
    FOR             reduce using rule 19 (estructuracontrol -> loop .)
    WHILE           reduce using rule 19 (estructuracontrol -> loop .)
    IF              reduce using rule 19 (estructuracontrol -> loop .)
    LOOP            reduce using rule 19 (estructuracontrol -> loop .)
    ARRAY           reduce using rule 19 (estructuracontrol -> loop .)
    BITAND          reduce using rule 19 (estructuracontrol -> loop .)
    LPAREN          reduce using rule 19 (estructuracontrol -> loop .)
    VEC             reduce using rule 19 (estructuracontrol -> loop .)
    CONST           reduce using rule 19 (estructuracontrol -> loop .)
    MUT             reduce using rule 19 (estructuracontrol -> loop .)
    FN              reduce using rule 19 (estructuracontrol -> loop .)
    TIMES           reduce using rule 19 (estructuracontrol -> loop .)
    $end            reduce using rule 19 (estructuracontrol -> loop .)
    SEMICOLON       reduce using rule 19 (estructuracontrol -> loop .)
    LBRACKET        reduce using rule 19 (estructuracontrol -> loop .)
    RPAREN          reduce using rule 19 (estructuracontrol -> loop .)
    COMMA           reduce using rule 19 (estructuracontrol -> loop .)
    RBRACKET        reduce using rule 19 (estructuracontrol -> loop .)


state 23

    (80) expresion -> ops .

    SEMICOLON       reduce using rule 80 (expresion -> ops .)
    PRINT           reduce using rule 80 (expresion -> ops .)
    RETURN          reduce using rule 80 (expresion -> ops .)
    NUMBER          reduce using rule 80 (expresion -> ops .)
    FLOAT           reduce using rule 80 (expresion -> ops .)
    STRING          reduce using rule 80 (expresion -> ops .)
    TRUE            reduce using rule 80 (expresion -> ops .)
    FALSE           reduce using rule 80 (expresion -> ops .)
    VARIABLE        reduce using rule 80 (expresion -> ops .)
    CONTINUE        reduce using rule 80 (expresion -> ops .)
    BREAK           reduce using rule 80 (expresion -> ops .)
    USE             reduce using rule 80 (expresion -> ops .)
    LET             reduce using rule 80 (expresion -> ops .)
    STRUCT          reduce using rule 80 (expresion -> ops .)
    FOR             reduce using rule 80 (expresion -> ops .)
    WHILE           reduce using rule 80 (expresion -> ops .)
    IF              reduce using rule 80 (expresion -> ops .)
    LOOP            reduce using rule 80 (expresion -> ops .)
    ARRAY           reduce using rule 80 (expresion -> ops .)
    BITAND          reduce using rule 80 (expresion -> ops .)
    LPAREN          reduce using rule 80 (expresion -> ops .)
    VEC             reduce using rule 80 (expresion -> ops .)
    CONST           reduce using rule 80 (expresion -> ops .)
    MUT             reduce using rule 80 (expresion -> ops .)
    FN              reduce using rule 80 (expresion -> ops .)
    TIMES           reduce using rule 80 (expresion -> ops .)
    $end            reduce using rule 80 (expresion -> ops .)
    LBRACKET        reduce using rule 80 (expresion -> ops .)
    RPAREN          reduce using rule 80 (expresion -> ops .)
    COMMA           reduce using rule 80 (expresion -> ops .)
    RBRACKET        reduce using rule 80 (expresion -> ops .)


state 24

    (81) expresion -> NUMBER .
    (108) operandos -> NUMBER .

  ! reduce/reduce conflict for COMMA resolved using rule 81 (expresion -> NUMBER .)
  ! reduce/reduce conflict for TIMES resolved using rule 81 (expresion -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (expresion -> NUMBER .)
    SEMICOLON       reduce using rule 81 (expresion -> NUMBER .)
    PRINT           reduce using rule 81 (expresion -> NUMBER .)
    RETURN          reduce using rule 81 (expresion -> NUMBER .)
    NUMBER          reduce using rule 81 (expresion -> NUMBER .)
    FLOAT           reduce using rule 81 (expresion -> NUMBER .)
    STRING          reduce using rule 81 (expresion -> NUMBER .)
    TRUE            reduce using rule 81 (expresion -> NUMBER .)
    FALSE           reduce using rule 81 (expresion -> NUMBER .)
    VARIABLE        reduce using rule 81 (expresion -> NUMBER .)
    CONTINUE        reduce using rule 81 (expresion -> NUMBER .)
    BREAK           reduce using rule 81 (expresion -> NUMBER .)
    USE             reduce using rule 81 (expresion -> NUMBER .)
    LET             reduce using rule 81 (expresion -> NUMBER .)
    STRUCT          reduce using rule 81 (expresion -> NUMBER .)
    FOR             reduce using rule 81 (expresion -> NUMBER .)
    WHILE           reduce using rule 81 (expresion -> NUMBER .)
    IF              reduce using rule 81 (expresion -> NUMBER .)
    LOOP            reduce using rule 81 (expresion -> NUMBER .)
    ARRAY           reduce using rule 81 (expresion -> NUMBER .)
    BITAND          reduce using rule 81 (expresion -> NUMBER .)
    LPAREN          reduce using rule 81 (expresion -> NUMBER .)
    VEC             reduce using rule 81 (expresion -> NUMBER .)
    CONST           reduce using rule 81 (expresion -> NUMBER .)
    MUT             reduce using rule 81 (expresion -> NUMBER .)
    FN              reduce using rule 81 (expresion -> NUMBER .)
    TIMES           reduce using rule 81 (expresion -> NUMBER .)
    $end            reduce using rule 81 (expresion -> NUMBER .)
    LBRACKET        reduce using rule 81 (expresion -> NUMBER .)
    RPAREN          reduce using rule 81 (expresion -> NUMBER .)
    COMMA           reduce using rule 81 (expresion -> NUMBER .)
    RBRACKET        reduce using rule 81 (expresion -> NUMBER .)
    PLUS            reduce using rule 108 (operandos -> NUMBER .)
    MINUS           reduce using rule 108 (operandos -> NUMBER .)
    DIVIDE          reduce using rule 108 (operandos -> NUMBER .)
    RDIAMOND        reduce using rule 108 (operandos -> NUMBER .)
    LDIAMOND        reduce using rule 108 (operandos -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> NUMBER .)
    NOT_EQUAL       reduce using rule 108 (operandos -> NUMBER .)
    LESS_EQUAL      reduce using rule 108 (operandos -> NUMBER .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> NUMBER .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> NUMBER .)

  ! COMMA           [ reduce using rule 108 (operandos -> NUMBER .) ]
  ! TIMES           [ reduce using rule 108 (operandos -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 108 (operandos -> NUMBER .) ]


state 25

    (82) expresion -> FLOAT .
    (109) operandos -> FLOAT .

  ! reduce/reduce conflict for COMMA resolved using rule 82 (expresion -> FLOAT .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (expresion -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (expresion -> FLOAT .)
    SEMICOLON       reduce using rule 82 (expresion -> FLOAT .)
    PRINT           reduce using rule 82 (expresion -> FLOAT .)
    RETURN          reduce using rule 82 (expresion -> FLOAT .)
    NUMBER          reduce using rule 82 (expresion -> FLOAT .)
    FLOAT           reduce using rule 82 (expresion -> FLOAT .)
    STRING          reduce using rule 82 (expresion -> FLOAT .)
    TRUE            reduce using rule 82 (expresion -> FLOAT .)
    FALSE           reduce using rule 82 (expresion -> FLOAT .)
    VARIABLE        reduce using rule 82 (expresion -> FLOAT .)
    CONTINUE        reduce using rule 82 (expresion -> FLOAT .)
    BREAK           reduce using rule 82 (expresion -> FLOAT .)
    USE             reduce using rule 82 (expresion -> FLOAT .)
    LET             reduce using rule 82 (expresion -> FLOAT .)
    STRUCT          reduce using rule 82 (expresion -> FLOAT .)
    FOR             reduce using rule 82 (expresion -> FLOAT .)
    WHILE           reduce using rule 82 (expresion -> FLOAT .)
    IF              reduce using rule 82 (expresion -> FLOAT .)
    LOOP            reduce using rule 82 (expresion -> FLOAT .)
    ARRAY           reduce using rule 82 (expresion -> FLOAT .)
    BITAND          reduce using rule 82 (expresion -> FLOAT .)
    LPAREN          reduce using rule 82 (expresion -> FLOAT .)
    VEC             reduce using rule 82 (expresion -> FLOAT .)
    CONST           reduce using rule 82 (expresion -> FLOAT .)
    MUT             reduce using rule 82 (expresion -> FLOAT .)
    FN              reduce using rule 82 (expresion -> FLOAT .)
    TIMES           reduce using rule 82 (expresion -> FLOAT .)
    $end            reduce using rule 82 (expresion -> FLOAT .)
    LBRACKET        reduce using rule 82 (expresion -> FLOAT .)
    RPAREN          reduce using rule 82 (expresion -> FLOAT .)
    COMMA           reduce using rule 82 (expresion -> FLOAT .)
    RBRACKET        reduce using rule 82 (expresion -> FLOAT .)
    PLUS            reduce using rule 109 (operandos -> FLOAT .)
    MINUS           reduce using rule 109 (operandos -> FLOAT .)
    DIVIDE          reduce using rule 109 (operandos -> FLOAT .)
    RDIAMOND        reduce using rule 109 (operandos -> FLOAT .)
    LDIAMOND        reduce using rule 109 (operandos -> FLOAT .)
    EQUAL_EQUAL     reduce using rule 109 (operandos -> FLOAT .)
    NOT_EQUAL       reduce using rule 109 (operandos -> FLOAT .)
    LESS_EQUAL      reduce using rule 109 (operandos -> FLOAT .)
    GREATER_EQUAL   reduce using rule 109 (operandos -> FLOAT .)
    PLUS_EQUAL      reduce using rule 109 (operandos -> FLOAT .)

  ! COMMA           [ reduce using rule 109 (operandos -> FLOAT .) ]
  ! TIMES           [ reduce using rule 109 (operandos -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 109 (operandos -> FLOAT .) ]


state 26

    (84) expresion -> TRUE .

    SEMICOLON       reduce using rule 84 (expresion -> TRUE .)
    PRINT           reduce using rule 84 (expresion -> TRUE .)
    RETURN          reduce using rule 84 (expresion -> TRUE .)
    NUMBER          reduce using rule 84 (expresion -> TRUE .)
    FLOAT           reduce using rule 84 (expresion -> TRUE .)
    STRING          reduce using rule 84 (expresion -> TRUE .)
    TRUE            reduce using rule 84 (expresion -> TRUE .)
    FALSE           reduce using rule 84 (expresion -> TRUE .)
    VARIABLE        reduce using rule 84 (expresion -> TRUE .)
    CONTINUE        reduce using rule 84 (expresion -> TRUE .)
    BREAK           reduce using rule 84 (expresion -> TRUE .)
    USE             reduce using rule 84 (expresion -> TRUE .)
    LET             reduce using rule 84 (expresion -> TRUE .)
    STRUCT          reduce using rule 84 (expresion -> TRUE .)
    FOR             reduce using rule 84 (expresion -> TRUE .)
    WHILE           reduce using rule 84 (expresion -> TRUE .)
    IF              reduce using rule 84 (expresion -> TRUE .)
    LOOP            reduce using rule 84 (expresion -> TRUE .)
    ARRAY           reduce using rule 84 (expresion -> TRUE .)
    BITAND          reduce using rule 84 (expresion -> TRUE .)
    LPAREN          reduce using rule 84 (expresion -> TRUE .)
    VEC             reduce using rule 84 (expresion -> TRUE .)
    CONST           reduce using rule 84 (expresion -> TRUE .)
    MUT             reduce using rule 84 (expresion -> TRUE .)
    FN              reduce using rule 84 (expresion -> TRUE .)
    TIMES           reduce using rule 84 (expresion -> TRUE .)
    $end            reduce using rule 84 (expresion -> TRUE .)
    LBRACKET        reduce using rule 84 (expresion -> TRUE .)
    RPAREN          reduce using rule 84 (expresion -> TRUE .)
    COMMA           reduce using rule 84 (expresion -> TRUE .)
    RBRACKET        reduce using rule 84 (expresion -> TRUE .)


state 27

    (85) expresion -> FALSE .

    SEMICOLON       reduce using rule 85 (expresion -> FALSE .)
    PRINT           reduce using rule 85 (expresion -> FALSE .)
    RETURN          reduce using rule 85 (expresion -> FALSE .)
    NUMBER          reduce using rule 85 (expresion -> FALSE .)
    FLOAT           reduce using rule 85 (expresion -> FALSE .)
    STRING          reduce using rule 85 (expresion -> FALSE .)
    TRUE            reduce using rule 85 (expresion -> FALSE .)
    FALSE           reduce using rule 85 (expresion -> FALSE .)
    VARIABLE        reduce using rule 85 (expresion -> FALSE .)
    CONTINUE        reduce using rule 85 (expresion -> FALSE .)
    BREAK           reduce using rule 85 (expresion -> FALSE .)
    USE             reduce using rule 85 (expresion -> FALSE .)
    LET             reduce using rule 85 (expresion -> FALSE .)
    STRUCT          reduce using rule 85 (expresion -> FALSE .)
    FOR             reduce using rule 85 (expresion -> FALSE .)
    WHILE           reduce using rule 85 (expresion -> FALSE .)
    IF              reduce using rule 85 (expresion -> FALSE .)
    LOOP            reduce using rule 85 (expresion -> FALSE .)
    ARRAY           reduce using rule 85 (expresion -> FALSE .)
    BITAND          reduce using rule 85 (expresion -> FALSE .)
    LPAREN          reduce using rule 85 (expresion -> FALSE .)
    VEC             reduce using rule 85 (expresion -> FALSE .)
    CONST           reduce using rule 85 (expresion -> FALSE .)
    MUT             reduce using rule 85 (expresion -> FALSE .)
    FN              reduce using rule 85 (expresion -> FALSE .)
    TIMES           reduce using rule 85 (expresion -> FALSE .)
    $end            reduce using rule 85 (expresion -> FALSE .)
    LBRACKET        reduce using rule 85 (expresion -> FALSE .)
    RPAREN          reduce using rule 85 (expresion -> FALSE .)
    COMMA           reduce using rule 85 (expresion -> FALSE .)
    RBRACKET        reduce using rule 85 (expresion -> FALSE .)


state 28

    (86) expresion -> VARIABLE .
    (130) llamadarandom -> VARIABLE . DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (56) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (57) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (172) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (176) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (178) opbasicas -> VARIABLE . DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN
    (159) funcionesvector -> VARIABLE . DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> VARIABLE . DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> VARIABLE . DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> VARIABLE . DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> VARIABLE . DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> VARIABLE . DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> VARIABLE . DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> VARIABLE . DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> VARIABLE . DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> VARIABLE . DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> VARIABLE . DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> VARIABLE . DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> VARIABLE . DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> VARIABLE . DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> VARIABLE . DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> VARIABLE . DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> VARIABLE . DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> VARIABLE . DOT ITER LPAREN RPAREN
    (125) funcionesarray -> VARIABLE . DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> VARIABLE . DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> VARIABLE . DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> VARIABLE . DOT ITER LPAREN RPAREN SEMICOLON
    (110) operandos -> VARIABLE .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 86 (expresion -> VARIABLE .)
    SEMICOLON       reduce using rule 86 (expresion -> VARIABLE .)
    PRINT           reduce using rule 86 (expresion -> VARIABLE .)
    RETURN          reduce using rule 86 (expresion -> VARIABLE .)
    NUMBER          reduce using rule 86 (expresion -> VARIABLE .)
    FLOAT           reduce using rule 86 (expresion -> VARIABLE .)
    STRING          reduce using rule 86 (expresion -> VARIABLE .)
    TRUE            reduce using rule 86 (expresion -> VARIABLE .)
    FALSE           reduce using rule 86 (expresion -> VARIABLE .)
    VARIABLE        reduce using rule 86 (expresion -> VARIABLE .)
    CONTINUE        reduce using rule 86 (expresion -> VARIABLE .)
    BREAK           reduce using rule 86 (expresion -> VARIABLE .)
    USE             reduce using rule 86 (expresion -> VARIABLE .)
    LET             reduce using rule 86 (expresion -> VARIABLE .)
    STRUCT          reduce using rule 86 (expresion -> VARIABLE .)
    FOR             reduce using rule 86 (expresion -> VARIABLE .)
    WHILE           reduce using rule 86 (expresion -> VARIABLE .)
    IF              reduce using rule 86 (expresion -> VARIABLE .)
    LOOP            reduce using rule 86 (expresion -> VARIABLE .)
    ARRAY           reduce using rule 86 (expresion -> VARIABLE .)
    BITAND          reduce using rule 86 (expresion -> VARIABLE .)
    VEC             reduce using rule 86 (expresion -> VARIABLE .)
    CONST           reduce using rule 86 (expresion -> VARIABLE .)
    MUT             reduce using rule 86 (expresion -> VARIABLE .)
    FN              reduce using rule 86 (expresion -> VARIABLE .)
    TIMES           reduce using rule 86 (expresion -> VARIABLE .)
    $end            reduce using rule 86 (expresion -> VARIABLE .)
    RBRACKET        reduce using rule 86 (expresion -> VARIABLE .)
    DOUBLE_POINT    shift and go to state 68
    EQUAL           shift and go to state 70
    DOT             shift and go to state 71
    LPAREN          shift and go to state 69
    COMMA           reduce using rule 110 (operandos -> VARIABLE .)
    PLUS            reduce using rule 110 (operandos -> VARIABLE .)
    MINUS           reduce using rule 110 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 110 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 110 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 110 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 110 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)

  ! LPAREN          [ reduce using rule 86 (expresion -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 110 (operandos -> VARIABLE .) ]


state 29

    (88) expresion -> opbasicas .
    (112) operandos -> opbasicas .

  ! reduce/reduce conflict for COMMA resolved using rule 88 (expresion -> opbasicas .)
  ! reduce/reduce conflict for TIMES resolved using rule 88 (expresion -> opbasicas .)
  ! reduce/reduce conflict for RPAREN resolved using rule 88 (expresion -> opbasicas .)
    SEMICOLON       reduce using rule 88 (expresion -> opbasicas .)
    PRINT           reduce using rule 88 (expresion -> opbasicas .)
    RETURN          reduce using rule 88 (expresion -> opbasicas .)
    NUMBER          reduce using rule 88 (expresion -> opbasicas .)
    FLOAT           reduce using rule 88 (expresion -> opbasicas .)
    STRING          reduce using rule 88 (expresion -> opbasicas .)
    TRUE            reduce using rule 88 (expresion -> opbasicas .)
    FALSE           reduce using rule 88 (expresion -> opbasicas .)
    VARIABLE        reduce using rule 88 (expresion -> opbasicas .)
    CONTINUE        reduce using rule 88 (expresion -> opbasicas .)
    BREAK           reduce using rule 88 (expresion -> opbasicas .)
    USE             reduce using rule 88 (expresion -> opbasicas .)
    LET             reduce using rule 88 (expresion -> opbasicas .)
    STRUCT          reduce using rule 88 (expresion -> opbasicas .)
    FOR             reduce using rule 88 (expresion -> opbasicas .)
    WHILE           reduce using rule 88 (expresion -> opbasicas .)
    IF              reduce using rule 88 (expresion -> opbasicas .)
    LOOP            reduce using rule 88 (expresion -> opbasicas .)
    ARRAY           reduce using rule 88 (expresion -> opbasicas .)
    BITAND          reduce using rule 88 (expresion -> opbasicas .)
    LPAREN          reduce using rule 88 (expresion -> opbasicas .)
    VEC             reduce using rule 88 (expresion -> opbasicas .)
    CONST           reduce using rule 88 (expresion -> opbasicas .)
    MUT             reduce using rule 88 (expresion -> opbasicas .)
    FN              reduce using rule 88 (expresion -> opbasicas .)
    TIMES           reduce using rule 88 (expresion -> opbasicas .)
    $end            reduce using rule 88 (expresion -> opbasicas .)
    LBRACKET        reduce using rule 88 (expresion -> opbasicas .)
    RPAREN          reduce using rule 88 (expresion -> opbasicas .)
    COMMA           reduce using rule 88 (expresion -> opbasicas .)
    RBRACKET        reduce using rule 88 (expresion -> opbasicas .)
    PLUS            reduce using rule 112 (operandos -> opbasicas .)
    MINUS           reduce using rule 112 (operandos -> opbasicas .)
    DIVIDE          reduce using rule 112 (operandos -> opbasicas .)
    RDIAMOND        reduce using rule 112 (operandos -> opbasicas .)
    LDIAMOND        reduce using rule 112 (operandos -> opbasicas .)
    EQUAL_EQUAL     reduce using rule 112 (operandos -> opbasicas .)
    NOT_EQUAL       reduce using rule 112 (operandos -> opbasicas .)
    LESS_EQUAL      reduce using rule 112 (operandos -> opbasicas .)
    GREATER_EQUAL   reduce using rule 112 (operandos -> opbasicas .)
    PLUS_EQUAL      reduce using rule 112 (operandos -> opbasicas .)

  ! COMMA           [ reduce using rule 112 (operandos -> opbasicas .) ]
  ! TIMES           [ reduce using rule 112 (operandos -> opbasicas .) ]
  ! RPAREN          [ reduce using rule 112 (operandos -> opbasicas .) ]


state 30

    (91) expresion -> llamarfuncion .

    SEMICOLON       reduce using rule 91 (expresion -> llamarfuncion .)
    PRINT           reduce using rule 91 (expresion -> llamarfuncion .)
    RETURN          reduce using rule 91 (expresion -> llamarfuncion .)
    NUMBER          reduce using rule 91 (expresion -> llamarfuncion .)
    FLOAT           reduce using rule 91 (expresion -> llamarfuncion .)
    STRING          reduce using rule 91 (expresion -> llamarfuncion .)
    TRUE            reduce using rule 91 (expresion -> llamarfuncion .)
    FALSE           reduce using rule 91 (expresion -> llamarfuncion .)
    VARIABLE        reduce using rule 91 (expresion -> llamarfuncion .)
    CONTINUE        reduce using rule 91 (expresion -> llamarfuncion .)
    BREAK           reduce using rule 91 (expresion -> llamarfuncion .)
    USE             reduce using rule 91 (expresion -> llamarfuncion .)
    LET             reduce using rule 91 (expresion -> llamarfuncion .)
    STRUCT          reduce using rule 91 (expresion -> llamarfuncion .)
    FOR             reduce using rule 91 (expresion -> llamarfuncion .)
    WHILE           reduce using rule 91 (expresion -> llamarfuncion .)
    IF              reduce using rule 91 (expresion -> llamarfuncion .)
    LOOP            reduce using rule 91 (expresion -> llamarfuncion .)
    ARRAY           reduce using rule 91 (expresion -> llamarfuncion .)
    BITAND          reduce using rule 91 (expresion -> llamarfuncion .)
    LPAREN          reduce using rule 91 (expresion -> llamarfuncion .)
    VEC             reduce using rule 91 (expresion -> llamarfuncion .)
    CONST           reduce using rule 91 (expresion -> llamarfuncion .)
    MUT             reduce using rule 91 (expresion -> llamarfuncion .)
    FN              reduce using rule 91 (expresion -> llamarfuncion .)
    TIMES           reduce using rule 91 (expresion -> llamarfuncion .)
    $end            reduce using rule 91 (expresion -> llamarfuncion .)
    LBRACKET        reduce using rule 91 (expresion -> llamarfuncion .)
    RPAREN          reduce using rule 91 (expresion -> llamarfuncion .)
    COMMA           reduce using rule 91 (expresion -> llamarfuncion .)
    RBRACKET        reduce using rule 91 (expresion -> llamarfuncion .)


state 31

    (138) continue -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 72


state 32

    (136) break -> BREAK . SEMICOLON
    (137) break -> BREAK . expresion SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    SEMICOLON       shift and go to state 73
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 74
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 33

    (156) funcionesesdata -> funcionesvector .

    PRINT           reduce using rule 156 (funcionesesdata -> funcionesvector .)
    RETURN          reduce using rule 156 (funcionesesdata -> funcionesvector .)
    NUMBER          reduce using rule 156 (funcionesesdata -> funcionesvector .)
    FLOAT           reduce using rule 156 (funcionesesdata -> funcionesvector .)
    STRING          reduce using rule 156 (funcionesesdata -> funcionesvector .)
    TRUE            reduce using rule 156 (funcionesesdata -> funcionesvector .)
    FALSE           reduce using rule 156 (funcionesesdata -> funcionesvector .)
    VARIABLE        reduce using rule 156 (funcionesesdata -> funcionesvector .)
    CONTINUE        reduce using rule 156 (funcionesesdata -> funcionesvector .)
    BREAK           reduce using rule 156 (funcionesesdata -> funcionesvector .)
    USE             reduce using rule 156 (funcionesesdata -> funcionesvector .)
    LET             reduce using rule 156 (funcionesesdata -> funcionesvector .)
    STRUCT          reduce using rule 156 (funcionesesdata -> funcionesvector .)
    FOR             reduce using rule 156 (funcionesesdata -> funcionesvector .)
    WHILE           reduce using rule 156 (funcionesesdata -> funcionesvector .)
    IF              reduce using rule 156 (funcionesesdata -> funcionesvector .)
    LOOP            reduce using rule 156 (funcionesesdata -> funcionesvector .)
    ARRAY           reduce using rule 156 (funcionesesdata -> funcionesvector .)
    BITAND          reduce using rule 156 (funcionesesdata -> funcionesvector .)
    LPAREN          reduce using rule 156 (funcionesesdata -> funcionesvector .)
    VEC             reduce using rule 156 (funcionesesdata -> funcionesvector .)
    CONST           reduce using rule 156 (funcionesesdata -> funcionesvector .)
    MUT             reduce using rule 156 (funcionesesdata -> funcionesvector .)
    FN              reduce using rule 156 (funcionesesdata -> funcionesvector .)
    TIMES           reduce using rule 156 (funcionesesdata -> funcionesvector .)
    $end            reduce using rule 156 (funcionesesdata -> funcionesvector .)
    RBRACKET        reduce using rule 156 (funcionesesdata -> funcionesvector .)


state 34

    (157) funcionesesdata -> funcioneshashmap .

    PRINT           reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    RETURN          reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    NUMBER          reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    FLOAT           reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    STRING          reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    TRUE            reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    FALSE           reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    VARIABLE        reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    CONTINUE        reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    BREAK           reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    USE             reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    LET             reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    STRUCT          reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    FOR             reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    WHILE           reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    IF              reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    LOOP            reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    ARRAY           reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    BITAND          reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    LPAREN          reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    VEC             reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    CONST           reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    MUT             reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    FN              reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    TIMES           reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    $end            reduce using rule 157 (funcionesesdata -> funcioneshashmap .)
    RBRACKET        reduce using rule 157 (funcionesesdata -> funcioneshashmap .)


state 35

    (158) funcionesesdata -> funcionesarray .

    PRINT           reduce using rule 158 (funcionesesdata -> funcionesarray .)
    RETURN          reduce using rule 158 (funcionesesdata -> funcionesarray .)
    NUMBER          reduce using rule 158 (funcionesesdata -> funcionesarray .)
    FLOAT           reduce using rule 158 (funcionesesdata -> funcionesarray .)
    STRING          reduce using rule 158 (funcionesesdata -> funcionesarray .)
    TRUE            reduce using rule 158 (funcionesesdata -> funcionesarray .)
    FALSE           reduce using rule 158 (funcionesesdata -> funcionesarray .)
    VARIABLE        reduce using rule 158 (funcionesesdata -> funcionesarray .)
    CONTINUE        reduce using rule 158 (funcionesesdata -> funcionesarray .)
    BREAK           reduce using rule 158 (funcionesesdata -> funcionesarray .)
    USE             reduce using rule 158 (funcionesesdata -> funcionesarray .)
    LET             reduce using rule 158 (funcionesesdata -> funcionesarray .)
    STRUCT          reduce using rule 158 (funcionesesdata -> funcionesarray .)
    FOR             reduce using rule 158 (funcionesesdata -> funcionesarray .)
    WHILE           reduce using rule 158 (funcionesesdata -> funcionesarray .)
    IF              reduce using rule 158 (funcionesesdata -> funcionesarray .)
    LOOP            reduce using rule 158 (funcionesesdata -> funcionesarray .)
    ARRAY           reduce using rule 158 (funcionesesdata -> funcionesarray .)
    BITAND          reduce using rule 158 (funcionesesdata -> funcionesarray .)
    LPAREN          reduce using rule 158 (funcionesesdata -> funcionesarray .)
    VEC             reduce using rule 158 (funcionesesdata -> funcionesarray .)
    CONST           reduce using rule 158 (funcionesesdata -> funcionesarray .)
    MUT             reduce using rule 158 (funcionesesdata -> funcionesarray .)
    FN              reduce using rule 158 (funcionesesdata -> funcionesarray .)
    TIMES           reduce using rule 158 (funcionesesdata -> funcionesarray .)
    $end            reduce using rule 158 (funcionesesdata -> funcionesarray .)
    RBRACKET        reduce using rule 158 (funcionesesdata -> funcionesarray .)


state 36

    (129) import -> USE . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON

    VARIABLE        shift and go to state 75


state 37

    (47) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> LET . VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> LET . MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> LET . VARIABLE SEMICOLON
    (58) definicionvariable -> LET . VARIABLE EQUAL expresion
    (61) definicionvariable -> LET . VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> LET . MUT VARIABLE EQUAL llamadarandom
    (37) hashmap -> LET . MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> LET . MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> LET . MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> LET . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> LET . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> LET . MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> LET . MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> LET . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> LET . VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON

    VARIABLE        shift and go to state 76
    MUT             shift and go to state 77


state 38

    (143) declaracion_mutable -> MUT . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> MUT . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> MUT . VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> MUT . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 78


state 39

    (59) definicionvariable -> declaracion_constante .

    PRINT           reduce using rule 59 (definicionvariable -> declaracion_constante .)
    RETURN          reduce using rule 59 (definicionvariable -> declaracion_constante .)
    NUMBER          reduce using rule 59 (definicionvariable -> declaracion_constante .)
    FLOAT           reduce using rule 59 (definicionvariable -> declaracion_constante .)
    STRING          reduce using rule 59 (definicionvariable -> declaracion_constante .)
    TRUE            reduce using rule 59 (definicionvariable -> declaracion_constante .)
    FALSE           reduce using rule 59 (definicionvariable -> declaracion_constante .)
    VARIABLE        reduce using rule 59 (definicionvariable -> declaracion_constante .)
    CONTINUE        reduce using rule 59 (definicionvariable -> declaracion_constante .)
    BREAK           reduce using rule 59 (definicionvariable -> declaracion_constante .)
    USE             reduce using rule 59 (definicionvariable -> declaracion_constante .)
    LET             reduce using rule 59 (definicionvariable -> declaracion_constante .)
    STRUCT          reduce using rule 59 (definicionvariable -> declaracion_constante .)
    FOR             reduce using rule 59 (definicionvariable -> declaracion_constante .)
    WHILE           reduce using rule 59 (definicionvariable -> declaracion_constante .)
    IF              reduce using rule 59 (definicionvariable -> declaracion_constante .)
    LOOP            reduce using rule 59 (definicionvariable -> declaracion_constante .)
    ARRAY           reduce using rule 59 (definicionvariable -> declaracion_constante .)
    BITAND          reduce using rule 59 (definicionvariable -> declaracion_constante .)
    LPAREN          reduce using rule 59 (definicionvariable -> declaracion_constante .)
    VEC             reduce using rule 59 (definicionvariable -> declaracion_constante .)
    CONST           reduce using rule 59 (definicionvariable -> declaracion_constante .)
    MUT             reduce using rule 59 (definicionvariable -> declaracion_constante .)
    FN              reduce using rule 59 (definicionvariable -> declaracion_constante .)
    TIMES           reduce using rule 59 (definicionvariable -> declaracion_constante .)
    $end            reduce using rule 59 (definicionvariable -> declaracion_constante .)
    SEMICOLON       reduce using rule 59 (definicionvariable -> declaracion_constante .)
    LBRACKET        reduce using rule 59 (definicionvariable -> declaracion_constante .)
    RPAREN          reduce using rule 59 (definicionvariable -> declaracion_constante .)
    COMMA           reduce using rule 59 (definicionvariable -> declaracion_constante .)
    RBRACKET        reduce using rule 59 (definicionvariable -> declaracion_constante .)


state 40

    (60) definicionvariable -> declaracion_mutable .

    PRINT           reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    RETURN          reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    NUMBER          reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    FLOAT           reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    STRING          reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    TRUE            reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    FALSE           reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    VARIABLE        reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    CONTINUE        reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    BREAK           reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    USE             reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    LET             reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    STRUCT          reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    FOR             reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    WHILE           reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    IF              reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    LOOP            reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    ARRAY           reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    BITAND          reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    LPAREN          reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    VEC             reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    CONST           reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    MUT             reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    FN              reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    TIMES           reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    $end            reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    SEMICOLON       reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    LBRACKET        reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    RPAREN          reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    COMMA           reduce using rule 60 (definicionvariable -> declaracion_mutable .)
    RBRACKET        reduce using rule 60 (definicionvariable -> declaracion_mutable .)


state 41

    (45) definicionestructura -> STRUCT . VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> STRUCT . VARIABLE LBRACKET RBRACKET SEMICOLON

    VARIABLE        shift and go to state 79


state 42

    (118) definicionfuncion -> funciongenerica .

    PRINT           reduce using rule 118 (definicionfuncion -> funciongenerica .)
    RETURN          reduce using rule 118 (definicionfuncion -> funciongenerica .)
    NUMBER          reduce using rule 118 (definicionfuncion -> funciongenerica .)
    FLOAT           reduce using rule 118 (definicionfuncion -> funciongenerica .)
    STRING          reduce using rule 118 (definicionfuncion -> funciongenerica .)
    TRUE            reduce using rule 118 (definicionfuncion -> funciongenerica .)
    FALSE           reduce using rule 118 (definicionfuncion -> funciongenerica .)
    VARIABLE        reduce using rule 118 (definicionfuncion -> funciongenerica .)
    CONTINUE        reduce using rule 118 (definicionfuncion -> funciongenerica .)
    BREAK           reduce using rule 118 (definicionfuncion -> funciongenerica .)
    USE             reduce using rule 118 (definicionfuncion -> funciongenerica .)
    LET             reduce using rule 118 (definicionfuncion -> funciongenerica .)
    STRUCT          reduce using rule 118 (definicionfuncion -> funciongenerica .)
    FOR             reduce using rule 118 (definicionfuncion -> funciongenerica .)
    WHILE           reduce using rule 118 (definicionfuncion -> funciongenerica .)
    IF              reduce using rule 118 (definicionfuncion -> funciongenerica .)
    LOOP            reduce using rule 118 (definicionfuncion -> funciongenerica .)
    ARRAY           reduce using rule 118 (definicionfuncion -> funciongenerica .)
    BITAND          reduce using rule 118 (definicionfuncion -> funciongenerica .)
    LPAREN          reduce using rule 118 (definicionfuncion -> funciongenerica .)
    VEC             reduce using rule 118 (definicionfuncion -> funciongenerica .)
    CONST           reduce using rule 118 (definicionfuncion -> funciongenerica .)
    MUT             reduce using rule 118 (definicionfuncion -> funciongenerica .)
    FN              reduce using rule 118 (definicionfuncion -> funciongenerica .)
    TIMES           reduce using rule 118 (definicionfuncion -> funciongenerica .)
    $end            reduce using rule 118 (definicionfuncion -> funciongenerica .)
    RBRACKET        reduce using rule 118 (definicionfuncion -> funciongenerica .)


state 43

    (30) definicionestructuradatos -> hashmap .

    PRINT           reduce using rule 30 (definicionestructuradatos -> hashmap .)
    RETURN          reduce using rule 30 (definicionestructuradatos -> hashmap .)
    NUMBER          reduce using rule 30 (definicionestructuradatos -> hashmap .)
    FLOAT           reduce using rule 30 (definicionestructuradatos -> hashmap .)
    STRING          reduce using rule 30 (definicionestructuradatos -> hashmap .)
    TRUE            reduce using rule 30 (definicionestructuradatos -> hashmap .)
    FALSE           reduce using rule 30 (definicionestructuradatos -> hashmap .)
    VARIABLE        reduce using rule 30 (definicionestructuradatos -> hashmap .)
    CONTINUE        reduce using rule 30 (definicionestructuradatos -> hashmap .)
    BREAK           reduce using rule 30 (definicionestructuradatos -> hashmap .)
    USE             reduce using rule 30 (definicionestructuradatos -> hashmap .)
    LET             reduce using rule 30 (definicionestructuradatos -> hashmap .)
    STRUCT          reduce using rule 30 (definicionestructuradatos -> hashmap .)
    FOR             reduce using rule 30 (definicionestructuradatos -> hashmap .)
    WHILE           reduce using rule 30 (definicionestructuradatos -> hashmap .)
    IF              reduce using rule 30 (definicionestructuradatos -> hashmap .)
    LOOP            reduce using rule 30 (definicionestructuradatos -> hashmap .)
    ARRAY           reduce using rule 30 (definicionestructuradatos -> hashmap .)
    BITAND          reduce using rule 30 (definicionestructuradatos -> hashmap .)
    LPAREN          reduce using rule 30 (definicionestructuradatos -> hashmap .)
    VEC             reduce using rule 30 (definicionestructuradatos -> hashmap .)
    CONST           reduce using rule 30 (definicionestructuradatos -> hashmap .)
    MUT             reduce using rule 30 (definicionestructuradatos -> hashmap .)
    FN              reduce using rule 30 (definicionestructuradatos -> hashmap .)
    TIMES           reduce using rule 30 (definicionestructuradatos -> hashmap .)
    $end            reduce using rule 30 (definicionestructuradatos -> hashmap .)
    RBRACKET        reduce using rule 30 (definicionestructuradatos -> hashmap .)


state 44

    (31) definicionestructuradatos -> array .

    PRINT           reduce using rule 31 (definicionestructuradatos -> array .)
    RETURN          reduce using rule 31 (definicionestructuradatos -> array .)
    NUMBER          reduce using rule 31 (definicionestructuradatos -> array .)
    FLOAT           reduce using rule 31 (definicionestructuradatos -> array .)
    STRING          reduce using rule 31 (definicionestructuradatos -> array .)
    TRUE            reduce using rule 31 (definicionestructuradatos -> array .)
    FALSE           reduce using rule 31 (definicionestructuradatos -> array .)
    VARIABLE        reduce using rule 31 (definicionestructuradatos -> array .)
    CONTINUE        reduce using rule 31 (definicionestructuradatos -> array .)
    BREAK           reduce using rule 31 (definicionestructuradatos -> array .)
    USE             reduce using rule 31 (definicionestructuradatos -> array .)
    LET             reduce using rule 31 (definicionestructuradatos -> array .)
    STRUCT          reduce using rule 31 (definicionestructuradatos -> array .)
    FOR             reduce using rule 31 (definicionestructuradatos -> array .)
    WHILE           reduce using rule 31 (definicionestructuradatos -> array .)
    IF              reduce using rule 31 (definicionestructuradatos -> array .)
    LOOP            reduce using rule 31 (definicionestructuradatos -> array .)
    ARRAY           reduce using rule 31 (definicionestructuradatos -> array .)
    BITAND          reduce using rule 31 (definicionestructuradatos -> array .)
    LPAREN          reduce using rule 31 (definicionestructuradatos -> array .)
    VEC             reduce using rule 31 (definicionestructuradatos -> array .)
    CONST           reduce using rule 31 (definicionestructuradatos -> array .)
    MUT             reduce using rule 31 (definicionestructuradatos -> array .)
    FN              reduce using rule 31 (definicionestructuradatos -> array .)
    TIMES           reduce using rule 31 (definicionestructuradatos -> array .)
    $end            reduce using rule 31 (definicionestructuradatos -> array .)
    RBRACKET        reduce using rule 31 (definicionestructuradatos -> array .)


state 45

    (32) definicionestructuradatos -> vector .

    PRINT           reduce using rule 32 (definicionestructuradatos -> vector .)
    RETURN          reduce using rule 32 (definicionestructuradatos -> vector .)
    NUMBER          reduce using rule 32 (definicionestructuradatos -> vector .)
    FLOAT           reduce using rule 32 (definicionestructuradatos -> vector .)
    STRING          reduce using rule 32 (definicionestructuradatos -> vector .)
    TRUE            reduce using rule 32 (definicionestructuradatos -> vector .)
    FALSE           reduce using rule 32 (definicionestructuradatos -> vector .)
    VARIABLE        reduce using rule 32 (definicionestructuradatos -> vector .)
    CONTINUE        reduce using rule 32 (definicionestructuradatos -> vector .)
    BREAK           reduce using rule 32 (definicionestructuradatos -> vector .)
    USE             reduce using rule 32 (definicionestructuradatos -> vector .)
    LET             reduce using rule 32 (definicionestructuradatos -> vector .)
    STRUCT          reduce using rule 32 (definicionestructuradatos -> vector .)
    FOR             reduce using rule 32 (definicionestructuradatos -> vector .)
    WHILE           reduce using rule 32 (definicionestructuradatos -> vector .)
    IF              reduce using rule 32 (definicionestructuradatos -> vector .)
    LOOP            reduce using rule 32 (definicionestructuradatos -> vector .)
    ARRAY           reduce using rule 32 (definicionestructuradatos -> vector .)
    BITAND          reduce using rule 32 (definicionestructuradatos -> vector .)
    LPAREN          reduce using rule 32 (definicionestructuradatos -> vector .)
    VEC             reduce using rule 32 (definicionestructuradatos -> vector .)
    CONST           reduce using rule 32 (definicionestructuradatos -> vector .)
    MUT             reduce using rule 32 (definicionestructuradatos -> vector .)
    FN              reduce using rule 32 (definicionestructuradatos -> vector .)
    TIMES           reduce using rule 32 (definicionestructuradatos -> vector .)
    $end            reduce using rule 32 (definicionestructuradatos -> vector .)
    RBRACKET        reduce using rule 32 (definicionestructuradatos -> vector .)


state 46

    (33) definicionestructuradatos -> list .

    PRINT           reduce using rule 33 (definicionestructuradatos -> list .)
    RETURN          reduce using rule 33 (definicionestructuradatos -> list .)
    NUMBER          reduce using rule 33 (definicionestructuradatos -> list .)
    FLOAT           reduce using rule 33 (definicionestructuradatos -> list .)
    STRING          reduce using rule 33 (definicionestructuradatos -> list .)
    TRUE            reduce using rule 33 (definicionestructuradatos -> list .)
    FALSE           reduce using rule 33 (definicionestructuradatos -> list .)
    VARIABLE        reduce using rule 33 (definicionestructuradatos -> list .)
    CONTINUE        reduce using rule 33 (definicionestructuradatos -> list .)
    BREAK           reduce using rule 33 (definicionestructuradatos -> list .)
    USE             reduce using rule 33 (definicionestructuradatos -> list .)
    LET             reduce using rule 33 (definicionestructuradatos -> list .)
    STRUCT          reduce using rule 33 (definicionestructuradatos -> list .)
    FOR             reduce using rule 33 (definicionestructuradatos -> list .)
    WHILE           reduce using rule 33 (definicionestructuradatos -> list .)
    IF              reduce using rule 33 (definicionestructuradatos -> list .)
    LOOP            reduce using rule 33 (definicionestructuradatos -> list .)
    ARRAY           reduce using rule 33 (definicionestructuradatos -> list .)
    BITAND          reduce using rule 33 (definicionestructuradatos -> list .)
    LPAREN          reduce using rule 33 (definicionestructuradatos -> list .)
    VEC             reduce using rule 33 (definicionestructuradatos -> list .)
    CONST           reduce using rule 33 (definicionestructuradatos -> list .)
    MUT             reduce using rule 33 (definicionestructuradatos -> list .)
    FN              reduce using rule 33 (definicionestructuradatos -> list .)
    TIMES           reduce using rule 33 (definicionestructuradatos -> list .)
    $end            reduce using rule 33 (definicionestructuradatos -> list .)
    RBRACKET        reduce using rule 33 (definicionestructuradatos -> list .)


state 47

    (20) for -> FOR . VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> FOR . VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> FOR . VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> FOR . VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> FOR . VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> FOR . VARIABLE IN expresion LBRACKET RBRACKET

    VARIABLE        shift and go to state 80


state 48

    (123) while -> WHILE . LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> WHILE . expresion LBRACKET program RBRACKET
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    LPAREN          shift and go to state 81
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 82
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 49

    (147) if -> IF . expresion LBRACKET program RBRACKET
    (148) if -> IF . expresion LBRACKET program RBRACKET ELSE
    (149) if -> IF . expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 83
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 50

    (150) loop -> LOOP . LBRACKET program RBRACKET

    LBRACKET        shift and go to state 84


state 51

    (179) ops -> operandos . operaciones operandos
    (180) ops -> operandos . operaciones ops
    (115) operandos -> operandos . COMMA operandos
    (97) operaciones -> . PLUS
    (98) operaciones -> . MINUS
    (99) operaciones -> . TIMES
    (100) operaciones -> . DIVIDE
    (101) operaciones -> . RDIAMOND
    (102) operaciones -> . LDIAMOND
    (103) operaciones -> . EQUAL_EQUAL
    (104) operaciones -> . NOT_EQUAL
    (105) operaciones -> . LESS_EQUAL
    (106) operaciones -> . GREATER_EQUAL
    (107) operaciones -> . PLUS_EQUAL

    COMMA           shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    RDIAMOND        shift and go to state 91
    LDIAMOND        shift and go to state 92
    EQUAL_EQUAL     shift and go to state 93
    NOT_EQUAL       shift and go to state 94
    LESS_EQUAL      shift and go to state 95
    GREATER_EQUAL   shift and go to state 96
    PLUS_EQUAL      shift and go to state 97

    operaciones                    shift and go to state 85

state 52

    (170) opbasicas -> ARRAY . DOT LEN LPAREN RPAREN
    (173) opbasicas -> ARRAY . L_BRACKET operandos R_BRACKET

    DOT             shift and go to state 98
    L_BRACKET       shift and go to state 99


state 53

    (171) opbasicas -> BITAND . VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (114) operandos -> BITAND . VARIABLE

    VARIABLE        shift and go to state 100


state 54

    (177) opbasicas -> VEC . EXCLAMATION L_BRACKET numeros R_BRACKET

    EXCLAMATION     shift and go to state 101


state 55

    (139) declaracion_constante -> CONST . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> CONST . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> CONST . VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> CONST . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 102


state 56

    (119) funciongenerica -> FN . VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> FN . MAIN LPAREN RPAREN LBRACKET program RBRACKET

    VARIABLE        shift and go to state 103
    MAIN            shift and go to state 104


state 57

    (113) operandos -> TIMES . VARIABLE

    VARIABLE        shift and go to state 105


state 58

    (1) program -> program item .

    PRINT           reduce using rule 1 (program -> program item .)
    RETURN          reduce using rule 1 (program -> program item .)
    NUMBER          reduce using rule 1 (program -> program item .)
    FLOAT           reduce using rule 1 (program -> program item .)
    STRING          reduce using rule 1 (program -> program item .)
    TRUE            reduce using rule 1 (program -> program item .)
    FALSE           reduce using rule 1 (program -> program item .)
    VARIABLE        reduce using rule 1 (program -> program item .)
    CONTINUE        reduce using rule 1 (program -> program item .)
    BREAK           reduce using rule 1 (program -> program item .)
    USE             reduce using rule 1 (program -> program item .)
    LET             reduce using rule 1 (program -> program item .)
    STRUCT          reduce using rule 1 (program -> program item .)
    FOR             reduce using rule 1 (program -> program item .)
    WHILE           reduce using rule 1 (program -> program item .)
    IF              reduce using rule 1 (program -> program item .)
    LOOP            reduce using rule 1 (program -> program item .)
    ARRAY           reduce using rule 1 (program -> program item .)
    BITAND          reduce using rule 1 (program -> program item .)
    LPAREN          reduce using rule 1 (program -> program item .)
    VEC             reduce using rule 1 (program -> program item .)
    CONST           reduce using rule 1 (program -> program item .)
    MUT             reduce using rule 1 (program -> program item .)
    FN              reduce using rule 1 (program -> program item .)
    TIMES           reduce using rule 1 (program -> program item .)
    $end            reduce using rule 1 (program -> program item .)
    RBRACKET        reduce using rule 1 (program -> program item .)


state 59

    (5) item -> PRINT EXCLAMATION . LPAREN STRING RPAREN SEMICOLON
    (6) item -> PRINT EXCLAMATION . LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> PRINT EXCLAMATION . LPAREN STRING COMMA vars RPAREN SEMICOLON

    LPAREN          shift and go to state 106


state 60

    (174) opbasicas -> LPAREN NUMBER . DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN

    DOT             shift and go to state 107


state 61

    (175) opbasicas -> STRING DOT . TO_STRING LPAREN RPAREN

    TO_STRING       shift and go to state 108


state 62

    (9) item -> expresion SEMICOLON .

    PRINT           reduce using rule 9 (item -> expresion SEMICOLON .)
    RETURN          reduce using rule 9 (item -> expresion SEMICOLON .)
    NUMBER          reduce using rule 9 (item -> expresion SEMICOLON .)
    FLOAT           reduce using rule 9 (item -> expresion SEMICOLON .)
    STRING          reduce using rule 9 (item -> expresion SEMICOLON .)
    TRUE            reduce using rule 9 (item -> expresion SEMICOLON .)
    FALSE           reduce using rule 9 (item -> expresion SEMICOLON .)
    VARIABLE        reduce using rule 9 (item -> expresion SEMICOLON .)
    CONTINUE        reduce using rule 9 (item -> expresion SEMICOLON .)
    BREAK           reduce using rule 9 (item -> expresion SEMICOLON .)
    USE             reduce using rule 9 (item -> expresion SEMICOLON .)
    LET             reduce using rule 9 (item -> expresion SEMICOLON .)
    STRUCT          reduce using rule 9 (item -> expresion SEMICOLON .)
    FOR             reduce using rule 9 (item -> expresion SEMICOLON .)
    WHILE           reduce using rule 9 (item -> expresion SEMICOLON .)
    IF              reduce using rule 9 (item -> expresion SEMICOLON .)
    LOOP            reduce using rule 9 (item -> expresion SEMICOLON .)
    ARRAY           reduce using rule 9 (item -> expresion SEMICOLON .)
    BITAND          reduce using rule 9 (item -> expresion SEMICOLON .)
    LPAREN          reduce using rule 9 (item -> expresion SEMICOLON .)
    VEC             reduce using rule 9 (item -> expresion SEMICOLON .)
    CONST           reduce using rule 9 (item -> expresion SEMICOLON .)
    MUT             reduce using rule 9 (item -> expresion SEMICOLON .)
    FN              reduce using rule 9 (item -> expresion SEMICOLON .)
    TIMES           reduce using rule 9 (item -> expresion SEMICOLON .)
    $end            reduce using rule 9 (item -> expresion SEMICOLON .)
    RBRACKET        reduce using rule 9 (item -> expresion SEMICOLON .)


state 63

    (13) item -> RETURN expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 109

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 64

    (86) expresion -> VARIABLE .
    (172) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (176) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (178) opbasicas -> VARIABLE . DOT VARIABLE LPAREN RPAREN
    (56) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (57) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN
    (110) operandos -> VARIABLE .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 86 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 86 (expresion -> VARIABLE .)
    SEMICOLON       reduce using rule 86 (expresion -> VARIABLE .)
    LBRACKET        reduce using rule 86 (expresion -> VARIABLE .)
    RPAREN          reduce using rule 86 (expresion -> VARIABLE .)
    PRINT           reduce using rule 86 (expresion -> VARIABLE .)
    RETURN          reduce using rule 86 (expresion -> VARIABLE .)
    NUMBER          reduce using rule 86 (expresion -> VARIABLE .)
    FLOAT           reduce using rule 86 (expresion -> VARIABLE .)
    STRING          reduce using rule 86 (expresion -> VARIABLE .)
    TRUE            reduce using rule 86 (expresion -> VARIABLE .)
    FALSE           reduce using rule 86 (expresion -> VARIABLE .)
    VARIABLE        reduce using rule 86 (expresion -> VARIABLE .)
    CONTINUE        reduce using rule 86 (expresion -> VARIABLE .)
    BREAK           reduce using rule 86 (expresion -> VARIABLE .)
    USE             reduce using rule 86 (expresion -> VARIABLE .)
    LET             reduce using rule 86 (expresion -> VARIABLE .)
    STRUCT          reduce using rule 86 (expresion -> VARIABLE .)
    FOR             reduce using rule 86 (expresion -> VARIABLE .)
    WHILE           reduce using rule 86 (expresion -> VARIABLE .)
    IF              reduce using rule 86 (expresion -> VARIABLE .)
    LOOP            reduce using rule 86 (expresion -> VARIABLE .)
    ARRAY           reduce using rule 86 (expresion -> VARIABLE .)
    BITAND          reduce using rule 86 (expresion -> VARIABLE .)
    VEC             reduce using rule 86 (expresion -> VARIABLE .)
    CONST           reduce using rule 86 (expresion -> VARIABLE .)
    MUT             reduce using rule 86 (expresion -> VARIABLE .)
    FN              reduce using rule 86 (expresion -> VARIABLE .)
    TIMES           reduce using rule 86 (expresion -> VARIABLE .)
    $end            reduce using rule 86 (expresion -> VARIABLE .)
    RBRACKET        reduce using rule 86 (expresion -> VARIABLE .)
    COMMA           reduce using rule 86 (expresion -> VARIABLE .)
    DOT             shift and go to state 110
    LPAREN          shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS            reduce using rule 110 (operandos -> VARIABLE .)
    MINUS           reduce using rule 110 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 110 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 110 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 110 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 110 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)

  ! LPAREN          [ reduce using rule 86 (expresion -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 110 (operandos -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 110 (operandos -> VARIABLE .) ]


state 65

    (89) expresion -> estructuracontrol .

    SEMICOLON       reduce using rule 89 (expresion -> estructuracontrol .)
    LBRACKET        reduce using rule 89 (expresion -> estructuracontrol .)
    RPAREN          reduce using rule 89 (expresion -> estructuracontrol .)
    COMMA           reduce using rule 89 (expresion -> estructuracontrol .)
    PRINT           reduce using rule 89 (expresion -> estructuracontrol .)
    RETURN          reduce using rule 89 (expresion -> estructuracontrol .)
    NUMBER          reduce using rule 89 (expresion -> estructuracontrol .)
    FLOAT           reduce using rule 89 (expresion -> estructuracontrol .)
    STRING          reduce using rule 89 (expresion -> estructuracontrol .)
    TRUE            reduce using rule 89 (expresion -> estructuracontrol .)
    FALSE           reduce using rule 89 (expresion -> estructuracontrol .)
    VARIABLE        reduce using rule 89 (expresion -> estructuracontrol .)
    CONTINUE        reduce using rule 89 (expresion -> estructuracontrol .)
    BREAK           reduce using rule 89 (expresion -> estructuracontrol .)
    USE             reduce using rule 89 (expresion -> estructuracontrol .)
    LET             reduce using rule 89 (expresion -> estructuracontrol .)
    STRUCT          reduce using rule 89 (expresion -> estructuracontrol .)
    FOR             reduce using rule 89 (expresion -> estructuracontrol .)
    WHILE           reduce using rule 89 (expresion -> estructuracontrol .)
    IF              reduce using rule 89 (expresion -> estructuracontrol .)
    LOOP            reduce using rule 89 (expresion -> estructuracontrol .)
    ARRAY           reduce using rule 89 (expresion -> estructuracontrol .)
    BITAND          reduce using rule 89 (expresion -> estructuracontrol .)
    LPAREN          reduce using rule 89 (expresion -> estructuracontrol .)
    VEC             reduce using rule 89 (expresion -> estructuracontrol .)
    CONST           reduce using rule 89 (expresion -> estructuracontrol .)
    MUT             reduce using rule 89 (expresion -> estructuracontrol .)
    FN              reduce using rule 89 (expresion -> estructuracontrol .)
    TIMES           reduce using rule 89 (expresion -> estructuracontrol .)
    $end            reduce using rule 89 (expresion -> estructuracontrol .)
    RBRACKET        reduce using rule 89 (expresion -> estructuracontrol .)


state 66

    (90) expresion -> definicionvariable .

    SEMICOLON       reduce using rule 90 (expresion -> definicionvariable .)
    LBRACKET        reduce using rule 90 (expresion -> definicionvariable .)
    RPAREN          reduce using rule 90 (expresion -> definicionvariable .)
    COMMA           reduce using rule 90 (expresion -> definicionvariable .)
    PRINT           reduce using rule 90 (expresion -> definicionvariable .)
    RETURN          reduce using rule 90 (expresion -> definicionvariable .)
    NUMBER          reduce using rule 90 (expresion -> definicionvariable .)
    FLOAT           reduce using rule 90 (expresion -> definicionvariable .)
    STRING          reduce using rule 90 (expresion -> definicionvariable .)
    TRUE            reduce using rule 90 (expresion -> definicionvariable .)
    FALSE           reduce using rule 90 (expresion -> definicionvariable .)
    VARIABLE        reduce using rule 90 (expresion -> definicionvariable .)
    CONTINUE        reduce using rule 90 (expresion -> definicionvariable .)
    BREAK           reduce using rule 90 (expresion -> definicionvariable .)
    USE             reduce using rule 90 (expresion -> definicionvariable .)
    LET             reduce using rule 90 (expresion -> definicionvariable .)
    STRUCT          reduce using rule 90 (expresion -> definicionvariable .)
    FOR             reduce using rule 90 (expresion -> definicionvariable .)
    WHILE           reduce using rule 90 (expresion -> definicionvariable .)
    IF              reduce using rule 90 (expresion -> definicionvariable .)
    LOOP            reduce using rule 90 (expresion -> definicionvariable .)
    ARRAY           reduce using rule 90 (expresion -> definicionvariable .)
    BITAND          reduce using rule 90 (expresion -> definicionvariable .)
    LPAREN          reduce using rule 90 (expresion -> definicionvariable .)
    VEC             reduce using rule 90 (expresion -> definicionvariable .)
    CONST           reduce using rule 90 (expresion -> definicionvariable .)
    MUT             reduce using rule 90 (expresion -> definicionvariable .)
    FN              reduce using rule 90 (expresion -> definicionvariable .)
    TIMES           reduce using rule 90 (expresion -> definicionvariable .)
    $end            reduce using rule 90 (expresion -> definicionvariable .)
    RBRACKET        reduce using rule 90 (expresion -> definicionvariable .)


state 67

    (47) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> LET . VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> LET . MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> LET . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> LET . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> LET . VARIABLE SEMICOLON
    (58) definicionvariable -> LET . VARIABLE EQUAL expresion
    (61) definicionvariable -> LET . VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> LET . MUT VARIABLE EQUAL llamadarandom

    VARIABLE        shift and go to state 111
    MUT             shift and go to state 112


state 68

    (130) llamadarandom -> VARIABLE DOUBLE_POINT . DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON

    DOUBLE_POINT    shift and go to state 113


state 69

    (176) opbasicas -> VARIABLE LPAREN . variables RPAREN
    (92) llamarfuncion -> VARIABLE LPAREN . RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE LPAREN . expresion RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE LPAREN . expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> VARIABLE LPAREN . operandos RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE LPAREN . operandos RPAREN
    (116) variables -> . VARIABLE
    (117) variables -> . VARIABLE COMMA variables
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    RPAREN          shift and go to state 116
    VARIABLE        shift and go to state 114
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 119
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    TIMES           shift and go to state 57
    BITAND          shift and go to state 120
    ARRAY           shift and go to state 52
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    variables                      shift and go to state 115
    expresion                      shift and go to state 117
    operandos                      shift and go to state 118
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 70

    (56) definicionvariable -> VARIABLE EQUAL . expresion SEMICOLON
    (57) definicionvariable -> VARIABLE EQUAL . STRING SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    STRING          shift and go to state 122
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 121
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 71

    (172) opbasicas -> VARIABLE DOT . ITER LPAREN RPAREN
    (178) opbasicas -> VARIABLE DOT . VARIABLE LPAREN RPAREN
    (159) funcionesvector -> VARIABLE DOT . PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> VARIABLE DOT . POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> VARIABLE DOT . LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> VARIABLE DOT . IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> VARIABLE DOT . GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> VARIABLE DOT . SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> VARIABLE DOT . REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> VARIABLE DOT . CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> VARIABLE DOT . SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> VARIABLE DOT . REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> VARIABLE DOT . ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> VARIABLE DOT . INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> VARIABLE DOT . REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> VARIABLE DOT . GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> VARIABLE DOT . LEN LPAREN RPAREN
    (42) funcioneshashmap -> VARIABLE DOT . IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> VARIABLE DOT . CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> VARIABLE DOT . ITER LPAREN RPAREN
    (125) funcionesarray -> VARIABLE DOT . LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> VARIABLE DOT . IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> VARIABLE DOT . CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> VARIABLE DOT . ITER LPAREN RPAREN SEMICOLON

    ITER            shift and go to state 124
    VARIABLE        shift and go to state 123
    PUSH            shift and go to state 125
    POP             shift and go to state 126
    LEN             shift and go to state 127
    IS_EMPTY        shift and go to state 128
    GET             shift and go to state 129
    SET             shift and go to state 130
    REMOVE          shift and go to state 131
    CLEAR           shift and go to state 132
    SWAP            shift and go to state 133
    REVERSE         shift and go to state 134
    INSERT          shift and go to state 135


state 72

    (138) continue -> CONTINUE SEMICOLON .

    PRINT           reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    USE             reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    LET             reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    IF              reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    LOOP            reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    ARRAY           reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    BITAND          reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    VEC             reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    MUT             reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    FN              reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    TIMES           reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    $end            reduce using rule 138 (continue -> CONTINUE SEMICOLON .)
    RBRACKET        reduce using rule 138 (continue -> CONTINUE SEMICOLON .)


state 73

    (136) break -> BREAK SEMICOLON .

    PRINT           reduce using rule 136 (break -> BREAK SEMICOLON .)
    RETURN          reduce using rule 136 (break -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 136 (break -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 136 (break -> BREAK SEMICOLON .)
    STRING          reduce using rule 136 (break -> BREAK SEMICOLON .)
    TRUE            reduce using rule 136 (break -> BREAK SEMICOLON .)
    FALSE           reduce using rule 136 (break -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 136 (break -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 136 (break -> BREAK SEMICOLON .)
    BREAK           reduce using rule 136 (break -> BREAK SEMICOLON .)
    USE             reduce using rule 136 (break -> BREAK SEMICOLON .)
    LET             reduce using rule 136 (break -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 136 (break -> BREAK SEMICOLON .)
    FOR             reduce using rule 136 (break -> BREAK SEMICOLON .)
    WHILE           reduce using rule 136 (break -> BREAK SEMICOLON .)
    IF              reduce using rule 136 (break -> BREAK SEMICOLON .)
    LOOP            reduce using rule 136 (break -> BREAK SEMICOLON .)
    ARRAY           reduce using rule 136 (break -> BREAK SEMICOLON .)
    BITAND          reduce using rule 136 (break -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 136 (break -> BREAK SEMICOLON .)
    VEC             reduce using rule 136 (break -> BREAK SEMICOLON .)
    CONST           reduce using rule 136 (break -> BREAK SEMICOLON .)
    MUT             reduce using rule 136 (break -> BREAK SEMICOLON .)
    FN              reduce using rule 136 (break -> BREAK SEMICOLON .)
    TIMES           reduce using rule 136 (break -> BREAK SEMICOLON .)
    $end            reduce using rule 136 (break -> BREAK SEMICOLON .)
    RBRACKET        reduce using rule 136 (break -> BREAK SEMICOLON .)


state 74

    (137) break -> BREAK expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 136

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 75

    (129) import -> USE VARIABLE . DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON

    DOUBLE_POINT    shift and go to state 137


state 76

    (47) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> LET VARIABLE . EQUAL expresion SEMICOLON
    (51) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> LET VARIABLE . SEMICOLON
    (58) definicionvariable -> LET VARIABLE . EQUAL expresion
    (61) definicionvariable -> LET VARIABLE . LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (151) vector -> LET VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> LET VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> LET VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> LET VARIABLE . EQUAL L_BRACKET numeros R_BRACKET SEMICOLON

    DOUBLE_POINT    shift and go to state 138
    EQUAL           shift and go to state 139
    SEMICOLON       shift and go to state 140
    LPAREN          shift and go to state 141


state 77

    (49) definicionvariable -> LET MUT . VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (52) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (54) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (62) definicionvariable -> LET MUT . VARIABLE EQUAL llamadarandom
    (37) hashmap -> LET MUT . VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> LET MUT . ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> LET MUT . VARIABLE DOUBLE_POINT array SEMICOLON
    (153) vector -> LET MUT . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> LET MUT . VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON

    VARIABLE        shift and go to state 142
    ARRAY           shift and go to state 143


state 78

    (143) declaracion_mutable -> MUT VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> MUT VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> MUT VARIABLE . EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> MUT VARIABLE . SEMICOLON

    DOUBLE_POINT    shift and go to state 144
    EQUAL           shift and go to state 145
    SEMICOLON       shift and go to state 146


state 79

    (45) definicionestructura -> STRUCT VARIABLE . LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> STRUCT VARIABLE . LBRACKET RBRACKET SEMICOLON

    LBRACKET        shift and go to state 147


state 80

    (20) for -> FOR VARIABLE . IN VARIABLE LBRACKET program RBRACKET
    (21) for -> FOR VARIABLE . IN VARIABLE LBRACKET RBRACKET
    (22) for -> FOR VARIABLE . IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> FOR VARIABLE . IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> FOR VARIABLE . IN expresion LBRACKET program RBRACKET
    (25) for -> FOR VARIABLE . IN expresion LBRACKET RBRACKET

    IN              shift and go to state 148


state 81

    (123) while -> WHILE LPAREN . expresion RPAREN LBRACKET program RBRACKET
    (174) opbasicas -> LPAREN . NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 150
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 149
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 82

    (124) while -> WHILE expresion . LBRACKET program RBRACKET
    (87) expresion -> expresion .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 151

  ! LBRACKET        [ reduce using rule 87 (expresion -> expresion .) ]


state 83

    (147) if -> IF expresion . LBRACKET program RBRACKET
    (148) if -> IF expresion . LBRACKET program RBRACKET ELSE
    (149) if -> IF expresion . LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (87) expresion -> expresion .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 152

  ! LBRACKET        [ reduce using rule 87 (expresion -> expresion .) ]


state 84

    (150) loop -> LOOP LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    program                        shift and go to state 153
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 85

    (179) ops -> operandos operaciones . operandos
    (180) ops -> operandos operaciones . ops
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 156
    FLOAT           shift and go to state 157
    VARIABLE        shift and go to state 158
    STRING          shift and go to state 159
    TIMES           shift and go to state 57
    BITAND          shift and go to state 120
    ARRAY           shift and go to state 52
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54

    operandos                      shift and go to state 154
    ops                            shift and go to state 155
    opbasicas                      shift and go to state 160

state 86

    (115) operandos -> operandos COMMA . operandos
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 156
    FLOAT           shift and go to state 157
    VARIABLE        shift and go to state 158
    STRING          shift and go to state 159
    TIMES           shift and go to state 57
    BITAND          shift and go to state 120
    ARRAY           shift and go to state 52
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54

    operandos                      shift and go to state 161
    opbasicas                      shift and go to state 160

state 87

    (97) operaciones -> PLUS .

    NUMBER          reduce using rule 97 (operaciones -> PLUS .)
    FLOAT           reduce using rule 97 (operaciones -> PLUS .)
    VARIABLE        reduce using rule 97 (operaciones -> PLUS .)
    STRING          reduce using rule 97 (operaciones -> PLUS .)
    TIMES           reduce using rule 97 (operaciones -> PLUS .)
    BITAND          reduce using rule 97 (operaciones -> PLUS .)
    ARRAY           reduce using rule 97 (operaciones -> PLUS .)
    LPAREN          reduce using rule 97 (operaciones -> PLUS .)
    VEC             reduce using rule 97 (operaciones -> PLUS .)


state 88

    (98) operaciones -> MINUS .

    NUMBER          reduce using rule 98 (operaciones -> MINUS .)
    FLOAT           reduce using rule 98 (operaciones -> MINUS .)
    VARIABLE        reduce using rule 98 (operaciones -> MINUS .)
    STRING          reduce using rule 98 (operaciones -> MINUS .)
    TIMES           reduce using rule 98 (operaciones -> MINUS .)
    BITAND          reduce using rule 98 (operaciones -> MINUS .)
    ARRAY           reduce using rule 98 (operaciones -> MINUS .)
    LPAREN          reduce using rule 98 (operaciones -> MINUS .)
    VEC             reduce using rule 98 (operaciones -> MINUS .)


state 89

    (99) operaciones -> TIMES .

    NUMBER          reduce using rule 99 (operaciones -> TIMES .)
    FLOAT           reduce using rule 99 (operaciones -> TIMES .)
    VARIABLE        reduce using rule 99 (operaciones -> TIMES .)
    STRING          reduce using rule 99 (operaciones -> TIMES .)
    TIMES           reduce using rule 99 (operaciones -> TIMES .)
    BITAND          reduce using rule 99 (operaciones -> TIMES .)
    ARRAY           reduce using rule 99 (operaciones -> TIMES .)
    LPAREN          reduce using rule 99 (operaciones -> TIMES .)
    VEC             reduce using rule 99 (operaciones -> TIMES .)


state 90

    (100) operaciones -> DIVIDE .

    NUMBER          reduce using rule 100 (operaciones -> DIVIDE .)
    FLOAT           reduce using rule 100 (operaciones -> DIVIDE .)
    VARIABLE        reduce using rule 100 (operaciones -> DIVIDE .)
    STRING          reduce using rule 100 (operaciones -> DIVIDE .)
    TIMES           reduce using rule 100 (operaciones -> DIVIDE .)
    BITAND          reduce using rule 100 (operaciones -> DIVIDE .)
    ARRAY           reduce using rule 100 (operaciones -> DIVIDE .)
    LPAREN          reduce using rule 100 (operaciones -> DIVIDE .)
    VEC             reduce using rule 100 (operaciones -> DIVIDE .)


state 91

    (101) operaciones -> RDIAMOND .

    NUMBER          reduce using rule 101 (operaciones -> RDIAMOND .)
    FLOAT           reduce using rule 101 (operaciones -> RDIAMOND .)
    VARIABLE        reduce using rule 101 (operaciones -> RDIAMOND .)
    STRING          reduce using rule 101 (operaciones -> RDIAMOND .)
    TIMES           reduce using rule 101 (operaciones -> RDIAMOND .)
    BITAND          reduce using rule 101 (operaciones -> RDIAMOND .)
    ARRAY           reduce using rule 101 (operaciones -> RDIAMOND .)
    LPAREN          reduce using rule 101 (operaciones -> RDIAMOND .)
    VEC             reduce using rule 101 (operaciones -> RDIAMOND .)


state 92

    (102) operaciones -> LDIAMOND .

    NUMBER          reduce using rule 102 (operaciones -> LDIAMOND .)
    FLOAT           reduce using rule 102 (operaciones -> LDIAMOND .)
    VARIABLE        reduce using rule 102 (operaciones -> LDIAMOND .)
    STRING          reduce using rule 102 (operaciones -> LDIAMOND .)
    TIMES           reduce using rule 102 (operaciones -> LDIAMOND .)
    BITAND          reduce using rule 102 (operaciones -> LDIAMOND .)
    ARRAY           reduce using rule 102 (operaciones -> LDIAMOND .)
    LPAREN          reduce using rule 102 (operaciones -> LDIAMOND .)
    VEC             reduce using rule 102 (operaciones -> LDIAMOND .)


state 93

    (103) operaciones -> EQUAL_EQUAL .

    NUMBER          reduce using rule 103 (operaciones -> EQUAL_EQUAL .)
    FLOAT           reduce using rule 103 (operaciones -> EQUAL_EQUAL .)
    VARIABLE        reduce using rule 103 (operaciones -> EQUAL_EQUAL .)
    STRING          reduce using rule 103 (operaciones -> EQUAL_EQUAL .)
    TIMES           reduce using rule 103 (operaciones -> EQUAL_EQUAL .)
    BITAND          reduce using rule 103 (operaciones -> EQUAL_EQUAL .)
    ARRAY           reduce using rule 103 (operaciones -> EQUAL_EQUAL .)
    LPAREN          reduce using rule 103 (operaciones -> EQUAL_EQUAL .)
    VEC             reduce using rule 103 (operaciones -> EQUAL_EQUAL .)


state 94

    (104) operaciones -> NOT_EQUAL .

    NUMBER          reduce using rule 104 (operaciones -> NOT_EQUAL .)
    FLOAT           reduce using rule 104 (operaciones -> NOT_EQUAL .)
    VARIABLE        reduce using rule 104 (operaciones -> NOT_EQUAL .)
    STRING          reduce using rule 104 (operaciones -> NOT_EQUAL .)
    TIMES           reduce using rule 104 (operaciones -> NOT_EQUAL .)
    BITAND          reduce using rule 104 (operaciones -> NOT_EQUAL .)
    ARRAY           reduce using rule 104 (operaciones -> NOT_EQUAL .)
    LPAREN          reduce using rule 104 (operaciones -> NOT_EQUAL .)
    VEC             reduce using rule 104 (operaciones -> NOT_EQUAL .)


state 95

    (105) operaciones -> LESS_EQUAL .

    NUMBER          reduce using rule 105 (operaciones -> LESS_EQUAL .)
    FLOAT           reduce using rule 105 (operaciones -> LESS_EQUAL .)
    VARIABLE        reduce using rule 105 (operaciones -> LESS_EQUAL .)
    STRING          reduce using rule 105 (operaciones -> LESS_EQUAL .)
    TIMES           reduce using rule 105 (operaciones -> LESS_EQUAL .)
    BITAND          reduce using rule 105 (operaciones -> LESS_EQUAL .)
    ARRAY           reduce using rule 105 (operaciones -> LESS_EQUAL .)
    LPAREN          reduce using rule 105 (operaciones -> LESS_EQUAL .)
    VEC             reduce using rule 105 (operaciones -> LESS_EQUAL .)


state 96

    (106) operaciones -> GREATER_EQUAL .

    NUMBER          reduce using rule 106 (operaciones -> GREATER_EQUAL .)
    FLOAT           reduce using rule 106 (operaciones -> GREATER_EQUAL .)
    VARIABLE        reduce using rule 106 (operaciones -> GREATER_EQUAL .)
    STRING          reduce using rule 106 (operaciones -> GREATER_EQUAL .)
    TIMES           reduce using rule 106 (operaciones -> GREATER_EQUAL .)
    BITAND          reduce using rule 106 (operaciones -> GREATER_EQUAL .)
    ARRAY           reduce using rule 106 (operaciones -> GREATER_EQUAL .)
    LPAREN          reduce using rule 106 (operaciones -> GREATER_EQUAL .)
    VEC             reduce using rule 106 (operaciones -> GREATER_EQUAL .)


state 97

    (107) operaciones -> PLUS_EQUAL .

    NUMBER          reduce using rule 107 (operaciones -> PLUS_EQUAL .)
    FLOAT           reduce using rule 107 (operaciones -> PLUS_EQUAL .)
    VARIABLE        reduce using rule 107 (operaciones -> PLUS_EQUAL .)
    STRING          reduce using rule 107 (operaciones -> PLUS_EQUAL .)
    TIMES           reduce using rule 107 (operaciones -> PLUS_EQUAL .)
    BITAND          reduce using rule 107 (operaciones -> PLUS_EQUAL .)
    ARRAY           reduce using rule 107 (operaciones -> PLUS_EQUAL .)
    LPAREN          reduce using rule 107 (operaciones -> PLUS_EQUAL .)
    VEC             reduce using rule 107 (operaciones -> PLUS_EQUAL .)


state 98

    (170) opbasicas -> ARRAY DOT . LEN LPAREN RPAREN

    LEN             shift and go to state 162


state 99

    (173) opbasicas -> ARRAY L_BRACKET . operandos R_BRACKET
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 156
    FLOAT           shift and go to state 157
    VARIABLE        shift and go to state 158
    STRING          shift and go to state 159
    TIMES           shift and go to state 57
    BITAND          shift and go to state 120
    ARRAY           shift and go to state 52
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54

    operandos                      shift and go to state 163
    opbasicas                      shift and go to state 160

state 100

    (171) opbasicas -> BITAND VARIABLE . L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (114) operandos -> BITAND VARIABLE .

    L_BRACKET       shift and go to state 164
    COMMA           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    PLUS            reduce using rule 114 (operandos -> BITAND VARIABLE .)
    MINUS           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    TIMES           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    DIVIDE          reduce using rule 114 (operandos -> BITAND VARIABLE .)
    RDIAMOND        reduce using rule 114 (operandos -> BITAND VARIABLE .)
    LDIAMOND        reduce using rule 114 (operandos -> BITAND VARIABLE .)
    EQUAL_EQUAL     reduce using rule 114 (operandos -> BITAND VARIABLE .)
    NOT_EQUAL       reduce using rule 114 (operandos -> BITAND VARIABLE .)
    LESS_EQUAL      reduce using rule 114 (operandos -> BITAND VARIABLE .)
    GREATER_EQUAL   reduce using rule 114 (operandos -> BITAND VARIABLE .)
    PLUS_EQUAL      reduce using rule 114 (operandos -> BITAND VARIABLE .)


state 101

    (177) opbasicas -> VEC EXCLAMATION . L_BRACKET numeros R_BRACKET

    L_BRACKET       shift and go to state 165


state 102

    (139) declaracion_constante -> CONST VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> CONST VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> CONST VARIABLE . EQUAL expresion SEMICOLON
    (142) declaracion_constante -> CONST VARIABLE . SEMICOLON

    DOUBLE_POINT    shift and go to state 166
    EQUAL           shift and go to state 167
    SEMICOLON       shift and go to state 168


state 103

    (119) funciongenerica -> FN VARIABLE . LPAREN RPAREN LBRACKET program RBRACKET

    LPAREN          shift and go to state 169


state 104

    (120) funciongenerica -> FN MAIN . LPAREN RPAREN LBRACKET program RBRACKET

    LPAREN          shift and go to state 170


state 105

    (113) operandos -> TIMES VARIABLE .

    COMMA           reduce using rule 113 (operandos -> TIMES VARIABLE .)
    PLUS            reduce using rule 113 (operandos -> TIMES VARIABLE .)
    MINUS           reduce using rule 113 (operandos -> TIMES VARIABLE .)
    TIMES           reduce using rule 113 (operandos -> TIMES VARIABLE .)
    DIVIDE          reduce using rule 113 (operandos -> TIMES VARIABLE .)
    RDIAMOND        reduce using rule 113 (operandos -> TIMES VARIABLE .)
    LDIAMOND        reduce using rule 113 (operandos -> TIMES VARIABLE .)
    EQUAL_EQUAL     reduce using rule 113 (operandos -> TIMES VARIABLE .)
    NOT_EQUAL       reduce using rule 113 (operandos -> TIMES VARIABLE .)
    LESS_EQUAL      reduce using rule 113 (operandos -> TIMES VARIABLE .)
    GREATER_EQUAL   reduce using rule 113 (operandos -> TIMES VARIABLE .)
    PLUS_EQUAL      reduce using rule 113 (operandos -> TIMES VARIABLE .)
    RPAREN          reduce using rule 113 (operandos -> TIMES VARIABLE .)
    SEMICOLON       reduce using rule 113 (operandos -> TIMES VARIABLE .)
    PRINT           reduce using rule 113 (operandos -> TIMES VARIABLE .)
    RETURN          reduce using rule 113 (operandos -> TIMES VARIABLE .)
    NUMBER          reduce using rule 113 (operandos -> TIMES VARIABLE .)
    FLOAT           reduce using rule 113 (operandos -> TIMES VARIABLE .)
    STRING          reduce using rule 113 (operandos -> TIMES VARIABLE .)
    TRUE            reduce using rule 113 (operandos -> TIMES VARIABLE .)
    FALSE           reduce using rule 113 (operandos -> TIMES VARIABLE .)
    VARIABLE        reduce using rule 113 (operandos -> TIMES VARIABLE .)
    CONTINUE        reduce using rule 113 (operandos -> TIMES VARIABLE .)
    BREAK           reduce using rule 113 (operandos -> TIMES VARIABLE .)
    USE             reduce using rule 113 (operandos -> TIMES VARIABLE .)
    LET             reduce using rule 113 (operandos -> TIMES VARIABLE .)
    STRUCT          reduce using rule 113 (operandos -> TIMES VARIABLE .)
    FOR             reduce using rule 113 (operandos -> TIMES VARIABLE .)
    WHILE           reduce using rule 113 (operandos -> TIMES VARIABLE .)
    IF              reduce using rule 113 (operandos -> TIMES VARIABLE .)
    LOOP            reduce using rule 113 (operandos -> TIMES VARIABLE .)
    ARRAY           reduce using rule 113 (operandos -> TIMES VARIABLE .)
    BITAND          reduce using rule 113 (operandos -> TIMES VARIABLE .)
    LPAREN          reduce using rule 113 (operandos -> TIMES VARIABLE .)
    VEC             reduce using rule 113 (operandos -> TIMES VARIABLE .)
    CONST           reduce using rule 113 (operandos -> TIMES VARIABLE .)
    MUT             reduce using rule 113 (operandos -> TIMES VARIABLE .)
    FN              reduce using rule 113 (operandos -> TIMES VARIABLE .)
    $end            reduce using rule 113 (operandos -> TIMES VARIABLE .)
    LBRACKET        reduce using rule 113 (operandos -> TIMES VARIABLE .)
    RBRACKET        reduce using rule 113 (operandos -> TIMES VARIABLE .)
    R_BRACKET       reduce using rule 113 (operandos -> TIMES VARIABLE .)


state 106

    (5) item -> PRINT EXCLAMATION LPAREN . STRING RPAREN SEMICOLON
    (6) item -> PRINT EXCLAMATION LPAREN . STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> PRINT EXCLAMATION LPAREN . STRING COMMA vars RPAREN SEMICOLON

    STRING          shift and go to state 171


state 107

    (174) opbasicas -> LPAREN NUMBER DOT . DOT NUMBER RPAREN DOT REV LPAREN RPAREN

    DOT             shift and go to state 172


state 108

    (175) opbasicas -> STRING DOT TO_STRING . LPAREN RPAREN

    LPAREN          shift and go to state 173


state 109

    (13) item -> RETURN expresion SEMICOLON .

    PRINT           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    RETURN          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    NUMBER          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    FLOAT           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    STRING          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    TRUE            reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    FALSE           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    VARIABLE        reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    CONTINUE        reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    BREAK           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    USE             reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    LET             reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    STRUCT          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    FOR             reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    WHILE           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    IF              reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    LOOP            reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    ARRAY           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    BITAND          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    LPAREN          reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    VEC             reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    CONST           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    MUT             reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    FN              reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    TIMES           reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    $end            reduce using rule 13 (item -> RETURN expresion SEMICOLON .)
    RBRACKET        reduce using rule 13 (item -> RETURN expresion SEMICOLON .)


state 110

    (172) opbasicas -> VARIABLE DOT . ITER LPAREN RPAREN
    (178) opbasicas -> VARIABLE DOT . VARIABLE LPAREN RPAREN

    ITER            shift and go to state 174
    VARIABLE        shift and go to state 123


state 111

    (47) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> LET VARIABLE . EQUAL expresion SEMICOLON
    (51) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> LET VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> LET VARIABLE . SEMICOLON
    (58) definicionvariable -> LET VARIABLE . EQUAL expresion
    (61) definicionvariable -> LET VARIABLE . LPAREN VARIABLE RPAREN EQUAL llamarfuncion

    DOUBLE_POINT    shift and go to state 175
    EQUAL           shift and go to state 176
    SEMICOLON       shift and go to state 140
    LPAREN          shift and go to state 141


state 112

    (49) definicionvariable -> LET MUT . VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (52) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (54) definicionvariable -> LET MUT . VARIABLE DOUBLE_POINT tipo SEMICOLON
    (62) definicionvariable -> LET MUT . VARIABLE EQUAL llamadarandom

    VARIABLE        shift and go to state 177


state 113

    (130) llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT . VARIABLE LPAREN RPAREN SEMICOLON

    VARIABLE        shift and go to state 178


state 114

    (116) variables -> VARIABLE .
    (117) variables -> VARIABLE . COMMA variables
    (86) expresion -> VARIABLE .
    (110) operandos -> VARIABLE .
    (172) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (176) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (178) opbasicas -> VARIABLE . DOT VARIABLE LPAREN RPAREN
    (56) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (57) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 86 (expresion -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 86 (expresion -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 179
    RPAREN          reduce using rule 86 (expresion -> VARIABLE .)
    PLUS            reduce using rule 110 (operandos -> VARIABLE .)
    MINUS           reduce using rule 110 (operandos -> VARIABLE .)
    TIMES           reduce using rule 110 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 110 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 110 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 110 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 110 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    DOT             shift and go to state 110
    LPAREN          shift and go to state 69
    EQUAL           shift and go to state 70

  ! RPAREN          [ reduce using rule 116 (variables -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 86 (expresion -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 110 (operandos -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 110 (operandos -> VARIABLE .) ]


state 115

    (176) opbasicas -> VARIABLE LPAREN variables . RPAREN

    RPAREN          shift and go to state 180


state 116

    (92) llamarfuncion -> VARIABLE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 181


state 117

    (93) llamarfuncion -> VARIABLE LPAREN expresion . RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE LPAREN expresion . COMMA expresion RPAREN SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          shift and go to state 182
    COMMA           shift and go to state 183

  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]
  ! COMMA           [ reduce using rule 87 (expresion -> expresion .) ]


state 118

    (95) llamarfuncion -> VARIABLE LPAREN operandos . RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE LPAREN operandos . RPAREN
    (115) operandos -> operandos . COMMA operandos
    (179) ops -> operandos . operaciones operandos
    (180) ops -> operandos . operaciones ops
    (97) operaciones -> . PLUS
    (98) operaciones -> . MINUS
    (99) operaciones -> . TIMES
    (100) operaciones -> . DIVIDE
    (101) operaciones -> . RDIAMOND
    (102) operaciones -> . LDIAMOND
    (103) operaciones -> . EQUAL_EQUAL
    (104) operaciones -> . NOT_EQUAL
    (105) operaciones -> . LESS_EQUAL
    (106) operaciones -> . GREATER_EQUAL
    (107) operaciones -> . PLUS_EQUAL

    RPAREN          shift and go to state 184
    COMMA           shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    RDIAMOND        shift and go to state 91
    LDIAMOND        shift and go to state 92
    EQUAL_EQUAL     shift and go to state 93
    NOT_EQUAL       shift and go to state 94
    LESS_EQUAL      shift and go to state 95
    GREATER_EQUAL   shift and go to state 96
    PLUS_EQUAL      shift and go to state 97

    operaciones                    shift and go to state 85

state 119

    (83) expresion -> STRING .
    (111) operandos -> STRING .
    (175) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 83 (expresion -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 83 (expresion -> STRING .)
    RPAREN          reduce using rule 83 (expresion -> STRING .)
    COMMA           reduce using rule 83 (expresion -> STRING .)
    PLUS            reduce using rule 111 (operandos -> STRING .)
    MINUS           reduce using rule 111 (operandos -> STRING .)
    TIMES           reduce using rule 111 (operandos -> STRING .)
    DIVIDE          reduce using rule 111 (operandos -> STRING .)
    RDIAMOND        reduce using rule 111 (operandos -> STRING .)
    LDIAMOND        reduce using rule 111 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 111 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 111 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 111 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 111 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 111 (operandos -> STRING .)
    DOT             shift and go to state 61

  ! RPAREN          [ reduce using rule 111 (operandos -> STRING .) ]
  ! COMMA           [ reduce using rule 111 (operandos -> STRING .) ]


state 120

    (114) operandos -> BITAND . VARIABLE
    (171) opbasicas -> BITAND . VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET

    VARIABLE        shift and go to state 185


state 121

    (56) definicionvariable -> VARIABLE EQUAL expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 186

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 122

    (57) definicionvariable -> VARIABLE EQUAL STRING . SEMICOLON
    (83) expresion -> STRING .
    (175) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN
    (111) operandos -> STRING .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 187
    DOT             shift and go to state 61
    COMMA           reduce using rule 111 (operandos -> STRING .)
    PLUS            reduce using rule 111 (operandos -> STRING .)
    MINUS           reduce using rule 111 (operandos -> STRING .)
    TIMES           reduce using rule 111 (operandos -> STRING .)
    DIVIDE          reduce using rule 111 (operandos -> STRING .)
    RDIAMOND        reduce using rule 111 (operandos -> STRING .)
    LDIAMOND        reduce using rule 111 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 111 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 111 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 111 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 111 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 111 (operandos -> STRING .)

  ! SEMICOLON       [ reduce using rule 83 (expresion -> STRING .) ]


state 123

    (178) opbasicas -> VARIABLE DOT VARIABLE . LPAREN RPAREN

    LPAREN          shift and go to state 188


state 124

    (172) opbasicas -> VARIABLE DOT ITER . LPAREN RPAREN
    (169) funcionesvector -> VARIABLE DOT ITER . LPAREN RPAREN SEMICOLON
    (44) funcioneshashmap -> VARIABLE DOT ITER . LPAREN RPAREN
    (128) funcionesarray -> VARIABLE DOT ITER . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 189


state 125

    (159) funcionesvector -> VARIABLE DOT PUSH . LPAREN expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 190


state 126

    (160) funcionesvector -> VARIABLE DOT POP . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 191


state 127

    (161) funcionesvector -> VARIABLE DOT LEN . LPAREN RPAREN SEMICOLON
    (41) funcioneshashmap -> VARIABLE DOT LEN . LPAREN RPAREN
    (125) funcionesarray -> VARIABLE DOT LEN . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 192


state 128

    (162) funcionesvector -> VARIABLE DOT IS_EMPTY . LPAREN RPAREN SEMICOLON
    (42) funcioneshashmap -> VARIABLE DOT IS_EMPTY . LPAREN RPAREN
    (126) funcionesarray -> VARIABLE DOT IS_EMPTY . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 193


state 129

    (163) funcionesvector -> VARIABLE DOT GET . LPAREN NUMBER RPAREN SEMICOLON
    (40) funcioneshashmap -> VARIABLE DOT GET . LPAREN expresion RPAREN

    LPAREN          shift and go to state 194


state 130

    (164) funcionesvector -> VARIABLE DOT SET . LPAREN NUMBER COMMA expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 195


state 131

    (165) funcionesvector -> VARIABLE DOT REMOVE . LPAREN expresion RPAREN SEMICOLON
    (39) funcioneshashmap -> VARIABLE DOT REMOVE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 196


state 132

    (166) funcionesvector -> VARIABLE DOT CLEAR . LPAREN RPAREN SEMICOLON
    (43) funcioneshashmap -> VARIABLE DOT CLEAR . LPAREN RPAREN
    (127) funcionesarray -> VARIABLE DOT CLEAR . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 197


state 133

    (167) funcionesvector -> VARIABLE DOT SWAP . LPAREN expresion COMMA expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 198


state 134

    (168) funcionesvector -> VARIABLE DOT REVERSE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 199


state 135

    (38) funcioneshashmap -> VARIABLE DOT INSERT . LPAREN expresion COMMA expresion RPAREN

    LPAREN          shift and go to state 200


state 136

    (137) break -> BREAK expresion SEMICOLON .

    PRINT           reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    RETURN          reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    NUMBER          reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    FLOAT           reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    STRING          reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    TRUE            reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    FALSE           reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    VARIABLE        reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    CONTINUE        reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    BREAK           reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    USE             reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    LET             reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    STRUCT          reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    FOR             reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    WHILE           reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    IF              reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    LOOP            reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    ARRAY           reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    BITAND          reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    LPAREN          reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    VEC             reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    CONST           reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    MUT             reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    FN              reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    TIMES           reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    $end            reduce using rule 137 (break -> BREAK expresion SEMICOLON .)
    RBRACKET        reduce using rule 137 (break -> BREAK expresion SEMICOLON .)


state 137

    (129) import -> USE VARIABLE DOUBLE_POINT . DOUBLE_POINT VARIABLE SEMICOLON

    DOUBLE_POINT    shift and go to state 201


state 138

    (47) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (151) vector -> LET VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> LET VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> LET VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    VEC             shift and go to state 204
    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202

    tipo                           shift and go to state 203

state 139

    (48) definicionvariable -> LET VARIABLE EQUAL . expresion SEMICOLON
    (58) definicionvariable -> LET VARIABLE EQUAL . expresion
    (34) list -> LET VARIABLE EQUAL . L_BRACKET numeros R_BRACKET SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    L_BRACKET       shift and go to state 219
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 218
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 140

    (55) definicionvariable -> LET VARIABLE SEMICOLON .

    PRINT           reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    RETURN          reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    STRING          reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    TRUE            reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    FALSE           reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    BREAK           reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    USE             reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    LET             reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    FOR             reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    WHILE           reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    IF              reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    LOOP            reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    BITAND          reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    VEC             reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    CONST           reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    MUT             reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    FN              reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    TIMES           reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    $end            reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    SEMICOLON       reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    LBRACKET        reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    RPAREN          reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    COMMA           reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)
    RBRACKET        reduce using rule 55 (definicionvariable -> LET VARIABLE SEMICOLON .)


state 141

    (61) definicionvariable -> LET VARIABLE LPAREN . VARIABLE RPAREN EQUAL llamarfuncion

    VARIABLE        shift and go to state 220


state 142

    (49) definicionvariable -> LET MUT VARIABLE . EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (54) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (62) definicionvariable -> LET MUT VARIABLE . EQUAL llamadarandom
    (37) hashmap -> LET MUT VARIABLE . DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (122) array -> LET MUT VARIABLE . DOUBLE_POINT array SEMICOLON
    (153) vector -> LET MUT VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> LET MUT VARIABLE . DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON

    EQUAL           shift and go to state 221
    DOUBLE_POINT    shift and go to state 222


state 143

    (121) array -> LET MUT ARRAY . DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    DOUBLE_POINT    shift and go to state 223


state 144

    (143) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 224

state 145

    (145) declaracion_mutable -> MUT VARIABLE EQUAL . expresion SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 226
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 146

    (146) declaracion_mutable -> MUT VARIABLE SEMICOLON .

    PRINT           reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    RETURN          reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    STRING          reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    TRUE            reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    FALSE           reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    BREAK           reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    USE             reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LET             reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    FOR             reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    WHILE           reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    IF              reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LOOP            reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    BITAND          reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    VEC             reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    CONST           reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    MUT             reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    FN              reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    TIMES           reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    $end            reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    SEMICOLON       reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    LBRACKET        reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    RPAREN          reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    COMMA           reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)
    RBRACKET        reduce using rule 146 (declaracion_mutable -> MUT VARIABLE SEMICOLON .)


state 147

    (45) definicionestructura -> STRUCT VARIABLE LBRACKET . item RBRACKET SEMICOLON
    (46) definicionestructura -> STRUCT VARIABLE LBRACKET . RBRACKET SEMICOLON
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 228
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    item                           shift and go to state 227
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 148

    (20) for -> FOR VARIABLE IN . VARIABLE LBRACKET program RBRACKET
    (21) for -> FOR VARIABLE IN . VARIABLE LBRACKET RBRACKET
    (22) for -> FOR VARIABLE IN . NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> FOR VARIABLE IN . NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> FOR VARIABLE IN . expresion LBRACKET program RBRACKET
    (25) for -> FOR VARIABLE IN . expresion LBRACKET RBRACKET
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    VARIABLE        shift and go to state 229
    NUMBER          shift and go to state 230
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 231
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 149

    (123) while -> WHILE LPAREN expresion . RPAREN LBRACKET program RBRACKET
    (87) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 232

  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]


state 150

    (174) opbasicas -> LPAREN NUMBER . DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (81) expresion -> NUMBER .
    (108) operandos -> NUMBER .

    DOT             shift and go to state 107
    RPAREN          reduce using rule 81 (expresion -> NUMBER .)
    COMMA           reduce using rule 108 (operandos -> NUMBER .)
    PLUS            reduce using rule 108 (operandos -> NUMBER .)
    MINUS           reduce using rule 108 (operandos -> NUMBER .)
    TIMES           reduce using rule 108 (operandos -> NUMBER .)
    DIVIDE          reduce using rule 108 (operandos -> NUMBER .)
    RDIAMOND        reduce using rule 108 (operandos -> NUMBER .)
    LDIAMOND        reduce using rule 108 (operandos -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> NUMBER .)
    NOT_EQUAL       reduce using rule 108 (operandos -> NUMBER .)
    LESS_EQUAL      reduce using rule 108 (operandos -> NUMBER .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> NUMBER .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> NUMBER .)


state 151

    (124) while -> WHILE expresion LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    expresion                      shift and go to state 8
    program                        shift and go to state 233
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 152

    (147) if -> IF expresion LBRACKET . program RBRACKET
    (148) if -> IF expresion LBRACKET . program RBRACKET ELSE
    (149) if -> IF expresion LBRACKET . program RBRACKET ELSE LBRACKET program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    expresion                      shift and go to state 8
    program                        shift and go to state 234
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 153

    (150) loop -> LOOP LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 235
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 154

    (179) ops -> operandos operaciones operandos .
    (115) operandos -> operandos . COMMA operandos
    (179) ops -> operandos . operaciones operandos
    (180) ops -> operandos . operaciones ops
    (97) operaciones -> . PLUS
    (98) operaciones -> . MINUS
    (99) operaciones -> . TIMES
    (100) operaciones -> . DIVIDE
    (101) operaciones -> . RDIAMOND
    (102) operaciones -> . LDIAMOND
    (103) operaciones -> . EQUAL_EQUAL
    (104) operaciones -> . NOT_EQUAL
    (105) operaciones -> . LESS_EQUAL
    (106) operaciones -> . GREATER_EQUAL
    (107) operaciones -> . PLUS_EQUAL

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMICOLON       reduce using rule 179 (ops -> operandos operaciones operandos .)
    PRINT           reduce using rule 179 (ops -> operandos operaciones operandos .)
    RETURN          reduce using rule 179 (ops -> operandos operaciones operandos .)
    NUMBER          reduce using rule 179 (ops -> operandos operaciones operandos .)
    FLOAT           reduce using rule 179 (ops -> operandos operaciones operandos .)
    STRING          reduce using rule 179 (ops -> operandos operaciones operandos .)
    TRUE            reduce using rule 179 (ops -> operandos operaciones operandos .)
    FALSE           reduce using rule 179 (ops -> operandos operaciones operandos .)
    VARIABLE        reduce using rule 179 (ops -> operandos operaciones operandos .)
    CONTINUE        reduce using rule 179 (ops -> operandos operaciones operandos .)
    BREAK           reduce using rule 179 (ops -> operandos operaciones operandos .)
    USE             reduce using rule 179 (ops -> operandos operaciones operandos .)
    LET             reduce using rule 179 (ops -> operandos operaciones operandos .)
    STRUCT          reduce using rule 179 (ops -> operandos operaciones operandos .)
    FOR             reduce using rule 179 (ops -> operandos operaciones operandos .)
    WHILE           reduce using rule 179 (ops -> operandos operaciones operandos .)
    IF              reduce using rule 179 (ops -> operandos operaciones operandos .)
    LOOP            reduce using rule 179 (ops -> operandos operaciones operandos .)
    ARRAY           reduce using rule 179 (ops -> operandos operaciones operandos .)
    BITAND          reduce using rule 179 (ops -> operandos operaciones operandos .)
    LPAREN          reduce using rule 179 (ops -> operandos operaciones operandos .)
    VEC             reduce using rule 179 (ops -> operandos operaciones operandos .)
    CONST           reduce using rule 179 (ops -> operandos operaciones operandos .)
    MUT             reduce using rule 179 (ops -> operandos operaciones operandos .)
    FN              reduce using rule 179 (ops -> operandos operaciones operandos .)
    $end            reduce using rule 179 (ops -> operandos operaciones operandos .)
    LBRACKET        reduce using rule 179 (ops -> operandos operaciones operandos .)
    RPAREN          reduce using rule 179 (ops -> operandos operaciones operandos .)
    RBRACKET        reduce using rule 179 (ops -> operandos operaciones operandos .)
    COMMA           shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    RDIAMOND        shift and go to state 91
    LDIAMOND        shift and go to state 92
    EQUAL_EQUAL     shift and go to state 93
    NOT_EQUAL       shift and go to state 94
    LESS_EQUAL      shift and go to state 95
    GREATER_EQUAL   shift and go to state 96
    PLUS_EQUAL      shift and go to state 97

  ! TIMES           [ reduce using rule 179 (ops -> operandos operaciones operandos .) ]
  ! COMMA           [ reduce using rule 179 (ops -> operandos operaciones operandos .) ]

    operaciones                    shift and go to state 85

state 155

    (180) ops -> operandos operaciones ops .

    SEMICOLON       reduce using rule 180 (ops -> operandos operaciones ops .)
    PRINT           reduce using rule 180 (ops -> operandos operaciones ops .)
    RETURN          reduce using rule 180 (ops -> operandos operaciones ops .)
    NUMBER          reduce using rule 180 (ops -> operandos operaciones ops .)
    FLOAT           reduce using rule 180 (ops -> operandos operaciones ops .)
    STRING          reduce using rule 180 (ops -> operandos operaciones ops .)
    TRUE            reduce using rule 180 (ops -> operandos operaciones ops .)
    FALSE           reduce using rule 180 (ops -> operandos operaciones ops .)
    VARIABLE        reduce using rule 180 (ops -> operandos operaciones ops .)
    CONTINUE        reduce using rule 180 (ops -> operandos operaciones ops .)
    BREAK           reduce using rule 180 (ops -> operandos operaciones ops .)
    USE             reduce using rule 180 (ops -> operandos operaciones ops .)
    LET             reduce using rule 180 (ops -> operandos operaciones ops .)
    STRUCT          reduce using rule 180 (ops -> operandos operaciones ops .)
    FOR             reduce using rule 180 (ops -> operandos operaciones ops .)
    WHILE           reduce using rule 180 (ops -> operandos operaciones ops .)
    IF              reduce using rule 180 (ops -> operandos operaciones ops .)
    LOOP            reduce using rule 180 (ops -> operandos operaciones ops .)
    ARRAY           reduce using rule 180 (ops -> operandos operaciones ops .)
    BITAND          reduce using rule 180 (ops -> operandos operaciones ops .)
    LPAREN          reduce using rule 180 (ops -> operandos operaciones ops .)
    VEC             reduce using rule 180 (ops -> operandos operaciones ops .)
    CONST           reduce using rule 180 (ops -> operandos operaciones ops .)
    MUT             reduce using rule 180 (ops -> operandos operaciones ops .)
    FN              reduce using rule 180 (ops -> operandos operaciones ops .)
    TIMES           reduce using rule 180 (ops -> operandos operaciones ops .)
    $end            reduce using rule 180 (ops -> operandos operaciones ops .)
    LBRACKET        reduce using rule 180 (ops -> operandos operaciones ops .)
    RPAREN          reduce using rule 180 (ops -> operandos operaciones ops .)
    COMMA           reduce using rule 180 (ops -> operandos operaciones ops .)
    RBRACKET        reduce using rule 180 (ops -> operandos operaciones ops .)


state 156

    (108) operandos -> NUMBER .

    COMMA           reduce using rule 108 (operandos -> NUMBER .)
    PLUS            reduce using rule 108 (operandos -> NUMBER .)
    MINUS           reduce using rule 108 (operandos -> NUMBER .)
    TIMES           reduce using rule 108 (operandos -> NUMBER .)
    DIVIDE          reduce using rule 108 (operandos -> NUMBER .)
    RDIAMOND        reduce using rule 108 (operandos -> NUMBER .)
    LDIAMOND        reduce using rule 108 (operandos -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> NUMBER .)
    NOT_EQUAL       reduce using rule 108 (operandos -> NUMBER .)
    LESS_EQUAL      reduce using rule 108 (operandos -> NUMBER .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> NUMBER .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> NUMBER .)
    SEMICOLON       reduce using rule 108 (operandos -> NUMBER .)
    PRINT           reduce using rule 108 (operandos -> NUMBER .)
    RETURN          reduce using rule 108 (operandos -> NUMBER .)
    NUMBER          reduce using rule 108 (operandos -> NUMBER .)
    FLOAT           reduce using rule 108 (operandos -> NUMBER .)
    STRING          reduce using rule 108 (operandos -> NUMBER .)
    TRUE            reduce using rule 108 (operandos -> NUMBER .)
    FALSE           reduce using rule 108 (operandos -> NUMBER .)
    VARIABLE        reduce using rule 108 (operandos -> NUMBER .)
    CONTINUE        reduce using rule 108 (operandos -> NUMBER .)
    BREAK           reduce using rule 108 (operandos -> NUMBER .)
    USE             reduce using rule 108 (operandos -> NUMBER .)
    LET             reduce using rule 108 (operandos -> NUMBER .)
    STRUCT          reduce using rule 108 (operandos -> NUMBER .)
    FOR             reduce using rule 108 (operandos -> NUMBER .)
    WHILE           reduce using rule 108 (operandos -> NUMBER .)
    IF              reduce using rule 108 (operandos -> NUMBER .)
    LOOP            reduce using rule 108 (operandos -> NUMBER .)
    ARRAY           reduce using rule 108 (operandos -> NUMBER .)
    BITAND          reduce using rule 108 (operandos -> NUMBER .)
    LPAREN          reduce using rule 108 (operandos -> NUMBER .)
    VEC             reduce using rule 108 (operandos -> NUMBER .)
    CONST           reduce using rule 108 (operandos -> NUMBER .)
    MUT             reduce using rule 108 (operandos -> NUMBER .)
    FN              reduce using rule 108 (operandos -> NUMBER .)
    $end            reduce using rule 108 (operandos -> NUMBER .)
    LBRACKET        reduce using rule 108 (operandos -> NUMBER .)
    RPAREN          reduce using rule 108 (operandos -> NUMBER .)
    RBRACKET        reduce using rule 108 (operandos -> NUMBER .)
    R_BRACKET       reduce using rule 108 (operandos -> NUMBER .)


state 157

    (109) operandos -> FLOAT .

    COMMA           reduce using rule 109 (operandos -> FLOAT .)
    PLUS            reduce using rule 109 (operandos -> FLOAT .)
    MINUS           reduce using rule 109 (operandos -> FLOAT .)
    TIMES           reduce using rule 109 (operandos -> FLOAT .)
    DIVIDE          reduce using rule 109 (operandos -> FLOAT .)
    RDIAMOND        reduce using rule 109 (operandos -> FLOAT .)
    LDIAMOND        reduce using rule 109 (operandos -> FLOAT .)
    EQUAL_EQUAL     reduce using rule 109 (operandos -> FLOAT .)
    NOT_EQUAL       reduce using rule 109 (operandos -> FLOAT .)
    LESS_EQUAL      reduce using rule 109 (operandos -> FLOAT .)
    GREATER_EQUAL   reduce using rule 109 (operandos -> FLOAT .)
    PLUS_EQUAL      reduce using rule 109 (operandos -> FLOAT .)
    SEMICOLON       reduce using rule 109 (operandos -> FLOAT .)
    PRINT           reduce using rule 109 (operandos -> FLOAT .)
    RETURN          reduce using rule 109 (operandos -> FLOAT .)
    NUMBER          reduce using rule 109 (operandos -> FLOAT .)
    FLOAT           reduce using rule 109 (operandos -> FLOAT .)
    STRING          reduce using rule 109 (operandos -> FLOAT .)
    TRUE            reduce using rule 109 (operandos -> FLOAT .)
    FALSE           reduce using rule 109 (operandos -> FLOAT .)
    VARIABLE        reduce using rule 109 (operandos -> FLOAT .)
    CONTINUE        reduce using rule 109 (operandos -> FLOAT .)
    BREAK           reduce using rule 109 (operandos -> FLOAT .)
    USE             reduce using rule 109 (operandos -> FLOAT .)
    LET             reduce using rule 109 (operandos -> FLOAT .)
    STRUCT          reduce using rule 109 (operandos -> FLOAT .)
    FOR             reduce using rule 109 (operandos -> FLOAT .)
    WHILE           reduce using rule 109 (operandos -> FLOAT .)
    IF              reduce using rule 109 (operandos -> FLOAT .)
    LOOP            reduce using rule 109 (operandos -> FLOAT .)
    ARRAY           reduce using rule 109 (operandos -> FLOAT .)
    BITAND          reduce using rule 109 (operandos -> FLOAT .)
    LPAREN          reduce using rule 109 (operandos -> FLOAT .)
    VEC             reduce using rule 109 (operandos -> FLOAT .)
    CONST           reduce using rule 109 (operandos -> FLOAT .)
    MUT             reduce using rule 109 (operandos -> FLOAT .)
    FN              reduce using rule 109 (operandos -> FLOAT .)
    $end            reduce using rule 109 (operandos -> FLOAT .)
    LBRACKET        reduce using rule 109 (operandos -> FLOAT .)
    RPAREN          reduce using rule 109 (operandos -> FLOAT .)
    RBRACKET        reduce using rule 109 (operandos -> FLOAT .)
    R_BRACKET       reduce using rule 109 (operandos -> FLOAT .)


state 158

    (110) operandos -> VARIABLE .
    (172) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (176) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (178) opbasicas -> VARIABLE . DOT VARIABLE LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    COMMA           reduce using rule 110 (operandos -> VARIABLE .)
    PLUS            reduce using rule 110 (operandos -> VARIABLE .)
    MINUS           reduce using rule 110 (operandos -> VARIABLE .)
    TIMES           reduce using rule 110 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 110 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 110 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 110 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 110 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    SEMICOLON       reduce using rule 110 (operandos -> VARIABLE .)
    PRINT           reduce using rule 110 (operandos -> VARIABLE .)
    RETURN          reduce using rule 110 (operandos -> VARIABLE .)
    NUMBER          reduce using rule 110 (operandos -> VARIABLE .)
    FLOAT           reduce using rule 110 (operandos -> VARIABLE .)
    STRING          reduce using rule 110 (operandos -> VARIABLE .)
    TRUE            reduce using rule 110 (operandos -> VARIABLE .)
    FALSE           reduce using rule 110 (operandos -> VARIABLE .)
    VARIABLE        reduce using rule 110 (operandos -> VARIABLE .)
    CONTINUE        reduce using rule 110 (operandos -> VARIABLE .)
    BREAK           reduce using rule 110 (operandos -> VARIABLE .)
    USE             reduce using rule 110 (operandos -> VARIABLE .)
    LET             reduce using rule 110 (operandos -> VARIABLE .)
    STRUCT          reduce using rule 110 (operandos -> VARIABLE .)
    FOR             reduce using rule 110 (operandos -> VARIABLE .)
    WHILE           reduce using rule 110 (operandos -> VARIABLE .)
    IF              reduce using rule 110 (operandos -> VARIABLE .)
    LOOP            reduce using rule 110 (operandos -> VARIABLE .)
    ARRAY           reduce using rule 110 (operandos -> VARIABLE .)
    BITAND          reduce using rule 110 (operandos -> VARIABLE .)
    VEC             reduce using rule 110 (operandos -> VARIABLE .)
    CONST           reduce using rule 110 (operandos -> VARIABLE .)
    MUT             reduce using rule 110 (operandos -> VARIABLE .)
    FN              reduce using rule 110 (operandos -> VARIABLE .)
    $end            reduce using rule 110 (operandos -> VARIABLE .)
    LBRACKET        reduce using rule 110 (operandos -> VARIABLE .)
    RPAREN          reduce using rule 110 (operandos -> VARIABLE .)
    RBRACKET        reduce using rule 110 (operandos -> VARIABLE .)
    R_BRACKET       reduce using rule 110 (operandos -> VARIABLE .)
    DOT             shift and go to state 110
    LPAREN          shift and go to state 236

  ! LPAREN          [ reduce using rule 110 (operandos -> VARIABLE .) ]


state 159

    (111) operandos -> STRING .
    (175) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN

    COMMA           reduce using rule 111 (operandos -> STRING .)
    PLUS            reduce using rule 111 (operandos -> STRING .)
    MINUS           reduce using rule 111 (operandos -> STRING .)
    TIMES           reduce using rule 111 (operandos -> STRING .)
    DIVIDE          reduce using rule 111 (operandos -> STRING .)
    RDIAMOND        reduce using rule 111 (operandos -> STRING .)
    LDIAMOND        reduce using rule 111 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 111 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 111 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 111 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 111 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 111 (operandos -> STRING .)
    SEMICOLON       reduce using rule 111 (operandos -> STRING .)
    PRINT           reduce using rule 111 (operandos -> STRING .)
    RETURN          reduce using rule 111 (operandos -> STRING .)
    NUMBER          reduce using rule 111 (operandos -> STRING .)
    FLOAT           reduce using rule 111 (operandos -> STRING .)
    STRING          reduce using rule 111 (operandos -> STRING .)
    TRUE            reduce using rule 111 (operandos -> STRING .)
    FALSE           reduce using rule 111 (operandos -> STRING .)
    VARIABLE        reduce using rule 111 (operandos -> STRING .)
    CONTINUE        reduce using rule 111 (operandos -> STRING .)
    BREAK           reduce using rule 111 (operandos -> STRING .)
    USE             reduce using rule 111 (operandos -> STRING .)
    LET             reduce using rule 111 (operandos -> STRING .)
    STRUCT          reduce using rule 111 (operandos -> STRING .)
    FOR             reduce using rule 111 (operandos -> STRING .)
    WHILE           reduce using rule 111 (operandos -> STRING .)
    IF              reduce using rule 111 (operandos -> STRING .)
    LOOP            reduce using rule 111 (operandos -> STRING .)
    ARRAY           reduce using rule 111 (operandos -> STRING .)
    BITAND          reduce using rule 111 (operandos -> STRING .)
    LPAREN          reduce using rule 111 (operandos -> STRING .)
    VEC             reduce using rule 111 (operandos -> STRING .)
    CONST           reduce using rule 111 (operandos -> STRING .)
    MUT             reduce using rule 111 (operandos -> STRING .)
    FN              reduce using rule 111 (operandos -> STRING .)
    $end            reduce using rule 111 (operandos -> STRING .)
    LBRACKET        reduce using rule 111 (operandos -> STRING .)
    RPAREN          reduce using rule 111 (operandos -> STRING .)
    RBRACKET        reduce using rule 111 (operandos -> STRING .)
    R_BRACKET       reduce using rule 111 (operandos -> STRING .)
    DOT             shift and go to state 61


state 160

    (112) operandos -> opbasicas .

    COMMA           reduce using rule 112 (operandos -> opbasicas .)
    PLUS            reduce using rule 112 (operandos -> opbasicas .)
    MINUS           reduce using rule 112 (operandos -> opbasicas .)
    TIMES           reduce using rule 112 (operandos -> opbasicas .)
    DIVIDE          reduce using rule 112 (operandos -> opbasicas .)
    RDIAMOND        reduce using rule 112 (operandos -> opbasicas .)
    LDIAMOND        reduce using rule 112 (operandos -> opbasicas .)
    EQUAL_EQUAL     reduce using rule 112 (operandos -> opbasicas .)
    NOT_EQUAL       reduce using rule 112 (operandos -> opbasicas .)
    LESS_EQUAL      reduce using rule 112 (operandos -> opbasicas .)
    GREATER_EQUAL   reduce using rule 112 (operandos -> opbasicas .)
    PLUS_EQUAL      reduce using rule 112 (operandos -> opbasicas .)
    SEMICOLON       reduce using rule 112 (operandos -> opbasicas .)
    PRINT           reduce using rule 112 (operandos -> opbasicas .)
    RETURN          reduce using rule 112 (operandos -> opbasicas .)
    NUMBER          reduce using rule 112 (operandos -> opbasicas .)
    FLOAT           reduce using rule 112 (operandos -> opbasicas .)
    STRING          reduce using rule 112 (operandos -> opbasicas .)
    TRUE            reduce using rule 112 (operandos -> opbasicas .)
    FALSE           reduce using rule 112 (operandos -> opbasicas .)
    VARIABLE        reduce using rule 112 (operandos -> opbasicas .)
    CONTINUE        reduce using rule 112 (operandos -> opbasicas .)
    BREAK           reduce using rule 112 (operandos -> opbasicas .)
    USE             reduce using rule 112 (operandos -> opbasicas .)
    LET             reduce using rule 112 (operandos -> opbasicas .)
    STRUCT          reduce using rule 112 (operandos -> opbasicas .)
    FOR             reduce using rule 112 (operandos -> opbasicas .)
    WHILE           reduce using rule 112 (operandos -> opbasicas .)
    IF              reduce using rule 112 (operandos -> opbasicas .)
    LOOP            reduce using rule 112 (operandos -> opbasicas .)
    ARRAY           reduce using rule 112 (operandos -> opbasicas .)
    BITAND          reduce using rule 112 (operandos -> opbasicas .)
    LPAREN          reduce using rule 112 (operandos -> opbasicas .)
    VEC             reduce using rule 112 (operandos -> opbasicas .)
    CONST           reduce using rule 112 (operandos -> opbasicas .)
    MUT             reduce using rule 112 (operandos -> opbasicas .)
    FN              reduce using rule 112 (operandos -> opbasicas .)
    $end            reduce using rule 112 (operandos -> opbasicas .)
    LBRACKET        reduce using rule 112 (operandos -> opbasicas .)
    RPAREN          reduce using rule 112 (operandos -> opbasicas .)
    RBRACKET        reduce using rule 112 (operandos -> opbasicas .)
    R_BRACKET       reduce using rule 112 (operandos -> opbasicas .)


state 161

    (115) operandos -> operandos COMMA operandos .
    (115) operandos -> operandos . COMMA operandos

  ! shift/reduce conflict for COMMA resolved as shift
    PLUS            reduce using rule 115 (operandos -> operandos COMMA operandos .)
    MINUS           reduce using rule 115 (operandos -> operandos COMMA operandos .)
    TIMES           reduce using rule 115 (operandos -> operandos COMMA operandos .)
    DIVIDE          reduce using rule 115 (operandos -> operandos COMMA operandos .)
    RDIAMOND        reduce using rule 115 (operandos -> operandos COMMA operandos .)
    LDIAMOND        reduce using rule 115 (operandos -> operandos COMMA operandos .)
    EQUAL_EQUAL     reduce using rule 115 (operandos -> operandos COMMA operandos .)
    NOT_EQUAL       reduce using rule 115 (operandos -> operandos COMMA operandos .)
    LESS_EQUAL      reduce using rule 115 (operandos -> operandos COMMA operandos .)
    GREATER_EQUAL   reduce using rule 115 (operandos -> operandos COMMA operandos .)
    PLUS_EQUAL      reduce using rule 115 (operandos -> operandos COMMA operandos .)
    RPAREN          reduce using rule 115 (operandos -> operandos COMMA operandos .)
    SEMICOLON       reduce using rule 115 (operandos -> operandos COMMA operandos .)
    PRINT           reduce using rule 115 (operandos -> operandos COMMA operandos .)
    RETURN          reduce using rule 115 (operandos -> operandos COMMA operandos .)
    NUMBER          reduce using rule 115 (operandos -> operandos COMMA operandos .)
    FLOAT           reduce using rule 115 (operandos -> operandos COMMA operandos .)
    STRING          reduce using rule 115 (operandos -> operandos COMMA operandos .)
    TRUE            reduce using rule 115 (operandos -> operandos COMMA operandos .)
    FALSE           reduce using rule 115 (operandos -> operandos COMMA operandos .)
    VARIABLE        reduce using rule 115 (operandos -> operandos COMMA operandos .)
    CONTINUE        reduce using rule 115 (operandos -> operandos COMMA operandos .)
    BREAK           reduce using rule 115 (operandos -> operandos COMMA operandos .)
    USE             reduce using rule 115 (operandos -> operandos COMMA operandos .)
    LET             reduce using rule 115 (operandos -> operandos COMMA operandos .)
    STRUCT          reduce using rule 115 (operandos -> operandos COMMA operandos .)
    FOR             reduce using rule 115 (operandos -> operandos COMMA operandos .)
    WHILE           reduce using rule 115 (operandos -> operandos COMMA operandos .)
    IF              reduce using rule 115 (operandos -> operandos COMMA operandos .)
    LOOP            reduce using rule 115 (operandos -> operandos COMMA operandos .)
    ARRAY           reduce using rule 115 (operandos -> operandos COMMA operandos .)
    BITAND          reduce using rule 115 (operandos -> operandos COMMA operandos .)
    LPAREN          reduce using rule 115 (operandos -> operandos COMMA operandos .)
    VEC             reduce using rule 115 (operandos -> operandos COMMA operandos .)
    CONST           reduce using rule 115 (operandos -> operandos COMMA operandos .)
    MUT             reduce using rule 115 (operandos -> operandos COMMA operandos .)
    FN              reduce using rule 115 (operandos -> operandos COMMA operandos .)
    $end            reduce using rule 115 (operandos -> operandos COMMA operandos .)
    LBRACKET        reduce using rule 115 (operandos -> operandos COMMA operandos .)
    RBRACKET        reduce using rule 115 (operandos -> operandos COMMA operandos .)
    R_BRACKET       reduce using rule 115 (operandos -> operandos COMMA operandos .)
    COMMA           shift and go to state 86

  ! COMMA           [ reduce using rule 115 (operandos -> operandos COMMA operandos .) ]


state 162

    (170) opbasicas -> ARRAY DOT LEN . LPAREN RPAREN

    LPAREN          shift and go to state 237


state 163

    (173) opbasicas -> ARRAY L_BRACKET operandos . R_BRACKET
    (115) operandos -> operandos . COMMA operandos

    R_BRACKET       shift and go to state 238
    COMMA           shift and go to state 86


state 164

    (171) opbasicas -> BITAND VARIABLE L_BRACKET . NUMBER DOT DOT NUMBER R_BRACKET

    NUMBER          shift and go to state 239


state 165

    (177) opbasicas -> VEC EXCLAMATION L_BRACKET . numeros R_BRACKET
    (35) numeros -> . NUMBER
    (36) numeros -> . NUMBER COMMA numeros

    NUMBER          shift and go to state 241

    numeros                        shift and go to state 240

state 166

    (139) declaracion_constante -> CONST VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> CONST VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 242

state 167

    (141) declaracion_constante -> CONST VARIABLE EQUAL . expresion SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 243
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 168

    (142) declaracion_constante -> CONST VARIABLE SEMICOLON .

    PRINT           reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    RETURN          reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    STRING          reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    TRUE            reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    FALSE           reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    BREAK           reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    USE             reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LET             reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    FOR             reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    WHILE           reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    IF              reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LOOP            reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    BITAND          reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    VEC             reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    CONST           reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    MUT             reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    FN              reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    TIMES           reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    $end            reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    SEMICOLON       reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    LBRACKET        reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    RPAREN          reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    COMMA           reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)
    RBRACKET        reduce using rule 142 (declaracion_constante -> CONST VARIABLE SEMICOLON .)


state 169

    (119) funciongenerica -> FN VARIABLE LPAREN . RPAREN LBRACKET program RBRACKET

    RPAREN          shift and go to state 244


state 170

    (120) funciongenerica -> FN MAIN LPAREN . RPAREN LBRACKET program RBRACKET

    RPAREN          shift and go to state 245


state 171

    (5) item -> PRINT EXCLAMATION LPAREN STRING . RPAREN SEMICOLON
    (6) item -> PRINT EXCLAMATION LPAREN STRING . COMMA expresion RPAREN SEMICOLON
    (7) item -> PRINT EXCLAMATION LPAREN STRING . COMMA vars RPAREN SEMICOLON

    RPAREN          shift and go to state 246
    COMMA           shift and go to state 247


state 172

    (174) opbasicas -> LPAREN NUMBER DOT DOT . NUMBER RPAREN DOT REV LPAREN RPAREN

    NUMBER          shift and go to state 248


state 173

    (175) opbasicas -> STRING DOT TO_STRING LPAREN . RPAREN

    RPAREN          shift and go to state 249


state 174

    (172) opbasicas -> VARIABLE DOT ITER . LPAREN RPAREN

    LPAREN          shift and go to state 250


state 175

    (47) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> LET VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 203

state 176

    (48) definicionvariable -> LET VARIABLE EQUAL . expresion SEMICOLON
    (58) definicionvariable -> LET VARIABLE EQUAL . expresion
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 218
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 177

    (49) definicionvariable -> LET MUT VARIABLE . EQUAL expresion SEMICOLON
    (50) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (54) definicionvariable -> LET MUT VARIABLE . DOUBLE_POINT tipo SEMICOLON
    (62) definicionvariable -> LET MUT VARIABLE . EQUAL llamadarandom

    EQUAL           shift and go to state 221
    DOUBLE_POINT    shift and go to state 251


state 178

    (130) llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 252


state 179

    (117) variables -> VARIABLE COMMA . variables
    (116) variables -> . VARIABLE
    (117) variables -> . VARIABLE COMMA variables

    VARIABLE        shift and go to state 253

    variables                      shift and go to state 254

state 180

    (176) opbasicas -> VARIABLE LPAREN variables RPAREN .

    SEMICOLON       reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    PRINT           reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    RETURN          reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    NUMBER          reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    FLOAT           reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    STRING          reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    TRUE            reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    FALSE           reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    VARIABLE        reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    CONTINUE        reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    BREAK           reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    USE             reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LET             reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    STRUCT          reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    FOR             reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    WHILE           reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    IF              reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LOOP            reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    ARRAY           reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    BITAND          reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LPAREN          reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    VEC             reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    CONST           reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    MUT             reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    FN              reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    TIMES           reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    $end            reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    COMMA           reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    PLUS            reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    MINUS           reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    DIVIDE          reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    RDIAMOND        reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LDIAMOND        reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    EQUAL_EQUAL     reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    NOT_EQUAL       reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LESS_EQUAL      reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    GREATER_EQUAL   reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    PLUS_EQUAL      reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    LBRACKET        reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    RPAREN          reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    RBRACKET        reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)
    R_BRACKET       reduce using rule 176 (opbasicas -> VARIABLE LPAREN variables RPAREN .)


state 181

    (92) llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    USE             reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RPAREN          reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    COMMA           reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 92 (llamarfuncion -> VARIABLE LPAREN RPAREN SEMICOLON .)


state 182

    (93) llamarfuncion -> VARIABLE LPAREN expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 255


state 183

    (94) llamarfuncion -> VARIABLE LPAREN expresion COMMA . expresion RPAREN SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 256
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 184

    (95) llamarfuncion -> VARIABLE LPAREN operandos RPAREN . SEMICOLON
    (96) llamarfuncion -> VARIABLE LPAREN operandos RPAREN .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 257
    PRINT           reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    RETURN          reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    NUMBER          reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    FLOAT           reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    STRING          reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    TRUE            reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    FALSE           reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    VARIABLE        reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    CONTINUE        reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    BREAK           reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    USE             reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    LET             reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    STRUCT          reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    FOR             reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    WHILE           reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    IF              reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    LOOP            reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    ARRAY           reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    BITAND          reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    LPAREN          reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    VEC             reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    CONST           reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    MUT             reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    FN              reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    TIMES           reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    $end            reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    LBRACKET        reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    RPAREN          reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    COMMA           reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)
    RBRACKET        reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .)

  ! SEMICOLON       [ reduce using rule 96 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN .) ]


state 185

    (114) operandos -> BITAND VARIABLE .
    (171) opbasicas -> BITAND VARIABLE . L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET

    RPAREN          reduce using rule 114 (operandos -> BITAND VARIABLE .)
    COMMA           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    PLUS            reduce using rule 114 (operandos -> BITAND VARIABLE .)
    MINUS           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    TIMES           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    DIVIDE          reduce using rule 114 (operandos -> BITAND VARIABLE .)
    RDIAMOND        reduce using rule 114 (operandos -> BITAND VARIABLE .)
    LDIAMOND        reduce using rule 114 (operandos -> BITAND VARIABLE .)
    EQUAL_EQUAL     reduce using rule 114 (operandos -> BITAND VARIABLE .)
    NOT_EQUAL       reduce using rule 114 (operandos -> BITAND VARIABLE .)
    LESS_EQUAL      reduce using rule 114 (operandos -> BITAND VARIABLE .)
    GREATER_EQUAL   reduce using rule 114 (operandos -> BITAND VARIABLE .)
    PLUS_EQUAL      reduce using rule 114 (operandos -> BITAND VARIABLE .)
    SEMICOLON       reduce using rule 114 (operandos -> BITAND VARIABLE .)
    PRINT           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    RETURN          reduce using rule 114 (operandos -> BITAND VARIABLE .)
    NUMBER          reduce using rule 114 (operandos -> BITAND VARIABLE .)
    FLOAT           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    STRING          reduce using rule 114 (operandos -> BITAND VARIABLE .)
    TRUE            reduce using rule 114 (operandos -> BITAND VARIABLE .)
    FALSE           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    VARIABLE        reduce using rule 114 (operandos -> BITAND VARIABLE .)
    CONTINUE        reduce using rule 114 (operandos -> BITAND VARIABLE .)
    BREAK           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    USE             reduce using rule 114 (operandos -> BITAND VARIABLE .)
    LET             reduce using rule 114 (operandos -> BITAND VARIABLE .)
    STRUCT          reduce using rule 114 (operandos -> BITAND VARIABLE .)
    FOR             reduce using rule 114 (operandos -> BITAND VARIABLE .)
    WHILE           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    IF              reduce using rule 114 (operandos -> BITAND VARIABLE .)
    LOOP            reduce using rule 114 (operandos -> BITAND VARIABLE .)
    ARRAY           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    BITAND          reduce using rule 114 (operandos -> BITAND VARIABLE .)
    LPAREN          reduce using rule 114 (operandos -> BITAND VARIABLE .)
    VEC             reduce using rule 114 (operandos -> BITAND VARIABLE .)
    CONST           reduce using rule 114 (operandos -> BITAND VARIABLE .)
    MUT             reduce using rule 114 (operandos -> BITAND VARIABLE .)
    FN              reduce using rule 114 (operandos -> BITAND VARIABLE .)
    $end            reduce using rule 114 (operandos -> BITAND VARIABLE .)
    LBRACKET        reduce using rule 114 (operandos -> BITAND VARIABLE .)
    RBRACKET        reduce using rule 114 (operandos -> BITAND VARIABLE .)
    R_BRACKET       reduce using rule 114 (operandos -> BITAND VARIABLE .)
    L_BRACKET       shift and go to state 164


state 186

    (56) definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    USE             reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 56 (definicionvariable -> VARIABLE EQUAL expresion SEMICOLON .)


state 187

    (57) definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .

    PRINT           reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    RETURN          reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    NUMBER          reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    FLOAT           reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    STRING          reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    TRUE            reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    FALSE           reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    VARIABLE        reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    CONTINUE        reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    BREAK           reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    USE             reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    LET             reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    STRUCT          reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    FOR             reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    WHILE           reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    IF              reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    LOOP            reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    ARRAY           reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    BITAND          reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    LPAREN          reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    VEC             reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    CONST           reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    MUT             reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    FN              reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    TIMES           reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    $end            reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    SEMICOLON       reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    LBRACKET        reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    RPAREN          reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    COMMA           reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)
    RBRACKET        reduce using rule 57 (definicionvariable -> VARIABLE EQUAL STRING SEMICOLON .)


state 188

    (178) opbasicas -> VARIABLE DOT VARIABLE LPAREN . RPAREN

    RPAREN          shift and go to state 258


state 189

    (172) opbasicas -> VARIABLE DOT ITER LPAREN . RPAREN
    (169) funcionesvector -> VARIABLE DOT ITER LPAREN . RPAREN SEMICOLON
    (44) funcioneshashmap -> VARIABLE DOT ITER LPAREN . RPAREN
    (128) funcionesarray -> VARIABLE DOT ITER LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 259


state 190

    (159) funcionesvector -> VARIABLE DOT PUSH LPAREN . expresion RPAREN SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 260
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 191

    (160) funcionesvector -> VARIABLE DOT POP LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 261


state 192

    (161) funcionesvector -> VARIABLE DOT LEN LPAREN . RPAREN SEMICOLON
    (41) funcioneshashmap -> VARIABLE DOT LEN LPAREN . RPAREN
    (125) funcionesarray -> VARIABLE DOT LEN LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 262


state 193

    (162) funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN . RPAREN SEMICOLON
    (42) funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN . RPAREN
    (126) funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 263


state 194

    (163) funcionesvector -> VARIABLE DOT GET LPAREN . NUMBER RPAREN SEMICOLON
    (40) funcioneshashmap -> VARIABLE DOT GET LPAREN . expresion RPAREN
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 264
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 265
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 195

    (164) funcionesvector -> VARIABLE DOT SET LPAREN . NUMBER COMMA expresion RPAREN SEMICOLON

    NUMBER          shift and go to state 266


state 196

    (165) funcionesvector -> VARIABLE DOT REMOVE LPAREN . expresion RPAREN SEMICOLON
    (39) funcioneshashmap -> VARIABLE DOT REMOVE LPAREN . expresion RPAREN
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 267
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 197

    (166) funcionesvector -> VARIABLE DOT CLEAR LPAREN . RPAREN SEMICOLON
    (43) funcioneshashmap -> VARIABLE DOT CLEAR LPAREN . RPAREN
    (127) funcionesarray -> VARIABLE DOT CLEAR LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 268


state 198

    (167) funcionesvector -> VARIABLE DOT SWAP LPAREN . expresion COMMA expresion RPAREN SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 269
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 199

    (168) funcionesvector -> VARIABLE DOT REVERSE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 270


state 200

    (38) funcioneshashmap -> VARIABLE DOT INSERT LPAREN . expresion COMMA expresion RPAREN
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 271
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 201

    (129) import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 272


state 202

    (78) tipo -> VARIABLE .

    EQUAL           reduce using rule 78 (tipo -> VARIABLE .)
    SEMICOLON       reduce using rule 78 (tipo -> VARIABLE .)
    RDIAMOND        reduce using rule 78 (tipo -> VARIABLE .)
    COMMA           reduce using rule 78 (tipo -> VARIABLE .)


state 203

    (47) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (51) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo . EQUAL STRING SEMICOLON
    (53) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 273
    SEMICOLON       shift and go to state 274


state 204

    (151) vector -> LET VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> LET VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> LET VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (79) tipo -> VEC . tipo
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    LDIAMOND        shift and go to state 275
    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 276

state 205

    (65) tipo -> INT8 .

    EQUAL           reduce using rule 65 (tipo -> INT8 .)
    SEMICOLON       reduce using rule 65 (tipo -> INT8 .)
    RDIAMOND        reduce using rule 65 (tipo -> INT8 .)
    COMMA           reduce using rule 65 (tipo -> INT8 .)


state 206

    (66) tipo -> INT16 .

    EQUAL           reduce using rule 66 (tipo -> INT16 .)
    SEMICOLON       reduce using rule 66 (tipo -> INT16 .)
    RDIAMOND        reduce using rule 66 (tipo -> INT16 .)
    COMMA           reduce using rule 66 (tipo -> INT16 .)


state 207

    (67) tipo -> INT32 .

    EQUAL           reduce using rule 67 (tipo -> INT32 .)
    SEMICOLON       reduce using rule 67 (tipo -> INT32 .)
    RDIAMOND        reduce using rule 67 (tipo -> INT32 .)
    COMMA           reduce using rule 67 (tipo -> INT32 .)


state 208

    (68) tipo -> INT64 .

    EQUAL           reduce using rule 68 (tipo -> INT64 .)
    SEMICOLON       reduce using rule 68 (tipo -> INT64 .)
    RDIAMOND        reduce using rule 68 (tipo -> INT64 .)
    COMMA           reduce using rule 68 (tipo -> INT64 .)


state 209

    (69) tipo -> UINT8 .

    EQUAL           reduce using rule 69 (tipo -> UINT8 .)
    SEMICOLON       reduce using rule 69 (tipo -> UINT8 .)
    RDIAMOND        reduce using rule 69 (tipo -> UINT8 .)
    COMMA           reduce using rule 69 (tipo -> UINT8 .)


state 210

    (70) tipo -> UINT16 .

    EQUAL           reduce using rule 70 (tipo -> UINT16 .)
    SEMICOLON       reduce using rule 70 (tipo -> UINT16 .)
    RDIAMOND        reduce using rule 70 (tipo -> UINT16 .)
    COMMA           reduce using rule 70 (tipo -> UINT16 .)


state 211

    (71) tipo -> UINT32 .

    EQUAL           reduce using rule 71 (tipo -> UINT32 .)
    SEMICOLON       reduce using rule 71 (tipo -> UINT32 .)
    RDIAMOND        reduce using rule 71 (tipo -> UINT32 .)
    COMMA           reduce using rule 71 (tipo -> UINT32 .)


state 212

    (72) tipo -> UINT64 .

    EQUAL           reduce using rule 72 (tipo -> UINT64 .)
    SEMICOLON       reduce using rule 72 (tipo -> UINT64 .)
    RDIAMOND        reduce using rule 72 (tipo -> UINT64 .)
    COMMA           reduce using rule 72 (tipo -> UINT64 .)


state 213

    (73) tipo -> FLOAT32 .

    EQUAL           reduce using rule 73 (tipo -> FLOAT32 .)
    SEMICOLON       reduce using rule 73 (tipo -> FLOAT32 .)
    RDIAMOND        reduce using rule 73 (tipo -> FLOAT32 .)
    COMMA           reduce using rule 73 (tipo -> FLOAT32 .)


state 214

    (74) tipo -> FLOAT64 .

    EQUAL           reduce using rule 74 (tipo -> FLOAT64 .)
    SEMICOLON       reduce using rule 74 (tipo -> FLOAT64 .)
    RDIAMOND        reduce using rule 74 (tipo -> FLOAT64 .)
    COMMA           reduce using rule 74 (tipo -> FLOAT64 .)


state 215

    (75) tipo -> BOOL .

    EQUAL           reduce using rule 75 (tipo -> BOOL .)
    SEMICOLON       reduce using rule 75 (tipo -> BOOL .)
    RDIAMOND        reduce using rule 75 (tipo -> BOOL .)
    COMMA           reduce using rule 75 (tipo -> BOOL .)


state 216

    (76) tipo -> CHAR .

    EQUAL           reduce using rule 76 (tipo -> CHAR .)
    SEMICOLON       reduce using rule 76 (tipo -> CHAR .)
    RDIAMOND        reduce using rule 76 (tipo -> CHAR .)
    COMMA           reduce using rule 76 (tipo -> CHAR .)


state 217

    (77) tipo -> STR .

    EQUAL           reduce using rule 77 (tipo -> STR .)
    SEMICOLON       reduce using rule 77 (tipo -> STR .)
    RDIAMOND        reduce using rule 77 (tipo -> STR .)
    COMMA           reduce using rule 77 (tipo -> STR .)


state 218

    (48) definicionvariable -> LET VARIABLE EQUAL expresion . SEMICOLON
    (58) definicionvariable -> LET VARIABLE EQUAL expresion .
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for RETURN resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for NUMBER resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for FLOAT resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for STRING resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for TRUE resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for FALSE resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for BREAK resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for USE resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for LET resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for STRUCT resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for FOR resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for WHILE resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for IF resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for LOOP resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for ARRAY resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for BITAND resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for LPAREN resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for VEC resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for CONST resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for MUT resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for FN resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for TIMES resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for $end resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for RPAREN resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
  ! reduce/reduce conflict for COMMA resolved using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    SEMICOLON       shift and go to state 277
    PRINT           reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    RETURN          reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    NUMBER          reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    FLOAT           reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    STRING          reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    TRUE            reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    FALSE           reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    VARIABLE        reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    CONTINUE        reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    BREAK           reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    USE             reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    LET             reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    STRUCT          reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    FOR             reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    WHILE           reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    IF              reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    LOOP            reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    ARRAY           reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    BITAND          reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    LPAREN          reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    VEC             reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    CONST           reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    MUT             reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    FN              reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    TIMES           reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    $end            reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    LBRACKET        reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    RPAREN          reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    COMMA           reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)
    RBRACKET        reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .)

  ! SEMICOLON       [ reduce using rule 58 (definicionvariable -> LET VARIABLE EQUAL expresion .) ]
  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]
  ! PRINT           [ reduce using rule 87 (expresion -> expresion .) ]
  ! RETURN          [ reduce using rule 87 (expresion -> expresion .) ]
  ! NUMBER          [ reduce using rule 87 (expresion -> expresion .) ]
  ! FLOAT           [ reduce using rule 87 (expresion -> expresion .) ]
  ! STRING          [ reduce using rule 87 (expresion -> expresion .) ]
  ! TRUE            [ reduce using rule 87 (expresion -> expresion .) ]
  ! FALSE           [ reduce using rule 87 (expresion -> expresion .) ]
  ! VARIABLE        [ reduce using rule 87 (expresion -> expresion .) ]
  ! CONTINUE        [ reduce using rule 87 (expresion -> expresion .) ]
  ! BREAK           [ reduce using rule 87 (expresion -> expresion .) ]
  ! USE             [ reduce using rule 87 (expresion -> expresion .) ]
  ! LET             [ reduce using rule 87 (expresion -> expresion .) ]
  ! STRUCT          [ reduce using rule 87 (expresion -> expresion .) ]
  ! FOR             [ reduce using rule 87 (expresion -> expresion .) ]
  ! WHILE           [ reduce using rule 87 (expresion -> expresion .) ]
  ! IF              [ reduce using rule 87 (expresion -> expresion .) ]
  ! LOOP            [ reduce using rule 87 (expresion -> expresion .) ]
  ! ARRAY           [ reduce using rule 87 (expresion -> expresion .) ]
  ! BITAND          [ reduce using rule 87 (expresion -> expresion .) ]
  ! LPAREN          [ reduce using rule 87 (expresion -> expresion .) ]
  ! VEC             [ reduce using rule 87 (expresion -> expresion .) ]
  ! CONST           [ reduce using rule 87 (expresion -> expresion .) ]
  ! MUT             [ reduce using rule 87 (expresion -> expresion .) ]
  ! FN              [ reduce using rule 87 (expresion -> expresion .) ]
  ! TIMES           [ reduce using rule 87 (expresion -> expresion .) ]
  ! $end            [ reduce using rule 87 (expresion -> expresion .) ]
  ! RBRACKET        [ reduce using rule 87 (expresion -> expresion .) ]
  ! LBRACKET        [ reduce using rule 87 (expresion -> expresion .) ]
  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]
  ! COMMA           [ reduce using rule 87 (expresion -> expresion .) ]


state 219

    (34) list -> LET VARIABLE EQUAL L_BRACKET . numeros R_BRACKET SEMICOLON
    (35) numeros -> . NUMBER
    (36) numeros -> . NUMBER COMMA numeros

    NUMBER          shift and go to state 241

    numeros                        shift and go to state 278

state 220

    (61) definicionvariable -> LET VARIABLE LPAREN VARIABLE . RPAREN EQUAL llamarfuncion

    RPAREN          shift and go to state 279


state 221

    (49) definicionvariable -> LET MUT VARIABLE EQUAL . expresion SEMICOLON
    (62) definicionvariable -> LET MUT VARIABLE EQUAL . llamadarandom
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 280
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 281
    llamadarandom                  shift and go to state 282
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 222

    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo EQUAL STRING SEMICOLON
    (54) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT . HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (122) array -> LET MUT VARIABLE DOUBLE_POINT . array SEMICOLON
    (153) vector -> LET MUT VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> LET MUT VARIABLE DOUBLE_POINT . VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON

    HASHMAP         shift and go to state 285
    VEC             shift and go to state 287
    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    LET             shift and go to state 283

    tipo                           shift and go to state 284
    array                          shift and go to state 286

state 223

    (121) array -> LET MUT ARRAY DOUBLE_POINT . L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    L_BRACKET       shift and go to state 288


state 224

    (143) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 289
    SEMICOLON       shift and go to state 290


state 225

    (79) tipo -> VEC . tipo
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 276

state 226

    (145) declaracion_mutable -> MUT VARIABLE EQUAL expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 291

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 227

    (45) definicionestructura -> STRUCT VARIABLE LBRACKET item . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 292


state 228

    (46) definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 293


state 229

    (20) for -> FOR VARIABLE IN VARIABLE . LBRACKET program RBRACKET
    (21) for -> FOR VARIABLE IN VARIABLE . LBRACKET RBRACKET
    (86) expresion -> VARIABLE .
    (172) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (176) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (178) opbasicas -> VARIABLE . DOT VARIABLE LPAREN RPAREN
    (56) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (57) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN
    (110) operandos -> VARIABLE .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 294
    DOT             shift and go to state 110
    LPAREN          shift and go to state 69
    EQUAL           shift and go to state 70
    COMMA           reduce using rule 110 (operandos -> VARIABLE .)
    PLUS            reduce using rule 110 (operandos -> VARIABLE .)
    MINUS           reduce using rule 110 (operandos -> VARIABLE .)
    TIMES           reduce using rule 110 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 110 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 110 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 110 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 110 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)

  ! LBRACKET        [ reduce using rule 86 (expresion -> VARIABLE .) ]


state 230

    (22) for -> FOR VARIABLE IN NUMBER . DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> FOR VARIABLE IN NUMBER . DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (81) expresion -> NUMBER .
    (108) operandos -> NUMBER .

    DOT             shift and go to state 295
    LBRACKET        reduce using rule 81 (expresion -> NUMBER .)
    COMMA           reduce using rule 108 (operandos -> NUMBER .)
    PLUS            reduce using rule 108 (operandos -> NUMBER .)
    MINUS           reduce using rule 108 (operandos -> NUMBER .)
    TIMES           reduce using rule 108 (operandos -> NUMBER .)
    DIVIDE          reduce using rule 108 (operandos -> NUMBER .)
    RDIAMOND        reduce using rule 108 (operandos -> NUMBER .)
    LDIAMOND        reduce using rule 108 (operandos -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> NUMBER .)
    NOT_EQUAL       reduce using rule 108 (operandos -> NUMBER .)
    LESS_EQUAL      reduce using rule 108 (operandos -> NUMBER .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> NUMBER .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> NUMBER .)


state 231

    (24) for -> FOR VARIABLE IN expresion . LBRACKET program RBRACKET
    (25) for -> FOR VARIABLE IN expresion . LBRACKET RBRACKET
    (87) expresion -> expresion .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 296

  ! LBRACKET        [ reduce using rule 87 (expresion -> expresion .) ]


state 232

    (123) while -> WHILE LPAREN expresion RPAREN . LBRACKET program RBRACKET

    LBRACKET        shift and go to state 297


state 233

    (124) while -> WHILE expresion LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 298
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    expresion                      shift and go to state 8
    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 234

    (147) if -> IF expresion LBRACKET program . RBRACKET
    (148) if -> IF expresion LBRACKET program . RBRACKET ELSE
    (149) if -> IF expresion LBRACKET program . RBRACKET ELSE LBRACKET program RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 299
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    expresion                      shift and go to state 8
    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 235

    (150) loop -> LOOP LBRACKET program RBRACKET .

    PRINT           reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    RETURN          reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    STRING          reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    TRUE            reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    FALSE           reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    BREAK           reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    USE             reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    LET             reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    FOR             reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    WHILE           reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    IF              reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    LOOP            reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    BITAND          reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    VEC             reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    CONST           reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    MUT             reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    FN              reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    TIMES           reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    $end            reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    COMMA           reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 150 (loop -> LOOP LBRACKET program RBRACKET .)


state 236

    (176) opbasicas -> VARIABLE LPAREN . variables RPAREN
    (116) variables -> . VARIABLE
    (117) variables -> . VARIABLE COMMA variables

    VARIABLE        shift and go to state 253

    variables                      shift and go to state 115

state 237

    (170) opbasicas -> ARRAY DOT LEN LPAREN . RPAREN

    RPAREN          shift and go to state 300


state 238

    (173) opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .

    SEMICOLON       reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    PRINT           reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    RETURN          reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    NUMBER          reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    FLOAT           reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    STRING          reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    TRUE            reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    FALSE           reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    VARIABLE        reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    CONTINUE        reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    BREAK           reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    USE             reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LET             reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    STRUCT          reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    FOR             reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    WHILE           reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    IF              reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LOOP            reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    ARRAY           reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    BITAND          reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LPAREN          reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    VEC             reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    CONST           reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    MUT             reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    FN              reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    TIMES           reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    $end            reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    COMMA           reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    PLUS            reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    MINUS           reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    DIVIDE          reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    RDIAMOND        reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LDIAMOND        reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    EQUAL_EQUAL     reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    NOT_EQUAL       reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LESS_EQUAL      reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    GREATER_EQUAL   reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    PLUS_EQUAL      reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    LBRACKET        reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    RPAREN          reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    RBRACKET        reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)
    R_BRACKET       reduce using rule 173 (opbasicas -> ARRAY L_BRACKET operandos R_BRACKET .)


state 239

    (171) opbasicas -> BITAND VARIABLE L_BRACKET NUMBER . DOT DOT NUMBER R_BRACKET

    DOT             shift and go to state 301


state 240

    (177) opbasicas -> VEC EXCLAMATION L_BRACKET numeros . R_BRACKET

    R_BRACKET       shift and go to state 302


state 241

    (35) numeros -> NUMBER .
    (36) numeros -> NUMBER . COMMA numeros

    R_BRACKET       reduce using rule 35 (numeros -> NUMBER .)
    COMMA           shift and go to state 303


state 242

    (139) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (140) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 304
    SEMICOLON       shift and go to state 305


state 243

    (141) declaracion_constante -> CONST VARIABLE EQUAL expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 306

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 244

    (119) funciongenerica -> FN VARIABLE LPAREN RPAREN . LBRACKET program RBRACKET

    LBRACKET        shift and go to state 307


state 245

    (120) funciongenerica -> FN MAIN LPAREN RPAREN . LBRACKET program RBRACKET

    LBRACKET        shift and go to state 308


state 246

    (5) item -> PRINT EXCLAMATION LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 309


state 247

    (6) item -> PRINT EXCLAMATION LPAREN STRING COMMA . expresion RPAREN SEMICOLON
    (7) item -> PRINT EXCLAMATION LPAREN STRING COMMA . vars RPAREN SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (63) vars -> . VARIABLE
    (64) vars -> . VARIABLE COMMA vars
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 312
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 310
    vars                           shift and go to state 311
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 248

    (174) opbasicas -> LPAREN NUMBER DOT DOT NUMBER . RPAREN DOT REV LPAREN RPAREN

    RPAREN          shift and go to state 313


state 249

    (175) opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .

    SEMICOLON       reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    PRINT           reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    RETURN          reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    NUMBER          reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    FLOAT           reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    STRING          reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    TRUE            reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    FALSE           reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    VARIABLE        reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    CONTINUE        reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    BREAK           reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    USE             reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LET             reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    STRUCT          reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    FOR             reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    WHILE           reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    IF              reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LOOP            reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    ARRAY           reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    BITAND          reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LPAREN          reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    VEC             reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    CONST           reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    MUT             reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    FN              reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    TIMES           reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    $end            reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    COMMA           reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    PLUS            reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    MINUS           reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    DIVIDE          reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    RDIAMOND        reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LDIAMOND        reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    LBRACKET        reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    RPAREN          reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    RBRACKET        reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)
    R_BRACKET       reduce using rule 175 (opbasicas -> STRING DOT TO_STRING LPAREN RPAREN .)


state 250

    (172) opbasicas -> VARIABLE DOT ITER LPAREN . RPAREN

    RPAREN          shift and go to state 314


state 251

    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo EQUAL expresion SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo EQUAL STRING SEMICOLON
    (54) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT . tipo SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 284

state 252

    (130) llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 315


state 253

    (116) variables -> VARIABLE .
    (117) variables -> VARIABLE . COMMA variables

    RPAREN          reduce using rule 116 (variables -> VARIABLE .)
    COMMA           shift and go to state 179


state 254

    (117) variables -> VARIABLE COMMA variables .

    RPAREN          reduce using rule 117 (variables -> VARIABLE COMMA variables .)


state 255

    (93) llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    PRINT           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    USE             reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    LET             reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    IF              reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    FN              reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    $end            reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    RPAREN          reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    COMMA           reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 93 (llamarfuncion -> VARIABLE LPAREN expresion RPAREN SEMICOLON .)


state 256

    (94) llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion . RPAREN SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 316

  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]


state 257

    (95) llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    PRINT           reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    RETURN          reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    NUMBER          reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    STRING          reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    TRUE            reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    FALSE           reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    BREAK           reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    USE             reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    LET             reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    STRUCT          reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    FOR             reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    WHILE           reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    IF              reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    LOOP            reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    BITAND          reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    LPAREN          reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    VEC             reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    CONST           reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    MUT             reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    FN              reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    TIMES           reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    $end            reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    COMMA           reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 95 (llamarfuncion -> VARIABLE LPAREN operandos RPAREN SEMICOLON .)


state 258

    (178) opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .

    SEMICOLON       reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    PRINT           reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    RETURN          reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    NUMBER          reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    FLOAT           reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    STRING          reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    TRUE            reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    FALSE           reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    VARIABLE        reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    CONTINUE        reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    BREAK           reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    USE             reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    LET             reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    STRUCT          reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    FOR             reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    WHILE           reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    IF              reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    LOOP            reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    ARRAY           reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    BITAND          reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    LPAREN          reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    VEC             reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    CONST           reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    MUT             reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    FN              reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    TIMES           reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    $end            reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    COMMA           reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    PLUS            reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    DIVIDE          reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    RDIAMOND        reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    LDIAMOND        reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    LBRACKET        reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    RPAREN          reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    RBRACKET        reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)
    R_BRACKET       reduce using rule 178 (opbasicas -> VARIABLE DOT VARIABLE LPAREN RPAREN .)


state 259

    (172) opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .
    (169) funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN . SEMICOLON
    (44) funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .
    (128) funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for NUMBER resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for FLOAT resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for TRUE resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for FALSE resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for USE resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for LET resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for STRUCT resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for WHILE resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for LOOP resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for ARRAY resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for BITAND resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for LPAREN resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for VEC resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for CONST resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for MUT resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for FN resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for TIMES resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    COMMA           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    PLUS            reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    MINUS           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    DIVIDE          reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    RDIAMOND        reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LDIAMOND        reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    SEMICOLON       shift and go to state 317
    PRINT           reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    RETURN          reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    NUMBER          reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    FLOAT           reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    STRING          reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    TRUE            reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    FALSE           reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    VARIABLE        reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    CONTINUE        reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    BREAK           reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    USE             reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    LET             reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    STRUCT          reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    FOR             reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    WHILE           reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    IF              reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    LOOP            reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    ARRAY           reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    BITAND          reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    LPAREN          reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    VEC             reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    CONST           reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    MUT             reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    FN              reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    TIMES           reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    $end            reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)
    RBRACKET        reduce using rule 44 (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN .)

  ! SEMICOLON       [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! PRINT           [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! RETURN          [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! NUMBER          [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! FLOAT           [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! STRING          [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! TRUE            [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! FALSE           [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! VARIABLE        [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! CONTINUE        [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! BREAK           [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! USE             [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! LET             [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! STRUCT          [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! FOR             [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! WHILE           [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! IF              [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! LOOP            [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! ARRAY           [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! BITAND          [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! LPAREN          [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! VEC             [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! CONST           [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! MUT             [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! FN              [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! TIMES           [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! $end            [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]
  ! RBRACKET        [ reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .) ]


state 260

    (159) funcionesvector -> VARIABLE DOT PUSH LPAREN expresion . RPAREN SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 318

  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]


state 261

    (160) funcionesvector -> VARIABLE DOT POP LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 319


state 262

    (161) funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN . SEMICOLON
    (41) funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .
    (125) funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 320
    PRINT           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    RETURN          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    NUMBER          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    FLOAT           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    STRING          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    TRUE            reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    FALSE           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    VARIABLE        reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    CONTINUE        reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    BREAK           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    USE             reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    LET             reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    STRUCT          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    FOR             reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    WHILE           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    IF              reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    LOOP            reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    ARRAY           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    BITAND          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    LPAREN          reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    VEC             reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    CONST           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    MUT             reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    FN              reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    TIMES           reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    $end            reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)
    RBRACKET        reduce using rule 41 (funcioneshashmap -> VARIABLE DOT LEN LPAREN RPAREN .)


state 263

    (162) funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN . SEMICOLON
    (42) funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .
    (126) funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 321
    PRINT           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    RETURN          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    NUMBER          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    FLOAT           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    STRING          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    TRUE            reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    FALSE           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    VARIABLE        reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    CONTINUE        reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    BREAK           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    USE             reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    LET             reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    STRUCT          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    FOR             reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    WHILE           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    IF              reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    LOOP            reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    ARRAY           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    BITAND          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    LPAREN          reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    VEC             reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    CONST           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    MUT             reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    FN              reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    TIMES           reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    $end            reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)
    RBRACKET        reduce using rule 42 (funcioneshashmap -> VARIABLE DOT IS_EMPTY LPAREN RPAREN .)


state 264

    (163) funcionesvector -> VARIABLE DOT GET LPAREN NUMBER . RPAREN SEMICOLON
    (81) expresion -> NUMBER .
    (108) operandos -> NUMBER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 322
    COMMA           reduce using rule 108 (operandos -> NUMBER .)
    PLUS            reduce using rule 108 (operandos -> NUMBER .)
    MINUS           reduce using rule 108 (operandos -> NUMBER .)
    TIMES           reduce using rule 108 (operandos -> NUMBER .)
    DIVIDE          reduce using rule 108 (operandos -> NUMBER .)
    RDIAMOND        reduce using rule 108 (operandos -> NUMBER .)
    LDIAMOND        reduce using rule 108 (operandos -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 108 (operandos -> NUMBER .)
    NOT_EQUAL       reduce using rule 108 (operandos -> NUMBER .)
    LESS_EQUAL      reduce using rule 108 (operandos -> NUMBER .)
    GREATER_EQUAL   reduce using rule 108 (operandos -> NUMBER .)
    PLUS_EQUAL      reduce using rule 108 (operandos -> NUMBER .)

  ! RPAREN          [ reduce using rule 81 (expresion -> NUMBER .) ]


state 265

    (40) funcioneshashmap -> VARIABLE DOT GET LPAREN expresion . RPAREN
    (87) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 323

  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]


state 266

    (164) funcionesvector -> VARIABLE DOT SET LPAREN NUMBER . COMMA expresion RPAREN SEMICOLON

    COMMA           shift and go to state 324


state 267

    (165) funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion . RPAREN SEMICOLON
    (39) funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion . RPAREN
    (87) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 325

  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]


state 268

    (166) funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN . SEMICOLON
    (43) funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .
    (127) funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 326
    PRINT           reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    RETURN          reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    NUMBER          reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    FLOAT           reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    STRING          reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    TRUE            reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    FALSE           reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    VARIABLE        reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    CONTINUE        reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    BREAK           reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    USE             reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    LET             reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    STRUCT          reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    FOR             reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    WHILE           reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    IF              reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    LOOP            reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    ARRAY           reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    BITAND          reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    LPAREN          reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    VEC             reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    CONST           reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    MUT             reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    FN              reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    TIMES           reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    $end            reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)
    RBRACKET        reduce using rule 43 (funcioneshashmap -> VARIABLE DOT CLEAR LPAREN RPAREN .)


state 269

    (167) funcionesvector -> VARIABLE DOT SWAP LPAREN expresion . COMMA expresion RPAREN SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 327

  ! COMMA           [ reduce using rule 87 (expresion -> expresion .) ]


state 270

    (168) funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 328


state 271

    (38) funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion . COMMA expresion RPAREN
    (87) expresion -> expresion .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 329

  ! COMMA           [ reduce using rule 87 (expresion -> expresion .) ]


state 272

    (129) import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 330


state 273

    (47) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (51) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL . STRING SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    STRING          shift and go to state 332
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 331
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 274

    (53) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .

    PRINT           reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RETURN          reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FLOAT           reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONTINUE        reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    USE             reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FOR             reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BITAND          reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LPAREN          reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VEC             reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TIMES           reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    SEMICOLON       reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LBRACKET        reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RPAREN          reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    COMMA           reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 53 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 275

    (151) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND SEMICOLON
    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 333

state 276

    (79) tipo -> VEC tipo .

    EQUAL           reduce using rule 79 (tipo -> VEC tipo .)
    SEMICOLON       reduce using rule 79 (tipo -> VEC tipo .)
    RDIAMOND        reduce using rule 79 (tipo -> VEC tipo .)
    COMMA           reduce using rule 79 (tipo -> VEC tipo .)


state 277

    (48) definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    USE             reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 48 (definicionvariable -> LET VARIABLE EQUAL expresion SEMICOLON .)


state 278

    (34) list -> LET VARIABLE EQUAL L_BRACKET numeros . R_BRACKET SEMICOLON

    R_BRACKET       shift and go to state 334


state 279

    (61) definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN . EQUAL llamarfuncion

    EQUAL           shift and go to state 335


state 280

    (86) expresion -> VARIABLE .
    (130) llamadarandom -> VARIABLE . DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (172) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (176) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (178) opbasicas -> VARIABLE . DOT VARIABLE LPAREN RPAREN
    (56) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (57) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN
    (110) operandos -> VARIABLE .

    SEMICOLON       reduce using rule 86 (expresion -> VARIABLE .)
    DOUBLE_POINT    shift and go to state 68
    DOT             shift and go to state 110
    LPAREN          shift and go to state 69
    EQUAL           shift and go to state 70
    COMMA           reduce using rule 110 (operandos -> VARIABLE .)
    PLUS            reduce using rule 110 (operandos -> VARIABLE .)
    MINUS           reduce using rule 110 (operandos -> VARIABLE .)
    TIMES           reduce using rule 110 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 110 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 110 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 110 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 110 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)


state 281

    (49) definicionvariable -> LET MUT VARIABLE EQUAL expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 336

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 282

    (62) definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .

    PRINT           reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    RETURN          reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    NUMBER          reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    FLOAT           reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    STRING          reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    TRUE            reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    FALSE           reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    VARIABLE        reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    CONTINUE        reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    BREAK           reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    USE             reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    LET             reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    STRUCT          reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    FOR             reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    WHILE           reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    IF              reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    LOOP            reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    ARRAY           reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    BITAND          reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    LPAREN          reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    VEC             reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    CONST           reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    MUT             reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    FN              reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    TIMES           reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    $end            reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    SEMICOLON       reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    LBRACKET        reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    RPAREN          reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    COMMA           reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)
    RBRACKET        reduce using rule 62 (definicionvariable -> LET MUT VARIABLE EQUAL llamadarandom .)


state 283

    (121) array -> LET . MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> LET . MUT VARIABLE DOUBLE_POINT array SEMICOLON

    MUT             shift and go to state 337


state 284

    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo . EQUAL expresion SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo . EQUAL STRING SEMICOLON
    (54) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo . SEMICOLON

    EQUAL           shift and go to state 338
    SEMICOLON       shift and go to state 339


state 285

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP . LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    LDIAMOND        shift and go to state 340


state 286

    (122) array -> LET MUT VARIABLE DOUBLE_POINT array . SEMICOLON

    SEMICOLON       shift and go to state 341


state 287

    (153) vector -> LET MUT VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> LET MUT VARIABLE DOUBLE_POINT VEC . LDIAMOND tipo RDIAMOND SEMICOLON
    (79) tipo -> VEC . tipo
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    LDIAMOND        shift and go to state 342
    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 276

state 288

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET . tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 343

state 289

    (143) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 344
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 290

    (144) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .

    PRINT           reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RETURN          reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FLOAT           reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONTINUE        reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    USE             reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FOR             reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BITAND          reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LPAREN          reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VEC             reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TIMES           reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    SEMICOLON       reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LBRACKET        reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RPAREN          reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    COMMA           reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 144 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 291

    (145) declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    USE             reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 145 (declaracion_mutable -> MUT VARIABLE EQUAL expresion SEMICOLON .)


state 292

    (45) definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 345


state 293

    (46) definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .

    PRINT           reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    RETURN          reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    STRING          reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    TRUE            reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    FALSE           reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    VARIABLE        reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    CONTINUE        reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    BREAK           reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    USE             reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    LET             reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    STRUCT          reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    FOR             reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    WHILE           reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    IF              reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    LOOP            reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    BITAND          reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    VEC             reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    CONST           reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    MUT             reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    FN              reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    TIMES           reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    $end            reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 46 (definicionestructura -> STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON .)


state 294

    (20) for -> FOR VARIABLE IN VARIABLE LBRACKET . program RBRACKET
    (21) for -> FOR VARIABLE IN VARIABLE LBRACKET . RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 347
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    program                        shift and go to state 346
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 295

    (22) for -> FOR VARIABLE IN NUMBER DOT . DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> FOR VARIABLE IN NUMBER DOT . DOT EQUAL NUMBER LBRACKET RBRACKET

    DOT             shift and go to state 348


state 296

    (24) for -> FOR VARIABLE IN expresion LBRACKET . program RBRACKET
    (25) for -> FOR VARIABLE IN expresion LBRACKET . RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 350
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    expresion                      shift and go to state 8
    program                        shift and go to state 349
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 297

    (123) while -> WHILE LPAREN expresion RPAREN LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    expresion                      shift and go to state 8
    program                        shift and go to state 351
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 298

    (124) while -> WHILE expresion LBRACKET program RBRACKET .

    PRINT           reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    RETURN          reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    STRING          reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    TRUE            reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    FALSE           reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    BREAK           reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    USE             reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    LET             reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    FOR             reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    WHILE           reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    IF              reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    LOOP            reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    BITAND          reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    VEC             reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    CONST           reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    MUT             reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    FN              reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    TIMES           reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    $end            reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    COMMA           reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 124 (while -> WHILE expresion LBRACKET program RBRACKET .)


state 299

    (147) if -> IF expresion LBRACKET program RBRACKET .
    (148) if -> IF expresion LBRACKET program RBRACKET . ELSE
    (149) if -> IF expresion LBRACKET program RBRACKET . ELSE LBRACKET program RBRACKET

    PRINT           reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    RETURN          reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    STRING          reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    TRUE            reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    FALSE           reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    BREAK           reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    USE             reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    LET             reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    FOR             reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    WHILE           reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    IF              reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    LOOP            reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    BITAND          reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    VEC             reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    CONST           reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    MUT             reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    FN              reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    TIMES           reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    $end            reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    COMMA           reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 147 (if -> IF expresion LBRACKET program RBRACKET .)
    ELSE            shift and go to state 352


state 300

    (170) opbasicas -> ARRAY DOT LEN LPAREN RPAREN .

    SEMICOLON       reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    PRINT           reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    RETURN          reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    NUMBER          reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    FLOAT           reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    STRING          reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    TRUE            reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    FALSE           reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    VARIABLE        reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    CONTINUE        reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    BREAK           reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    USE             reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LET             reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    STRUCT          reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    FOR             reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    WHILE           reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    IF              reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LOOP            reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    ARRAY           reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    BITAND          reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LPAREN          reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    VEC             reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    CONST           reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    MUT             reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    FN              reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    TIMES           reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    $end            reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    COMMA           reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    PLUS            reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    MINUS           reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    DIVIDE          reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    RDIAMOND        reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LDIAMOND        reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    LBRACKET        reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    RPAREN          reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    RBRACKET        reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)
    R_BRACKET       reduce using rule 170 (opbasicas -> ARRAY DOT LEN LPAREN RPAREN .)


state 301

    (171) opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT . DOT NUMBER R_BRACKET

    DOT             shift and go to state 353


state 302

    (177) opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .

    SEMICOLON       reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    PRINT           reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    RETURN          reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    NUMBER          reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    FLOAT           reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    STRING          reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    TRUE            reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    FALSE           reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    VARIABLE        reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    CONTINUE        reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    BREAK           reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    USE             reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LET             reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    STRUCT          reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    FOR             reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    WHILE           reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    IF              reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LOOP            reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    ARRAY           reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    BITAND          reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LPAREN          reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    VEC             reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    CONST           reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    MUT             reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    FN              reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    TIMES           reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    $end            reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    COMMA           reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    PLUS            reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    MINUS           reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    DIVIDE          reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    RDIAMOND        reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LDIAMOND        reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    EQUAL_EQUAL     reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    NOT_EQUAL       reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LESS_EQUAL      reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    GREATER_EQUAL   reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    PLUS_EQUAL      reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    LBRACKET        reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    RPAREN          reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    RBRACKET        reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)
    R_BRACKET       reduce using rule 177 (opbasicas -> VEC EXCLAMATION L_BRACKET numeros R_BRACKET .)


state 303

    (36) numeros -> NUMBER COMMA . numeros
    (35) numeros -> . NUMBER
    (36) numeros -> . NUMBER COMMA numeros

    NUMBER          shift and go to state 241

    numeros                        shift and go to state 354

state 304

    (139) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 355
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 305

    (140) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .

    PRINT           reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RETURN          reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FLOAT           reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONTINUE        reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    USE             reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FOR             reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BITAND          reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LPAREN          reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VEC             reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TIMES           reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    SEMICOLON       reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LBRACKET        reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RPAREN          reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    COMMA           reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 140 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 306

    (141) declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    USE             reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 141 (declaracion_constante -> CONST VARIABLE EQUAL expresion SEMICOLON .)


state 307

    (119) funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    program                        shift and go to state 356
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 308

    (120) funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    program                        shift and go to state 357
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 309

    (5) item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .

    PRINT           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    RETURN          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    NUMBER          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    FLOAT           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    STRING          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    TRUE            reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    FALSE           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    BREAK           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    USE             reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    LET             reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    STRUCT          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    LOOP            reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    ARRAY           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    BITAND          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    LPAREN          reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    VEC             reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    CONST           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    MUT             reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    FN              reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    TIMES           reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    $end            reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 5 (item -> PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON .)


state 310

    (6) item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion . RPAREN SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 358

  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]


state 311

    (7) item -> PRINT EXCLAMATION LPAREN STRING COMMA vars . RPAREN SEMICOLON

    RPAREN          shift and go to state 359


state 312

    (86) expresion -> VARIABLE .
    (63) vars -> VARIABLE .
    (64) vars -> VARIABLE . COMMA vars
    (172) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (176) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (178) opbasicas -> VARIABLE . DOT VARIABLE LPAREN RPAREN
    (56) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (57) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN
    (110) operandos -> VARIABLE .

  ! reduce/reduce conflict for RPAREN resolved using rule 63 (vars -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 63 (vars -> VARIABLE .)
    COMMA           shift and go to state 360
    DOT             shift and go to state 110
    LPAREN          shift and go to state 69
    EQUAL           shift and go to state 70
    PLUS            reduce using rule 110 (operandos -> VARIABLE .)
    MINUS           reduce using rule 110 (operandos -> VARIABLE .)
    TIMES           reduce using rule 110 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 110 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 110 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 110 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 110 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)

  ! RPAREN          [ reduce using rule 86 (expresion -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 110 (operandos -> VARIABLE .) ]


state 313

    (174) opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN . DOT REV LPAREN RPAREN

    DOT             shift and go to state 361


state 314

    (172) opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .

    SEMICOLON       reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    COMMA           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    PLUS            reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    MINUS           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    TIMES           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    DIVIDE          reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    RDIAMOND        reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LDIAMOND        reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LBRACKET        reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    RPAREN          reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    PRINT           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    RETURN          reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    NUMBER          reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    FLOAT           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    STRING          reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    TRUE            reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    FALSE           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    VARIABLE        reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    CONTINUE        reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    BREAK           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    USE             reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LET             reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    STRUCT          reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    FOR             reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    WHILE           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    IF              reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LOOP            reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    ARRAY           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    BITAND          reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    LPAREN          reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    VEC             reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    CONST           reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    MUT             reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    FN              reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    $end            reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    RBRACKET        reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)
    R_BRACKET       reduce using rule 172 (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN .)


state 315

    (130) llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 362


state 316

    (94) llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 363


state 317

    (169) funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .
    (128) funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .

  ! reduce/reduce conflict for PRINT resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for USE resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LET resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRUCT resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LOOP resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ARRAY resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BITAND resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VEC resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for MUT resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    USE             reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 128 (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .)

  ! PRINT           [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! RETURN          [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! TRUE            [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! FALSE           [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! VARIABLE        [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! USE             [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! LET             [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! STRUCT          [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! FOR             [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! WHILE           [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! IF              [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! LOOP            [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! ARRAY           [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! BITAND          [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! VEC             [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! CONST           [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! MUT             [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! TIMES           [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]
  ! RBRACKET        [ reduce using rule 169 (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON .) ]


state 318

    (159) funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 364


state 319

    (160) funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .

    PRINT           reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    USE             reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 160 (funcionesvector -> VARIABLE DOT POP LPAREN RPAREN SEMICOLON .)


state 320

    (161) funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .
    (125) funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .

  ! reduce/reduce conflict for PRINT resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for USE resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LET resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRUCT resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LOOP resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ARRAY resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BITAND resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VEC resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for MUT resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    USE             reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 125 (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .)

  ! PRINT           [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! RETURN          [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! TRUE            [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! FALSE           [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! VARIABLE        [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! USE             [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! LET             [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! STRUCT          [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! FOR             [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! WHILE           [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! IF              [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! LOOP            [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! ARRAY           [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! BITAND          [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! VEC             [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! CONST           [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! MUT             [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! TIMES           [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]
  ! RBRACKET        [ reduce using rule 161 (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON .) ]


state 321

    (162) funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .
    (126) funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .

  ! reduce/reduce conflict for PRINT resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for USE resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LET resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRUCT resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LOOP resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ARRAY resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BITAND resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VEC resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for MUT resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    USE             reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 126 (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .)

  ! PRINT           [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! RETURN          [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! TRUE            [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! FALSE           [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! VARIABLE        [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! USE             [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! LET             [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! STRUCT          [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! FOR             [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! WHILE           [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! IF              [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! LOOP            [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! ARRAY           [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! BITAND          [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! VEC             [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! CONST           [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! MUT             [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! TIMES           [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]
  ! RBRACKET        [ reduce using rule 162 (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON .) ]


state 322

    (163) funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 365


state 323

    (40) funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .

    PRINT           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    RETURN          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    NUMBER          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    FLOAT           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    STRING          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    TRUE            reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    FALSE           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    VARIABLE        reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    CONTINUE        reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    BREAK           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    USE             reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    LET             reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    STRUCT          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    FOR             reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    WHILE           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    IF              reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    LOOP            reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    ARRAY           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    BITAND          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    LPAREN          reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    VEC             reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    CONST           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    MUT             reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    FN              reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    TIMES           reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    $end            reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)
    RBRACKET        reduce using rule 40 (funcioneshashmap -> VARIABLE DOT GET LPAREN expresion RPAREN .)


state 324

    (164) funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA . expresion RPAREN SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 366
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 325

    (165) funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN . SEMICOLON
    (39) funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .

    SEMICOLON       shift and go to state 367
    PRINT           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    RETURN          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    NUMBER          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    FLOAT           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    STRING          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    TRUE            reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    FALSE           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    VARIABLE        reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    CONTINUE        reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    BREAK           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    USE             reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    LET             reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    STRUCT          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    FOR             reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    WHILE           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    IF              reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    LOOP            reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    ARRAY           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    BITAND          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    LPAREN          reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    VEC             reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    CONST           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    MUT             reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    FN              reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    TIMES           reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    $end            reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)
    RBRACKET        reduce using rule 39 (funcioneshashmap -> VARIABLE DOT REMOVE LPAREN expresion RPAREN .)


state 326

    (166) funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .
    (127) funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .

  ! reduce/reduce conflict for PRINT resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for USE resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LET resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRUCT resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LOOP resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ARRAY resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BITAND resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for VEC resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for MUT resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    USE             reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 127 (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .)

  ! PRINT           [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! RETURN          [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! NUMBER          [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! TRUE            [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! FALSE           [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! VARIABLE        [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! USE             [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! LET             [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! STRUCT          [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! FOR             [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! WHILE           [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! IF              [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! LOOP            [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! ARRAY           [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! BITAND          [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! VEC             [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! CONST           [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! MUT             [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! TIMES           [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]
  ! RBRACKET        [ reduce using rule 166 (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON .) ]


state 327

    (167) funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA . expresion RPAREN SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 368
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 328

    (168) funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .

    PRINT           reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    USE             reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 168 (funcionesvector -> VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON .)


state 329

    (38) funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA . expresion RPAREN
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 369
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 330

    (129) import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .

    PRINT           reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    RETURN          reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    NUMBER          reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    STRING          reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    TRUE            reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    FALSE           reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    BREAK           reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    USE             reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    LET             reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    STRUCT          reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    FOR             reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    WHILE           reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    IF              reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    LOOP            reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    BITAND          reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    LPAREN          reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    VEC             reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    CONST           reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    MUT             reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    FN              reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    TIMES           reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    $end            reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)
    RBRACKET        reduce using rule 129 (import -> USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON .)


state 331

    (47) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 370

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 332

    (51) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING . SEMICOLON
    (83) expresion -> STRING .
    (175) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN
    (111) operandos -> STRING .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 371
    DOT             shift and go to state 61
    COMMA           reduce using rule 111 (operandos -> STRING .)
    PLUS            reduce using rule 111 (operandos -> STRING .)
    MINUS           reduce using rule 111 (operandos -> STRING .)
    TIMES           reduce using rule 111 (operandos -> STRING .)
    DIVIDE          reduce using rule 111 (operandos -> STRING .)
    RDIAMOND        reduce using rule 111 (operandos -> STRING .)
    LDIAMOND        reduce using rule 111 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 111 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 111 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 111 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 111 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 111 (operandos -> STRING .)

  ! SEMICOLON       [ reduce using rule 83 (expresion -> STRING .) ]


state 333

    (151) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND SEMICOLON
    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    RDIAMOND        shift and go to state 372


state 334

    (34) list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 373


state 335

    (61) definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL . llamarfuncion
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN

    VARIABLE        shift and go to state 374

    llamarfuncion                  shift and go to state 375

state 336

    (49) definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    USE             reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    LET             reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    IF              reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    FN              reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    $end            reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 49 (definicionvariable -> LET MUT VARIABLE EQUAL expresion SEMICOLON .)


state 337

    (121) array -> LET MUT . ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> LET MUT . VARIABLE DOUBLE_POINT array SEMICOLON

    ARRAY           shift and go to state 143
    VARIABLE        shift and go to state 376


state 338

    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL . expresion SEMICOLON
    (52) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL . STRING SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    STRING          shift and go to state 378
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 377
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 339

    (54) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .

    PRINT           reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RETURN          reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    NUMBER          reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FLOAT           reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRING          reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TRUE            reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FALSE           reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VARIABLE        reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONTINUE        reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BREAK           reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    USE             reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LET             reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    STRUCT          reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FOR             reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    WHILE           reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    IF              reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LOOP            reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    ARRAY           reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    BITAND          reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LPAREN          reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    VEC             reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    CONST           reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    MUT             reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    FN              reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    TIMES           reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    $end            reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    SEMICOLON       reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    LBRACKET        reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RPAREN          reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    COMMA           reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)
    RBRACKET        reduce using rule 54 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON .)


state 340

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND . tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 379

state 341

    (122) array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .

    PRINT           reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    RETURN          reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    NUMBER          reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    FLOAT           reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    STRING          reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    TRUE            reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    FALSE           reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    VARIABLE        reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    CONTINUE        reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    BREAK           reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    USE             reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    LET             reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    STRUCT          reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    FOR             reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    WHILE           reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    IF              reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    LOOP            reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    ARRAY           reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    BITAND          reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    LPAREN          reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    VEC             reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    CONST           reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    MUT             reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    FN              reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    TIMES           reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    $end            reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    RBRACKET        reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)
    SEMICOLON       reduce using rule 122 (array -> LET MUT VARIABLE DOUBLE_POINT array SEMICOLON .)


state 342

    (153) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND . tipo RDIAMOND SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 380

state 343

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo . SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    SEMICOLON       shift and go to state 381


state 344

    (143) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 382

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 345

    (45) definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .

    PRINT           reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    RETURN          reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    STRING          reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    TRUE            reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    FALSE           reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    VARIABLE        reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    CONTINUE        reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    BREAK           reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    USE             reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    LET             reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    STRUCT          reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    FOR             reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    WHILE           reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    IF              reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    LOOP            reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    BITAND          reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    VEC             reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    CONST           reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    MUT             reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    FN              reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    TIMES           reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    $end            reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 45 (definicionestructura -> STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON .)


state 346

    (20) for -> FOR VARIABLE IN VARIABLE LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 383
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 347

    (21) for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .

    PRINT           reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    RETURN          reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    NUMBER          reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    FLOAT           reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    STRING          reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    TRUE            reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    FALSE           reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    CONTINUE        reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    BREAK           reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    USE             reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    LET             reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    STRUCT          reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    FOR             reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    WHILE           reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    IF              reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    LOOP            reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    ARRAY           reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    BITAND          reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    LPAREN          reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    VEC             reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    CONST           reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    MUT             reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    FN              reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    TIMES           reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    $end            reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    RPAREN          reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    COMMA           reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 21 (for -> FOR VARIABLE IN VARIABLE LBRACKET RBRACKET .)


state 348

    (22) for -> FOR VARIABLE IN NUMBER DOT DOT . EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> FOR VARIABLE IN NUMBER DOT DOT . EQUAL NUMBER LBRACKET RBRACKET

    EQUAL           shift and go to state 384


state 349

    (24) for -> FOR VARIABLE IN expresion LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 385
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    expresion                      shift and go to state 8
    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 350

    (25) for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .

    PRINT           reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    RETURN          reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    NUMBER          reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    FLOAT           reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    STRING          reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    TRUE            reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    FALSE           reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    CONTINUE        reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    BREAK           reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    USE             reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    LET             reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    STRUCT          reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    FOR             reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    WHILE           reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    IF              reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    LOOP            reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    ARRAY           reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    BITAND          reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    LPAREN          reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    VEC             reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    CONST           reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    MUT             reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    FN              reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    TIMES           reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    $end            reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    RPAREN          reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    COMMA           reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 25 (for -> FOR VARIABLE IN expresion LBRACKET RBRACKET .)


state 351

    (123) while -> WHILE LPAREN expresion RPAREN LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 386
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    expresion                      shift and go to state 8
    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 352

    (148) if -> IF expresion LBRACKET program RBRACKET ELSE .
    (149) if -> IF expresion LBRACKET program RBRACKET ELSE . LBRACKET program RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    PRINT           reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    RETURN          reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    NUMBER          reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    FLOAT           reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    STRING          reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    TRUE            reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    FALSE           reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    VARIABLE        reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    CONTINUE        reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    BREAK           reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    USE             reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    LET             reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    STRUCT          reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    FOR             reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    WHILE           reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    IF              reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    LOOP            reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    ARRAY           reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    BITAND          reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    LPAREN          reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    VEC             reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    CONST           reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    MUT             reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    FN              reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    TIMES           reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    $end            reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    SEMICOLON       reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    RPAREN          reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    COMMA           reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    RBRACKET        reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .)
    LBRACKET        shift and go to state 387

  ! LBRACKET        [ reduce using rule 148 (if -> IF expresion LBRACKET program RBRACKET ELSE .) ]


state 353

    (171) opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT . NUMBER R_BRACKET

    NUMBER          shift and go to state 388


state 354

    (36) numeros -> NUMBER COMMA numeros .

    R_BRACKET       reduce using rule 36 (numeros -> NUMBER COMMA numeros .)


state 355

    (139) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 389

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 356

    (119) funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 390
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 357

    (120) funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 391
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 358

    (6) item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 392


state 359

    (7) item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 393


state 360

    (64) vars -> VARIABLE COMMA . vars
    (63) vars -> . VARIABLE
    (64) vars -> . VARIABLE COMMA vars

    VARIABLE        shift and go to state 394

    vars                           shift and go to state 395

state 361

    (174) opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT . REV LPAREN RPAREN

    REV             shift and go to state 396


state 362

    (130) llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .

    PRINT           reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    USE             reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    RPAREN          reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)
    COMMA           reduce using rule 130 (llamadarandom -> VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON .)


state 363

    (94) llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    PRINT           reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    USE             reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LET             reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    IF              reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FN              reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    $end            reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    RPAREN          reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    COMMA           reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 94 (llamarfuncion -> VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON .)


state 364

    (159) funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .

    PRINT           reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    USE             reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    LET             reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    IF              reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    FN              reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    $end            reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 159 (funcionesvector -> VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON .)


state 365

    (163) funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .

    PRINT           reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    RETURN          reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    NUMBER          reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    FLOAT           reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    STRING          reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    TRUE            reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    FALSE           reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    BREAK           reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    USE             reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    LET             reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    STRUCT          reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    FOR             reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    WHILE           reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    IF              reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    LOOP            reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    ARRAY           reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    BITAND          reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    LPAREN          reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    VEC             reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    CONST           reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    MUT             reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    FN              reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    TIMES           reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    $end            reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 163 (funcionesvector -> VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON .)


state 366

    (164) funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion . RPAREN SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 397

  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]


state 367

    (165) funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .

    PRINT           reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    USE             reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    LET             reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    IF              reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    FN              reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    $end            reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 165 (funcionesvector -> VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON .)


state 368

    (167) funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion . RPAREN SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 398

  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]


state 369

    (38) funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion . RPAREN
    (87) expresion -> expresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 399

  ! RPAREN          [ reduce using rule 87 (expresion -> expresion .) ]


state 370

    (47) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    USE             reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 47 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 371

    (51) definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .

    PRINT           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RETURN          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    NUMBER          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FLOAT           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    STRING          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    TRUE            reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FALSE           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    VARIABLE        reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    CONTINUE        reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    BREAK           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    USE             reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LET             reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    STRUCT          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FOR             reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    WHILE           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    IF              reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LOOP            reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    ARRAY           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    BITAND          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LPAREN          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    VEC             reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    CONST           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    MUT             reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FN              reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    TIMES           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    $end            reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    SEMICOLON       reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LBRACKET        reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RPAREN          reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    COMMA           reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RBRACKET        reduce using rule 51 (definicionvariable -> LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)


state 372

    (151) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . EQUAL expresion SEMICOLON
    (152) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . SEMICOLON
    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    EQUAL           shift and go to state 400
    SEMICOLON       shift and go to state 401


state 373

    (34) list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .

    PRINT           reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    RETURN          reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    NUMBER          reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    STRING          reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    TRUE            reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    FALSE           reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    BREAK           reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    USE             reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    LET             reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    STRUCT          reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    FOR             reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    WHILE           reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    IF              reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    LOOP            reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    BITAND          reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    LPAREN          reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    VEC             reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    CONST           reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    MUT             reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    FN              reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    TIMES           reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    $end            reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)
    RBRACKET        reduce using rule 34 (list -> LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON .)


state 374

    (92) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN

    LPAREN          shift and go to state 402


state 375

    (61) definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .

    PRINT           reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    RETURN          reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    NUMBER          reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    FLOAT           reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    STRING          reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    TRUE            reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    FALSE           reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    VARIABLE        reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    CONTINUE        reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    BREAK           reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    USE             reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    LET             reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    STRUCT          reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    FOR             reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    WHILE           reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    IF              reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    LOOP            reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    ARRAY           reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    BITAND          reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    LPAREN          reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    VEC             reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    CONST           reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    MUT             reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    FN              reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    TIMES           reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    $end            reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    SEMICOLON       reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    LBRACKET        reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    RPAREN          reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    COMMA           reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)
    RBRACKET        reduce using rule 61 (definicionvariable -> LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion .)


state 376

    (122) array -> LET MUT VARIABLE . DOUBLE_POINT array SEMICOLON

    DOUBLE_POINT    shift and go to state 403


state 377

    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 404

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 378

    (52) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING . SEMICOLON
    (83) expresion -> STRING .
    (175) opbasicas -> STRING . DOT TO_STRING LPAREN RPAREN
    (111) operandos -> STRING .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 405
    DOT             shift and go to state 61
    COMMA           reduce using rule 111 (operandos -> STRING .)
    PLUS            reduce using rule 111 (operandos -> STRING .)
    MINUS           reduce using rule 111 (operandos -> STRING .)
    TIMES           reduce using rule 111 (operandos -> STRING .)
    DIVIDE          reduce using rule 111 (operandos -> STRING .)
    RDIAMOND        reduce using rule 111 (operandos -> STRING .)
    LDIAMOND        reduce using rule 111 (operandos -> STRING .)
    EQUAL_EQUAL     reduce using rule 111 (operandos -> STRING .)
    NOT_EQUAL       reduce using rule 111 (operandos -> STRING .)
    LESS_EQUAL      reduce using rule 111 (operandos -> STRING .)
    GREATER_EQUAL   reduce using rule 111 (operandos -> STRING .)
    PLUS_EQUAL      reduce using rule 111 (operandos -> STRING .)

  ! SEMICOLON       [ reduce using rule 83 (expresion -> STRING .) ]


state 379

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo . COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    COMMA           shift and go to state 406


state 380

    (153) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo . RDIAMOND SEMICOLON

    RDIAMOND        shift and go to state 407


state 381

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON . NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    NUMBER          shift and go to state 408


state 382

    (143) declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    USE             reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 143 (declaracion_mutable -> MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 383

    (20) for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .

    PRINT           reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    RETURN          reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    STRING          reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    TRUE            reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    FALSE           reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    BREAK           reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    USE             reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    LET             reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    FOR             reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    WHILE           reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    IF              reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    LOOP            reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    BITAND          reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    VEC             reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    CONST           reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    MUT             reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    FN              reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    TIMES           reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    $end            reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    COMMA           reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 20 (for -> FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET .)


state 384

    (22) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL . NUMBER LBRACKET program RBRACKET
    (23) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL . NUMBER LBRACKET RBRACKET

    NUMBER          shift and go to state 409


state 385

    (24) for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .

    PRINT           reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    RETURN          reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    STRING          reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    TRUE            reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    FALSE           reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    BREAK           reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    USE             reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    LET             reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    FOR             reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    WHILE           reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    IF              reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    LOOP            reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    BITAND          reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    VEC             reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    CONST           reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    MUT             reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    FN              reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    TIMES           reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    $end            reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    COMMA           reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 24 (for -> FOR VARIABLE IN expresion LBRACKET program RBRACKET .)


state 386

    (123) while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .

    PRINT           reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    RETURN          reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    STRING          reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    TRUE            reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    FALSE           reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    BREAK           reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    USE             reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    LET             reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    FOR             reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    WHILE           reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    IF              reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    LOOP            reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    BITAND          reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    VEC             reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    CONST           reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    MUT             reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    FN              reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    TIMES           reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    $end            reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    COMMA           reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 123 (while -> WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET .)


state 387

    (149) if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET . program RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    expresion                      shift and go to state 8
    program                        shift and go to state 410
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 388

    (171) opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER . R_BRACKET

    R_BRACKET       shift and go to state 411


state 389

    (139) declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    USE             reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 139 (declaracion_constante -> CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 390

    (119) funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .

    PRINT           reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    RETURN          reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    STRING          reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    TRUE            reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    FALSE           reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    BREAK           reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    USE             reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    LET             reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    FOR             reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    WHILE           reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    IF              reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    LOOP            reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    BITAND          reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    VEC             reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    CONST           reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    MUT             reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    FN              reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    TIMES           reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    $end            reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 119 (funciongenerica -> FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET .)


state 391

    (120) funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .

    PRINT           reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    RETURN          reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    STRING          reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    TRUE            reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    FALSE           reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    BREAK           reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    USE             reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    LET             reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    FOR             reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    WHILE           reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    IF              reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    LOOP            reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    BITAND          reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    VEC             reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    CONST           reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    MUT             reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    FN              reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    TIMES           reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    $end            reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 120 (funciongenerica -> FN MAIN LPAREN RPAREN LBRACKET program RBRACKET .)


state 392

    (6) item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .

    PRINT           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    USE             reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    LET             reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    IF              reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    FN              reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    $end            reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 6 (item -> PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON .)


state 393

    (7) item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .

    PRINT           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    RETURN          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    NUMBER          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    FLOAT           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    STRING          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    TRUE            reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    FALSE           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    BREAK           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    USE             reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    LET             reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    STRUCT          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    FOR             reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    WHILE           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    IF              reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    LOOP            reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    ARRAY           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    BITAND          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    LPAREN          reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    VEC             reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    CONST           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    MUT             reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    FN              reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    TIMES           reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    $end            reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 7 (item -> PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON .)


state 394

    (63) vars -> VARIABLE .
    (64) vars -> VARIABLE . COMMA vars

    RPAREN          reduce using rule 63 (vars -> VARIABLE .)
    COMMA           shift and go to state 360


state 395

    (64) vars -> VARIABLE COMMA vars .

    RPAREN          reduce using rule 64 (vars -> VARIABLE COMMA vars .)


state 396

    (174) opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV . LPAREN RPAREN

    LPAREN          shift and go to state 412


state 397

    (164) funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 413


state 398

    (167) funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 414


state 399

    (38) funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .

    PRINT           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    RETURN          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    NUMBER          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    FLOAT           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    STRING          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    TRUE            reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    FALSE           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    VARIABLE        reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    CONTINUE        reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    BREAK           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    USE             reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    LET             reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    STRUCT          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    FOR             reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    WHILE           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    IF              reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    LOOP            reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    ARRAY           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    BITAND          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    LPAREN          reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    VEC             reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    CONST           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    MUT             reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    FN              reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    TIMES           reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    $end            reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)
    RBRACKET        reduce using rule 38 (funcioneshashmap -> VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN .)


state 400

    (151) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL . expresion SEMICOLON
    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL . VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    VEC             shift and go to state 415
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 416
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 401

    (152) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .

    PRINT           reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    RETURN          reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    NUMBER          reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FLOAT           reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRING          reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    TRUE            reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FALSE           reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    VARIABLE        reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    CONTINUE        reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    BREAK           reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    USE             reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LET             reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRUCT          reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FOR             reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    WHILE           reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    IF              reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LOOP            reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    ARRAY           reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    BITAND          reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LPAREN          reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    VEC             reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    CONST           reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    MUT             reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FN              reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    TIMES           reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    $end            reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    RBRACKET        reduce using rule 152 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)


state 402

    (92) llamarfuncion -> VARIABLE LPAREN . RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE LPAREN . expresion RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE LPAREN . expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> VARIABLE LPAREN . operandos RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE LPAREN . operandos RPAREN
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    RPAREN          shift and go to state 116
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 119
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 417
    TIMES           shift and go to state 57
    BITAND          shift and go to state 120
    ARRAY           shift and go to state 52
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 117
    operandos                      shift and go to state 118
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 403

    (122) array -> LET MUT VARIABLE DOUBLE_POINT . array SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON

    LET             shift and go to state 283

    array                          shift and go to state 286

state 404

    (50) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    USE             reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LET             reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    IF              reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    FN              reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    $end            reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    SEMICOLON       reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    LBRACKET        reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RPAREN          reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    COMMA           reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 50 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON .)


state 405

    (52) definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .

    PRINT           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RETURN          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    NUMBER          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FLOAT           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    STRING          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    TRUE            reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FALSE           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    VARIABLE        reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    CONTINUE        reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    BREAK           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    USE             reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LET             reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    STRUCT          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FOR             reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    WHILE           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    IF              reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LOOP            reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    ARRAY           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    BITAND          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LPAREN          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    VEC             reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    CONST           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    MUT             reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    FN              reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    TIMES           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    $end            reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    SEMICOLON       reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    LBRACKET        reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RPAREN          reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    COMMA           reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)
    RBRACKET        reduce using rule 52 (definicionvariable -> LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON .)


state 406

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA . tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (65) tipo -> . INT8
    (66) tipo -> . INT16
    (67) tipo -> . INT32
    (68) tipo -> . INT64
    (69) tipo -> . UINT8
    (70) tipo -> . UINT16
    (71) tipo -> . UINT32
    (72) tipo -> . UINT64
    (73) tipo -> . FLOAT32
    (74) tipo -> . FLOAT64
    (75) tipo -> . BOOL
    (76) tipo -> . CHAR
    (77) tipo -> . STR
    (78) tipo -> . VARIABLE
    (79) tipo -> . VEC tipo

    INT8            shift and go to state 205
    INT16           shift and go to state 206
    INT32           shift and go to state 207
    INT64           shift and go to state 208
    UINT8           shift and go to state 209
    UINT16          shift and go to state 210
    UINT32          shift and go to state 211
    UINT64          shift and go to state 212
    FLOAT32         shift and go to state 213
    FLOAT64         shift and go to state 214
    BOOL            shift and go to state 215
    CHAR            shift and go to state 216
    STR             shift and go to state 217
    VARIABLE        shift and go to state 202
    VEC             shift and go to state 225

    tipo                           shift and go to state 418

state 407

    (153) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . EQUAL expresion SEMICOLON
    (154) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND . SEMICOLON

    EQUAL           shift and go to state 419
    SEMICOLON       shift and go to state 420


state 408

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER . R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    R_BRACKET       shift and go to state 421


state 409

    (22) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER . LBRACKET program RBRACKET
    (23) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER . LBRACKET RBRACKET

    LBRACKET        shift and go to state 422


state 410

    (149) if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 423
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    expresion                      shift and go to state 8
    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 411

    (171) opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .

    SEMICOLON       reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    PRINT           reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    RETURN          reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    NUMBER          reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    FLOAT           reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    STRING          reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    TRUE            reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    FALSE           reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    VARIABLE        reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    CONTINUE        reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    BREAK           reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    USE             reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LET             reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    STRUCT          reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    FOR             reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    WHILE           reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    IF              reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LOOP            reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    ARRAY           reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    BITAND          reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LPAREN          reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    VEC             reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    CONST           reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    MUT             reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    FN              reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    TIMES           reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    $end            reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    COMMA           reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    PLUS            reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    MINUS           reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    DIVIDE          reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    RDIAMOND        reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LDIAMOND        reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    EQUAL_EQUAL     reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    NOT_EQUAL       reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LESS_EQUAL      reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    GREATER_EQUAL   reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    PLUS_EQUAL      reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    LBRACKET        reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    RPAREN          reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    RBRACKET        reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)
    R_BRACKET       reduce using rule 171 (opbasicas -> BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET .)


state 412

    (174) opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN . RPAREN

    RPAREN          shift and go to state 424


state 413

    (164) funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .

    PRINT           reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    USE             reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    LET             reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    IF              reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    FN              reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    $end            reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 164 (funcionesvector -> VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON .)


state 414

    (167) funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .

    PRINT           reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    RETURN          reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    NUMBER          reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FLOAT           reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    STRING          reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    TRUE            reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FALSE           reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    BREAK           reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    USE             reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LET             reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    STRUCT          reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FOR             reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    WHILE           reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    IF              reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LOOP            reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    ARRAY           reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    BITAND          reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    LPAREN          reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    VEC             reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    CONST           reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    MUT             reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    FN              reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    TIMES           reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    $end            reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 167 (funcionesvector -> VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON .)


state 415

    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC . DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (177) opbasicas -> VEC . EXCLAMATION L_BRACKET numeros R_BRACKET

    DOUBLE_POINT    shift and go to state 425
    EXCLAMATION     shift and go to state 101


state 416

    (151) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 426

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 417

    (86) expresion -> VARIABLE .
    (110) operandos -> VARIABLE .
    (172) opbasicas -> VARIABLE . DOT ITER LPAREN RPAREN
    (176) opbasicas -> VARIABLE . LPAREN variables RPAREN
    (178) opbasicas -> VARIABLE . DOT VARIABLE LPAREN RPAREN
    (56) definicionvariable -> VARIABLE . EQUAL expresion SEMICOLON
    (57) definicionvariable -> VARIABLE . EQUAL STRING SEMICOLON
    (92) llamarfuncion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> VARIABLE . LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> VARIABLE . LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> VARIABLE . LPAREN operandos RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 86 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 86 (expresion -> VARIABLE .)
    RPAREN          reduce using rule 86 (expresion -> VARIABLE .)
    COMMA           reduce using rule 86 (expresion -> VARIABLE .)
    PLUS            reduce using rule 110 (operandos -> VARIABLE .)
    MINUS           reduce using rule 110 (operandos -> VARIABLE .)
    TIMES           reduce using rule 110 (operandos -> VARIABLE .)
    DIVIDE          reduce using rule 110 (operandos -> VARIABLE .)
    RDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    LDIAMOND        reduce using rule 110 (operandos -> VARIABLE .)
    EQUAL_EQUAL     reduce using rule 110 (operandos -> VARIABLE .)
    NOT_EQUAL       reduce using rule 110 (operandos -> VARIABLE .)
    LESS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    GREATER_EQUAL   reduce using rule 110 (operandos -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 110 (operandos -> VARIABLE .)
    DOT             shift and go to state 110
    LPAREN          shift and go to state 69
    EQUAL           shift and go to state 70

  ! RPAREN          [ reduce using rule 110 (operandos -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 110 (operandos -> VARIABLE .) ]


state 418

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo . RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    RDIAMOND        shift and go to state 427


state 419

    (153) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL . expresion SEMICOLON
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON

    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 64
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    LET             shift and go to state 67
    TIMES           shift and go to state 57
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    CONST           shift and go to state 55
    MUT             shift and go to state 38

    expresion                      shift and go to state 428
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    estructuracontrol              shift and go to state 65
    definicionvariable             shift and go to state 66
    llamarfuncion                  shift and go to state 30
    operandos                      shift and go to state 51
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40

state 420

    (154) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .

    PRINT           reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    RETURN          reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    NUMBER          reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FLOAT           reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRING          reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    TRUE            reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FALSE           reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    VARIABLE        reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    CONTINUE        reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    BREAK           reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    USE             reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LET             reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    STRUCT          reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FOR             reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    WHILE           reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    IF              reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LOOP            reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    ARRAY           reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    BITAND          reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    LPAREN          reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    VEC             reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    CONST           reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    MUT             reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    FN              reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    TIMES           reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    $end            reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)
    RBRACKET        reduce using rule 154 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON .)


state 421

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET . EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    EQUAL           shift and go to state 429


state 422

    (22) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET . program RBRACKET
    (23) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET . RBRACKET
    (1) program -> . program item
    (2) program -> . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 431
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    program                        shift and go to state 430
    item                           shift and go to state 2
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 423

    (149) if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .

    PRINT           reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    RETURN          reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    STRING          reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    TRUE            reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    FALSE           reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    BREAK           reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    USE             reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    LET             reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    FOR             reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    WHILE           reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    IF              reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    LOOP            reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    BITAND          reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    VEC             reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    CONST           reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    MUT             reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    FN              reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    TIMES           reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    $end            reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    COMMA           reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 149 (if -> IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET .)


state 424

    (174) opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .

    SEMICOLON       reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    PRINT           reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    RETURN          reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    NUMBER          reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    FLOAT           reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    STRING          reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    TRUE            reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    FALSE           reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    VARIABLE        reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    CONTINUE        reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    BREAK           reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    USE             reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LET             reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    STRUCT          reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    FOR             reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    WHILE           reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    IF              reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LOOP            reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    ARRAY           reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    BITAND          reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LPAREN          reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    VEC             reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    CONST           reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    MUT             reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    FN              reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    TIMES           reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    $end            reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    COMMA           reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    PLUS            reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    MINUS           reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    DIVIDE          reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    RDIAMOND        reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LDIAMOND        reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    LBRACKET        reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    RPAREN          reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    RBRACKET        reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)
    R_BRACKET       reduce using rule 174 (opbasicas -> LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN .)


state 425

    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT . DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    DOUBLE_POINT    shift and go to state 432


state 426

    (151) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    USE             reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LET             reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    IF              reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FN              reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    $end            reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 151 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)


state 427

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND . EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    EQUAL           shift and go to state 433


state 428

    (153) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion . SEMICOLON
    (87) expresion -> expresion .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 434

  ! SEMICOLON       [ reduce using rule 87 (expresion -> expresion .) ]


state 429

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL . L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    L_BRACKET       shift and go to state 435


state 430

    (22) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program . RBRACKET
    (1) program -> program . item
    (3) item -> . definicion
    (4) item -> . estructuracontrol
    (5) item -> . PRINT EXCLAMATION LPAREN STRING RPAREN SEMICOLON
    (6) item -> . PRINT EXCLAMATION LPAREN STRING COMMA expresion RPAREN SEMICOLON
    (7) item -> . PRINT EXCLAMATION LPAREN STRING COMMA vars RPAREN SEMICOLON
    (8) item -> . expresion
    (9) item -> . expresion SEMICOLON
    (10) item -> . continue
    (11) item -> . break
    (12) item -> . funcionesesdata
    (13) item -> . RETURN expresion SEMICOLON
    (14) item -> . import
    (15) item -> . llamadarandom
    (26) definicion -> . definicionvariable
    (27) definicion -> . definicionestructura
    (28) definicion -> . definicionfuncion
    (29) definicion -> . definicionestructuradatos
    (16) estructuracontrol -> . for
    (17) estructuracontrol -> . while
    (18) estructuracontrol -> . if
    (19) estructuracontrol -> . loop
    (80) expresion -> . ops
    (81) expresion -> . NUMBER
    (82) expresion -> . FLOAT
    (83) expresion -> . STRING
    (84) expresion -> . TRUE
    (85) expresion -> . FALSE
    (86) expresion -> . VARIABLE
    (87) expresion -> . expresion
    (88) expresion -> . opbasicas
    (89) expresion -> . estructuracontrol
    (90) expresion -> . definicionvariable
    (91) expresion -> . llamarfuncion
    (138) continue -> . CONTINUE SEMICOLON
    (136) break -> . BREAK SEMICOLON
    (137) break -> . BREAK expresion SEMICOLON
    (156) funcionesesdata -> . funcionesvector
    (157) funcionesesdata -> . funcioneshashmap
    (158) funcionesesdata -> . funcionesarray
    (129) import -> . USE VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE SEMICOLON
    (130) llamadarandom -> . VARIABLE DOUBLE_POINT DOUBLE_POINT VARIABLE LPAREN RPAREN SEMICOLON
    (47) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (48) definicionvariable -> . LET VARIABLE EQUAL expresion SEMICOLON
    (49) definicionvariable -> . LET MUT VARIABLE EQUAL expresion SEMICOLON
    (50) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (51) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (52) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo EQUAL STRING SEMICOLON
    (53) definicionvariable -> . LET VARIABLE DOUBLE_POINT tipo SEMICOLON
    (54) definicionvariable -> . LET MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (55) definicionvariable -> . LET VARIABLE SEMICOLON
    (56) definicionvariable -> . VARIABLE EQUAL expresion SEMICOLON
    (57) definicionvariable -> . VARIABLE EQUAL STRING SEMICOLON
    (58) definicionvariable -> . LET VARIABLE EQUAL expresion
    (59) definicionvariable -> . declaracion_constante
    (60) definicionvariable -> . declaracion_mutable
    (61) definicionvariable -> . LET VARIABLE LPAREN VARIABLE RPAREN EQUAL llamarfuncion
    (62) definicionvariable -> . LET MUT VARIABLE EQUAL llamadarandom
    (45) definicionestructura -> . STRUCT VARIABLE LBRACKET item RBRACKET SEMICOLON
    (46) definicionestructura -> . STRUCT VARIABLE LBRACKET RBRACKET SEMICOLON
    (118) definicionfuncion -> . funciongenerica
    (30) definicionestructuradatos -> . hashmap
    (31) definicionestructuradatos -> . array
    (32) definicionestructuradatos -> . vector
    (33) definicionestructuradatos -> . list
    (20) for -> . FOR VARIABLE IN VARIABLE LBRACKET program RBRACKET
    (21) for -> . FOR VARIABLE IN VARIABLE LBRACKET RBRACKET
    (22) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET
    (23) for -> . FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET
    (24) for -> . FOR VARIABLE IN expresion LBRACKET program RBRACKET
    (25) for -> . FOR VARIABLE IN expresion LBRACKET RBRACKET
    (123) while -> . WHILE LPAREN expresion RPAREN LBRACKET program RBRACKET
    (124) while -> . WHILE expresion LBRACKET program RBRACKET
    (147) if -> . IF expresion LBRACKET program RBRACKET
    (148) if -> . IF expresion LBRACKET program RBRACKET ELSE
    (149) if -> . IF expresion LBRACKET program RBRACKET ELSE LBRACKET program RBRACKET
    (150) loop -> . LOOP LBRACKET program RBRACKET
    (179) ops -> . operandos operaciones operandos
    (180) ops -> . operandos operaciones ops
    (170) opbasicas -> . ARRAY DOT LEN LPAREN RPAREN
    (171) opbasicas -> . BITAND VARIABLE L_BRACKET NUMBER DOT DOT NUMBER R_BRACKET
    (172) opbasicas -> . VARIABLE DOT ITER LPAREN RPAREN
    (173) opbasicas -> . ARRAY L_BRACKET operandos R_BRACKET
    (174) opbasicas -> . LPAREN NUMBER DOT DOT NUMBER RPAREN DOT REV LPAREN RPAREN
    (175) opbasicas -> . STRING DOT TO_STRING LPAREN RPAREN
    (176) opbasicas -> . VARIABLE LPAREN variables RPAREN
    (177) opbasicas -> . VEC EXCLAMATION L_BRACKET numeros R_BRACKET
    (178) opbasicas -> . VARIABLE DOT VARIABLE LPAREN RPAREN
    (92) llamarfuncion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (93) llamarfuncion -> . VARIABLE LPAREN expresion RPAREN SEMICOLON
    (94) llamarfuncion -> . VARIABLE LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (95) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN SEMICOLON
    (96) llamarfuncion -> . VARIABLE LPAREN operandos RPAREN
    (159) funcionesvector -> . VARIABLE DOT PUSH LPAREN expresion RPAREN SEMICOLON
    (160) funcionesvector -> . VARIABLE DOT POP LPAREN RPAREN SEMICOLON
    (161) funcionesvector -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (162) funcionesvector -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (163) funcionesvector -> . VARIABLE DOT GET LPAREN NUMBER RPAREN SEMICOLON
    (164) funcionesvector -> . VARIABLE DOT SET LPAREN NUMBER COMMA expresion RPAREN SEMICOLON
    (165) funcionesvector -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN SEMICOLON
    (166) funcionesvector -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (167) funcionesvector -> . VARIABLE DOT SWAP LPAREN expresion COMMA expresion RPAREN SEMICOLON
    (168) funcionesvector -> . VARIABLE DOT REVERSE LPAREN RPAREN SEMICOLON
    (169) funcionesvector -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (38) funcioneshashmap -> . VARIABLE DOT INSERT LPAREN expresion COMMA expresion RPAREN
    (39) funcioneshashmap -> . VARIABLE DOT REMOVE LPAREN expresion RPAREN
    (40) funcioneshashmap -> . VARIABLE DOT GET LPAREN expresion RPAREN
    (41) funcioneshashmap -> . VARIABLE DOT LEN LPAREN RPAREN
    (42) funcioneshashmap -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN
    (43) funcioneshashmap -> . VARIABLE DOT CLEAR LPAREN RPAREN
    (44) funcioneshashmap -> . VARIABLE DOT ITER LPAREN RPAREN
    (125) funcionesarray -> . VARIABLE DOT LEN LPAREN RPAREN SEMICOLON
    (126) funcionesarray -> . VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON
    (127) funcionesarray -> . VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON
    (128) funcionesarray -> . VARIABLE DOT ITER LPAREN RPAREN SEMICOLON
    (139) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (140) declaracion_constante -> . CONST VARIABLE DOUBLE_POINT tipo SEMICOLON
    (141) declaracion_constante -> . CONST VARIABLE EQUAL expresion SEMICOLON
    (142) declaracion_constante -> . CONST VARIABLE SEMICOLON
    (143) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo EQUAL expresion SEMICOLON
    (144) declaracion_mutable -> . MUT VARIABLE DOUBLE_POINT tipo SEMICOLON
    (145) declaracion_mutable -> . MUT VARIABLE EQUAL expresion SEMICOLON
    (146) declaracion_mutable -> . MUT VARIABLE SEMICOLON
    (119) funciongenerica -> . FN VARIABLE LPAREN RPAREN LBRACKET program RBRACKET
    (120) funciongenerica -> . FN MAIN LPAREN RPAREN LBRACKET program RBRACKET
    (37) hashmap -> . LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (121) array -> . LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON
    (122) array -> . LET MUT VARIABLE DOUBLE_POINT array SEMICOLON
    (151) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (152) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (153) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON
    (154) vector -> . LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND SEMICOLON
    (155) vector -> . LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON
    (34) list -> . LET VARIABLE EQUAL L_BRACKET numeros R_BRACKET SEMICOLON
    (108) operandos -> . NUMBER
    (109) operandos -> . FLOAT
    (110) operandos -> . VARIABLE
    (111) operandos -> . STRING
    (112) operandos -> . opbasicas
    (113) operandos -> . TIMES VARIABLE
    (114) operandos -> . BITAND VARIABLE
    (115) operandos -> . operandos COMMA operandos

    RBRACKET        shift and go to state 436
    PRINT           shift and go to state 5
    RETURN          shift and go to state 12
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 25
    STRING          shift and go to state 7
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    VARIABLE        shift and go to state 28
    CONTINUE        shift and go to state 31
    BREAK           shift and go to state 32
    USE             shift and go to state 36
    LET             shift and go to state 37
    STRUCT          shift and go to state 41
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    LOOP            shift and go to state 50
    ARRAY           shift and go to state 52
    BITAND          shift and go to state 53
    LPAREN          shift and go to state 6
    VEC             shift and go to state 54
    CONST           shift and go to state 55
    MUT             shift and go to state 38
    FN              shift and go to state 56
    TIMES           shift and go to state 57

    item                           shift and go to state 58
    definicion                     shift and go to state 3
    estructuracontrol              shift and go to state 4
    expresion                      shift and go to state 8
    continue                       shift and go to state 9
    break                          shift and go to state 10
    funcionesesdata                shift and go to state 11
    import                         shift and go to state 13
    llamadarandom                  shift and go to state 14
    definicionvariable             shift and go to state 15
    definicionestructura           shift and go to state 16
    definicionfuncion              shift and go to state 17
    definicionestructuradatos      shift and go to state 18
    for                            shift and go to state 19
    while                          shift and go to state 20
    if                             shift and go to state 21
    loop                           shift and go to state 22
    ops                            shift and go to state 23
    opbasicas                      shift and go to state 29
    llamarfuncion                  shift and go to state 30
    funcionesvector                shift and go to state 33
    funcioneshashmap               shift and go to state 34
    funcionesarray                 shift and go to state 35
    declaracion_constante          shift and go to state 39
    declaracion_mutable            shift and go to state 40
    funciongenerica                shift and go to state 42
    hashmap                        shift and go to state 43
    array                          shift and go to state 44
    vector                         shift and go to state 45
    list                           shift and go to state 46
    operandos                      shift and go to state 51

state 431

    (23) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .

    PRINT           reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    RETURN          reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    NUMBER          reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    FLOAT           reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    STRING          reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    TRUE            reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    FALSE           reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    CONTINUE        reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    BREAK           reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    USE             reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    LET             reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    STRUCT          reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    FOR             reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    WHILE           reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    IF              reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    LOOP            reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    ARRAY           reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    BITAND          reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    LPAREN          reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    VEC             reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    CONST           reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    MUT             reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    FN              reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    TIMES           reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    $end            reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    RPAREN          reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    COMMA           reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 23 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET RBRACKET .)


state 432

    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT . NEW LPAREN RPAREN SEMICOLON

    NEW             shift and go to state 437


state 433

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL . HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    HASHMAP         shift and go to state 438


state 434

    (153) vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .

    PRINT           reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    RETURN          reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    NUMBER          reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FLOAT           reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRING          reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    TRUE            reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FALSE           reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    VARIABLE        reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    CONTINUE        reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    BREAK           reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    USE             reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LET             reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    STRUCT          reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FOR             reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    WHILE           reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    IF              reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LOOP            reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    ARRAY           reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    BITAND          reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    LPAREN          reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    VEC             reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    CONST           reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    MUT             reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    FN              reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    TIMES           reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    $end            reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)
    RBRACKET        reduce using rule 153 (vector -> LET MUT VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL expresion SEMICOLON .)


state 435

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET . NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON

    NUMBER          shift and go to state 439


state 436

    (22) for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .

    PRINT           reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    RETURN          reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    NUMBER          reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    FLOAT           reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    STRING          reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    TRUE            reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    FALSE           reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    VARIABLE        reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    CONTINUE        reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    BREAK           reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    USE             reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    LET             reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    STRUCT          reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    FOR             reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    WHILE           reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    IF              reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    LOOP            reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    ARRAY           reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    BITAND          reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    VEC             reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    CONST           reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    MUT             reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    FN              reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    TIMES           reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    $end            reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    SEMICOLON       reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    LBRACKET        reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    RPAREN          reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    COMMA           reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 22 (for -> FOR VARIABLE IN NUMBER DOT DOT EQUAL NUMBER LBRACKET program RBRACKET .)


state 437

    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 440


state 438

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP . DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    DOUBLE_POINT    shift and go to state 441


state 439

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER . SEMICOLON NUMBER R_BRACKET SEMICOLON

    SEMICOLON       shift and go to state 442


state 440

    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 443


state 441

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT . DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON

    DOUBLE_POINT    shift and go to state 444


state 442

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON . NUMBER R_BRACKET SEMICOLON

    NUMBER          shift and go to state 445


state 443

    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 446


state 444

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT . NEW LPAREN RPAREN SEMICOLON

    NEW             shift and go to state 447


state 445

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER . R_BRACKET SEMICOLON

    R_BRACKET       shift and go to state 448


state 446

    (155) vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .

    PRINT           reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    USE             reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 155 (vector -> LET VARIABLE DOUBLE_POINT VEC LDIAMOND tipo RDIAMOND EQUAL VEC DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)


state 447

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 449


state 448

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 450


state 449

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 451


state 450

    (121) array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .

    PRINT           reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    RETURN          reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    NUMBER          reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    STRING          reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    TRUE            reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    FALSE           reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    BREAK           reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    USE             reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    LET             reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    STRUCT          reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    FOR             reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    WHILE           reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    IF              reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    LOOP            reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    BITAND          reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    LPAREN          reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    VEC             reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    CONST           reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    MUT             reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    FN              reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    TIMES           reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    $end            reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    RBRACKET        reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 121 (array -> LET MUT ARRAY DOUBLE_POINT L_BRACKET tipo SEMICOLON NUMBER R_BRACKET EQUAL L_BRACKET NUMBER SEMICOLON NUMBER R_BRACKET SEMICOLON .)


state 451

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 452


state 452

    (37) hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .

    PRINT           reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    NUMBER          reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    TRUE            reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FALSE           reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    USE             reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    STRUCT          reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LOOP            reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    BITAND          reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    VEC             reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    MUT             reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    FN              reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    TIMES           reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 37 (hashmap -> LET MUT VARIABLE DOUBLE_POINT HASHMAP LDIAMOND tipo COMMA tipo RDIAMOND EQUAL HASHMAP DOUBLE_POINT DOUBLE_POINT NEW LPAREN RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 8 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 28 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 63 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 64 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 74 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 82 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 83 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 114 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 114 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 117 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 117 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 121 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 122 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 149 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 154 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 154 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 158 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 161 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 184 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 218 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 218 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 226 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 229 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 231 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 243 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 256 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 259 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 260 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 264 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 265 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 267 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 269 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 271 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 281 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 310 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 312 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 331 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 332 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 344 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 352 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 355 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 366 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 368 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 369 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 377 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 378 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 416 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 428 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (item -> estructuracontrol)
WARNING: rejected rule (expresion -> estructuracontrol) in state 4
WARNING: reduce/reduce conflict in state 7 resolved using rule (expresion -> STRING)
WARNING: rejected rule (operandos -> STRING) in state 7
WARNING: reduce/reduce conflict in state 8 resolved using rule (item -> expresion)
WARNING: rejected rule (expresion -> expresion) in state 8
WARNING: reduce/reduce conflict in state 15 resolved using rule (definicion -> definicionvariable)
WARNING: rejected rule (expresion -> definicionvariable) in state 15
WARNING: reduce/reduce conflict in state 24 resolved using rule (expresion -> NUMBER)
WARNING: rejected rule (operandos -> NUMBER) in state 24
WARNING: reduce/reduce conflict in state 25 resolved using rule (expresion -> FLOAT)
WARNING: rejected rule (operandos -> FLOAT) in state 25
WARNING: reduce/reduce conflict in state 28 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (operandos -> VARIABLE) in state 28
WARNING: reduce/reduce conflict in state 29 resolved using rule (expresion -> opbasicas)
WARNING: rejected rule (operandos -> opbasicas) in state 29
WARNING: reduce/reduce conflict in state 64 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (operandos -> VARIABLE) in state 64
WARNING: reduce/reduce conflict in state 114 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (variables -> VARIABLE) in state 114
WARNING: reduce/reduce conflict in state 114 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (operandos -> VARIABLE) in state 114
WARNING: reduce/reduce conflict in state 119 resolved using rule (expresion -> STRING)
WARNING: rejected rule (operandos -> STRING) in state 119
WARNING: reduce/reduce conflict in state 218 resolved using rule (definicionvariable -> LET VARIABLE EQUAL expresion)
WARNING: rejected rule (expresion -> expresion) in state 218
WARNING: reduce/reduce conflict in state 259 resolved using rule (funcioneshashmap -> VARIABLE DOT ITER LPAREN RPAREN)
WARNING: rejected rule (opbasicas -> VARIABLE DOT ITER LPAREN RPAREN) in state 259
WARNING: reduce/reduce conflict in state 312 resolved using rule (vars -> VARIABLE)
WARNING: rejected rule (expresion -> VARIABLE) in state 312
WARNING: reduce/reduce conflict in state 317 resolved using rule (funcionesarray -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON)
WARNING: rejected rule (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON) in state 317
WARNING: reduce/reduce conflict in state 320 resolved using rule (funcionesarray -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON)
WARNING: rejected rule (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON) in state 320
WARNING: reduce/reduce conflict in state 321 resolved using rule (funcionesarray -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON)
WARNING: rejected rule (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON) in state 321
WARNING: reduce/reduce conflict in state 326 resolved using rule (funcionesarray -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON)
WARNING: rejected rule (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON) in state 326
WARNING: reduce/reduce conflict in state 417 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (operandos -> VARIABLE) in state 417
WARNING: Rule (expresion -> expresion) is never reduced
WARNING: Rule (funcionesvector -> VARIABLE DOT ITER LPAREN RPAREN SEMICOLON) is never reduced
WARNING: Rule (funcionesvector -> VARIABLE DOT LEN LPAREN RPAREN SEMICOLON) is never reduced
WARNING: Rule (funcionesvector -> VARIABLE DOT IS_EMPTY LPAREN RPAREN SEMICOLON) is never reduced
WARNING: Rule (funcionesvector -> VARIABLE DOT CLEAR LPAREN RPAREN SEMICOLON) is never reduced
